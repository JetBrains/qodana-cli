name: "Tests"
run-name: "Tests (os: ${{ inputs.os }}, docker: ${{ inputs.docker-version }})"
on:
  workflow_call:
    inputs: &inputs
      os:
        type: string
        default: ubuntu-latest
        description: OS for the runner
      docker-version:
        type: string
        default: latest
        description: Docker engine version
    secrets:
      SPACE_USERNAME:
        required: true
      SPACE_PASSWORD:
        required: true
      QODANA_LICENSE_ONLY_TOKEN:
        required: true
  workflow_dispatch:
    inputs: *inputs

jobs:
  test:
    name: Run tests
    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Docker
        uses: ./.github/actions/setup-docker
        with:
          version: ${{ inputs.docker-version }}
      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: "**/*.sum"
          go-version-file: go.work
      - name: Set GOROOT and PATH from setup-go (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "GOROOT=$(go env GOROOT)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "GOPATH=$(go env GOPATH)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh
      - name: Set up Java 17 for config-loader-cli.jar
        uses: actions/setup-java@v4
        with:
          distribution: "temurin" # Use the Temurin JDK distribution
          java-version: "17" # Java version 17
      - name: Overwrite tools (to run tests only on gh repo)
        run: >-
          touch
          cdnet/clt.zip
          tooling/baseline-cli.jar
          tooling/intellij-report-converter.jar
          tooling/qodana-fuser.jar
          clang/clang-tidy-linux-amd64.tar.gz
          clang/clang-tidy-linux-arm64.tar.gz
          clang/clang-tidy-windows-amd64.zip
          clang/clang-tidy-windows-arm64.zip
          clang/clang-tidy-darwin-amd64.tar.gz
          clang/clang-tidy-darwin-arm64.tar.gz
        shell: bash
      - name: Set up gotestfmt
        uses: gotesttools/gotestfmt-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: go install github.com/mfridman/tparse@latest
      - if: ${{ inputs.os == 'ubuntu-latest' }}
        uses: docker/login-action@v3
        with:
          registry: registry.jetbrains.team
          username: ${{ secrets.SPACE_USERNAME }}
          password: ${{ secrets.SPACE_PASSWORD }}
      - name: Build
        # Build everything that will be tested. Although go test performs a build itself, gotestfmt will panic on a
        # failed build.
        run: |
          go generate -v $(go list -f '{{.Dir}}/...' -m)
          go build -v $(go list -f '{{.Dir}}/...' -m)
        shell: bash
      - name: Run tests (with coverage)
        if: ${{ inputs.os != 'windows-latest' }}
        run: |
          set -euo pipefail
          go test -json -v $(go list -f '{{.Dir}}/...' -m) -coverprofile coverage-${{ inputs.os }}.out 2>&1 | tee /tmp/gotest.log | gotestfmt
        env:
          QODANA_LICENSE_ONLY_TOKEN: ${{ secrets.QODANA_LICENSE_ONLY_TOKEN }}
      - name: Run tests (with coverage) for Windows
        if: ${{ inputs.os == 'windows-latest' }}
        run: go test -v -json $(go list -f '{{.Dir}}/...' -m) -coverprofile coverage-${{ inputs.os }}.out | tparse -all -follow
        env:
          QODANA_LICENSE_ONLY_TOKEN: ${{ secrets.QODANA_LICENSE_ONLY_TOKEN }}
          GOROOT: ${{ env.GOROOT }}
          GOPATH: ${{ env.GOPATH }}
          PATH: ${{ env.PATH }}
