name: "Tests"
run-name: "Test (⚙️ ${{ inputs.os }}, 🐳 ${{ inputs.container-engine }})"
on:
  workflow_call:
    inputs: &inputs
      os:
        type: string
        default: ubuntu-latest
        description: Runner OS
      container-engine:
        type: string
        default: docker@latest
        description: Container engine type and version. See .github/actions/setup-container-engine for more info.
    secrets:
      QODANA_LICENSE_ONLY_TOKEN:
        required: true
  workflow_dispatch:
    inputs: *inputs

jobs:
  test:
    name: Test
    runs-on: ${{ inputs.os }}
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup container engine
        uses: ./.github/actions/setup-container-engine
        with:
          version: ${{ inputs.container-engine }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          cache-dependency-path: "**/*.sum"
          go-version-file: go.work

      - name: Set up Java 17 for config-loader-cli.jar
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 17

      - name: Create mock artifact dependencies
        # Note: these dependencies contain closed-source code and are not currently available on Github.
        shell: bash
        run: >-
          touch
          cdnet/clt.zip
          tooling/baseline-cli.jar
          tooling/intellij-report-converter.jar
          tooling/qodana-fuser.jar
          clang/clang-tidy-linux-amd64.tar.gz
          clang/clang-tidy-linux-arm64.tar.gz
          clang/clang-tidy-windows-amd64.zip
          clang/clang-tidy-windows-arm64.zip
          clang/clang-tidy-darwin-amd64.tar.gz
          clang/clang-tidy-darwin-arm64.tar.gz

      - name: Install test dependencies
        run: go install github.com/mfridman/tparse@latest

      - name: Build
        # Build everything that will be tested. Although go test performs a build itself, gotestfmt will panic on a
        # failed build.
        shell: bash
        run: |
          go generate -v $(go list -f '{{.Dir}}/...' -m)
          go build -v $(go list -f '{{.Dir}}/...' -m)

      - name: Export GOROOT and GOPATH
        shell: bash
        run: |
          echo "GOROOT=$(go env GOROOT)" >> "$GITHUB_ENV"
          echo "GOPATH=$(go env GOPATH)" >> "$GITHUB_ENV"

      - name: Run tests
        run: go test -v -json $(go list -f '{{.Dir}}/...' -m) -timeout 0 -coverprofile coverage-${{ inputs.os }}.out | tparse -all -follow
        env:
          QODANA_LICENSE_ONLY_TOKEN: ${{ secrets.QODANA_LICENSE_ONLY_TOKEN }}
