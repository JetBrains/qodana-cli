{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDGO",
          "fullName": "Qodana for Go",
          "version": "242.3350.1153",
          "rules": [],
          "taxa": [
            {
              "id": "JavaScript and TypeScript",
              "name": "JavaScript and TypeScript"
            },
            {
              "id": "JavaScript and TypeScript/Control flow issues",
              "name": "Control flow issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Go",
              "name": "Go"
            },
            {
              "id": "Go/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "Go",
                    "index": 3,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Go/Declaration redundancy",
              "name": "Declaration redundancy",
              "relationships": [
                {
                  "target": {
                    "id": "Go",
                    "index": 3,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Shell script",
              "name": "Shell script"
            },
            {
              "id": "JavaScript and TypeScript/Unit testing",
              "name": "Unit testing",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "JavaScript and TypeScript/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
              "name": "Potentially undesirable code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Flow type checker",
              "name": "Flow type checker",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "HTTP Client",
              "name": "HTTP Client"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "JavaScript and TypeScript/Unused symbols",
              "name": "Unused symbols",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Data flow",
              "name": "Data flow",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Bitwise operation issues",
              "name": "Bitwise operation issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/ES2015 migration aids",
              "name": "ES2015 migration aids",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "HTML/Accessibility",
              "name": "Accessibility",
              "relationships": [
                {
                  "target": {
                    "id": "HTML",
                    "index": 15,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/React",
              "name": "React",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/TypeScript",
              "name": "TypeScript",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Validity issues",
              "name": "Validity issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Potentially confusing code constructs",
              "name": "Potentially confusing code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSS",
              "name": "CSS"
            },
            {
              "id": "CSS/Invalid elements",
              "name": "Invalid elements",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 26,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Try statement issues",
              "name": "Try statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "JavaScript and TypeScript/Function metrics",
              "name": "Function metrics",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Dependency analysis",
              "name": "Dependency analysis"
            },
            {
              "id": "Go/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "Go",
                    "index": 3,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "YAML",
              "name": "YAML"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "JavaScript and TypeScript/Assignment issues",
              "name": "Assignment issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSS/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 26,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Go/Security",
              "name": "Security",
              "relationships": [
                {
                  "target": {
                    "id": "Go",
                    "index": 3,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Go/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "Go",
                    "index": 3,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Node.js",
              "name": "Node.js",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Go Template",
              "name": "Go Template"
            },
            {
              "id": "Go Template/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "Go Template",
                    "index": 41,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Imports and dependencies",
              "name": "Imports and dependencies",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Code Coverage",
              "name": "Code Coverage"
            },
            {
              "id": "CSS/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 26,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Naming conventions",
              "name": "Naming conventions",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Switch statement issues",
              "name": "Switch statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/DOM issues",
              "name": "DOM issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Go/Control flow issues",
              "name": "Control flow issues",
              "relationships": [
                {
                  "target": {
                    "id": "Go",
                    "index": 3,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Async code and promises",
              "name": "Async code and promises",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Go modules",
              "name": "Go modules"
            },
            {
              "id": "Go modules/Declaration redundancy",
              "name": "Declaration redundancy",
              "relationships": [
                {
                  "target": {
                    "id": "Go modules",
                    "index": 54,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Security",
              "name": "Security"
            },
            {
              "id": "Go modules/Dependency issues (go list -m -u)",
              "name": "Dependency issues (go list -m -u)",
              "relationships": [
                {
                  "target": {
                    "id": "Go modules",
                    "index": 54,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Go modules/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "Go modules",
                    "index": 54,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Qodana",
              "name": "Qodana"
            },
            {
              "id": "JavaScript and TypeScript/Security",
              "name": "Security",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "QDGO"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "JavaScript",
            "version": "242.3350",
            "rules": [
              {
                "id": "ConstantConditionalExpressionJS",
                "shortDescription": {
                  "text": "Constant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression in the format 'true? result1: result2' or 'false? result1: result2. Suggests simplifying the expression.'",
                  "markdown": "Reports a conditional expression in the format `true? result1: result2` or `false? result1: result2``.\nSuggests simplifying the expression.\n`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTestFailedLine",
                "shortDescription": {
                  "text": "Highlight failure line in test code"
                },
                "fullDescription": {
                  "text": "Reports a failed method call or an assertion in a test.",
                  "markdown": "Reports a failed method call or an assertion in a test."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSTestFailedLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 7,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonBlockStatementBodyJS",
                "shortDescription": {
                  "text": "Statement body without braces"
                },
                "fullDescription": {
                  "text": "Reports a 'if', 'while', 'for', or 'with' statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance.",
                  "markdown": "Reports a `if`, `while`, `for`, or `with` statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonBlockStatementBodyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithTooManyBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with too many branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction. Use the field below to specify the maximum number of branches expected.",
                  "markdown": "Reports an `if` statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction.\n\n\nUse the field below to specify the maximum number of branches expected."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithTooManyBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateJSDoc",
                "shortDescription": {
                  "text": "Syntax errors and unresolved references in JSDoc"
                },
                "fullDescription": {
                  "text": "Reports a syntax discrepancy in a documentation comment.",
                  "markdown": "Reports a syntax discrepancy in a documentation comment."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSValidateJSDoc",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementJS",
                "shortDescription": {
                  "text": "'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'break' statements. Ignores 'break' statements that end case blocks.",
                  "markdown": "Reports a `break` statements. Ignores `break` statements that end case blocks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSConfig",
                "shortDescription": {
                  "text": "Missing .flowconfig"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file with a '@flow' flag that doesn't have an associated '.flowconfig' file in the project.",
                  "markdown": "Reports a JavaScript file with a `@flow` flag that doesn't have an associated `.flowconfig` file in the project."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FlowJSConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfClassThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' of a class from closure"
                },
                "fullDescription": {
                  "text": "Reports an attempt to reference a member of an ECMAScript class via the 'this.' qualifier in a nested function that is not a lambda. 'this' in a nested function that is not a lambda is the function's own 'this' and doesn't relate to the outer class.",
                  "markdown": "Reports an attempt to reference a member of an ECMAScript class via the `this.` qualifier in a nested function that is not a lambda.  \n`this` in a nested function that is not a lambda is the function's own `this` and doesn't relate to the outer class."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidUsageOfClassThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DebuggerStatementJS",
                "shortDescription": {
                  "text": "'debugger' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'debugger' statement used for interaction with the Javascript debuggers. Such statements should not appear in production code.",
                  "markdown": "Reports a `debugger` statement used for interaction with the Javascript debuggers. Such statements should not appear in production code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DebuggerStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedAssignment",
                "shortDescription": {
                  "text": "Unused assignment"
                },
                "fullDescription": {
                  "text": "Reports a variable whose value is never used after assignment. Suggests removing the unused variable to shorten the code and to avoid redundant allocations. The following cases are reported: A variable is never read after assignment. The value of a variable is always overwritten with another assignment before the variable is read next time. The initializer of a variable is redundant (for one of the above-mentioned reasons).",
                  "markdown": "Reports a variable whose value is never used after assignment.  \nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\nThe following cases are reported:\n\n* A variable is never read after assignment.\n* The value of a variable is always overwritten with another assignment before the variable is read next time.\n* The initializer of a variable is redundant (for one of the above-mentioned reasons)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSError",
                "shortDescription": {
                  "text": "Flow type checker"
                },
                "fullDescription": {
                  "text": "Reports errors from Flow.",
                  "markdown": "Reports errors from [Flow](https://flowtype.org/)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "FlowJSError",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReuseOfLocalVariableJS",
                "shortDescription": {
                  "text": "Reuse of local variable"
                },
                "fullDescription": {
                  "text": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.",
                  "markdown": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReuseOfLocalVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftOutOfRangeJS",
                "shortDescription": {
                  "text": "Shift operation by possibly wrong constant"
                },
                "fullDescription": {
                  "text": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range '0..31', shifting by negative or overly large values.",
                  "markdown": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range `0..31`, shifting by negative or overly large values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ShiftOutOfRangeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClosureCompilerSyntax",
                "shortDescription": {
                  "text": "Incorrect usage of JSDoc tags"
                },
                "fullDescription": {
                  "text": "Reports warnings implied by Google Closure Compiler annotations including correct use of '@abstract', '@interface', and '@implements' tags.",
                  "markdown": "Reports warnings implied by *Google Closure Compiler* annotations including correct use of `@abstract`, `@interface`, and `@implements` tags."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSClosureCompilerSyntax",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryContinueJS",
                "shortDescription": {
                  "text": "Unnecessary 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'continue' statement at the end of a loop. Suggests removing such statements.",
                  "markdown": "Reports an unnecessary `continue` statement at the end of a loop. Suggests removing such statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryContinueJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertLetToConst",
                "shortDescription": {
                  "text": "'let' is used instead of 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'let' declaration that can be made 'const'.",
                  "markdown": "Reports a `let` declaration that can be made `const`.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertLetToConst",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXDomNesting",
                "shortDescription": {
                  "text": "Invalid DOM element nesting"
                },
                "fullDescription": {
                  "text": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements.",
                  "markdown": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSXDomNesting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/React",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a parameter, return value, or assigned expression of incorrect type.",
                  "markdown": "Reports a parameter, return value, or assigned expression of incorrect type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptValidateTypes",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionStatementJS",
                "shortDescription": {
                  "text": "Expression statement which is not assignment or call"
                },
                "fullDescription": {
                  "text": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error.",
                  "markdown": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "BadExpressionStatementJS",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingFloatingPointLiteralJS",
                "shortDescription": {
                  "text": "Confusing floating point literal"
                },
                "fullDescription": {
                  "text": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.",
                  "markdown": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingFloatingPointLiteralJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementWithLabelJS",
                "shortDescription": {
                  "text": "'break' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement.",
                  "markdown": "Reports a labeled `break` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatementWithLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueOrBreakFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'continue' or 'break' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'break' or 'continue' statement inside a 'finally' block. Such statements are very confusing, may hide exceptions, and complicate debugging.",
                  "markdown": "Reports a `break` or `continue` statement inside a `finally` block. Such statements are very confusing, may hide exceptions, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueOrBreakFromFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StatementsPerFunctionJS",
                "shortDescription": {
                  "text": "Overly long function"
                },
                "fullDescription": {
                  "text": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test. Use the field below to specify the maximum acceptable number of statements in a function.",
                  "markdown": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test.\n\n\nUse the field below to specify the maximum acceptable number of statements in a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionTooLongJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLocalVariableJS",
                "shortDescription": {
                  "text": "Redundant local variable"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary local variable that does not make a function more comprehensible: a local variable that is immediately returned a local variable that is immediately assigned to another variable and is not used anymore a local variable that always has the same value as another local variable or parameter. Use the checkbox below to have this inspection ignore variables that are immediately returned or thrown. Some coding styles suggest using such variables for clarity and ease of debugging.",
                  "markdown": "Reports an unnecessary local variable that does not make a function more comprehensible:\n\n* a local variable that is immediately returned\n* a local variable that is immediately assigned to another variable and is not used anymore\n* a local variable that always has the same value as another local variable or parameter.\n\n\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLocalVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMethodCanBeStatic",
                "shortDescription": {
                  "text": "Method can be made 'static'"
                },
                "fullDescription": {
                  "text": "Reports a class method that can be safely made 'static'. A method can be 'static' if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass. Use the first checkbox below to inspect only 'private' methods.",
                  "markdown": "Reports a class method that can be safely made `static`. A method can be `static` if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass.\n\n\nUse the first checkbox below to inspect only `private` methods."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMethodCanBeStatic",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeclarationsAtScopeStart",
                "shortDescription": {
                  "text": "'var' declared not at the beginning of a function"
                },
                "fullDescription": {
                  "text": "Checks that declarations of local variables declared with var are at the top of a function scope. By default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code.",
                  "markdown": "Checks that declarations of local variables declared with **var** are at the top of a function scope.   \n\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSDeclarationsAtScopeStart",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementWithLabelJS",
                "shortDescription": {
                  "text": "'continue' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement.",
                  "markdown": "Reports a labeled `continue` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatementWithLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSObjectNullOrUndefined",
                "shortDescription": {
                  "text": "Object is 'null' or 'undefined'"
                },
                "fullDescription": {
                  "text": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is 'undefined' or 'null'.",
                  "markdown": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is `undefined` or `null`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSObjectNullOrUndefined",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingConfigOption",
                "shortDescription": {
                  "text": "Missing tsconfig.json option "
                },
                "fullDescription": {
                  "text": "Reports a usage that requires an explicit option in 'tsconfig.json'. For example, to use JSX in '.tsx' files, 'tsconfig.json' must contain '\"jsx\"' property.",
                  "markdown": "Reports a usage that requires an explicit option in `tsconfig.json`. For example, to use JSX in `.tsx` files, `tsconfig.json` must contain `\"jsx\"` property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptMissingConfigOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name. The template for a new component can be modified in Editor | File and Code Templates.",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSXUnresolvedComponent",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ShorthandObjectProperty",
                "shortDescription": {
                  "text": "Property can be replaced with shorthand"
                },
                "fullDescription": {
                  "text": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it. Example: 'var obj = {foo:foo}' After applying the quick-fix the code looks as follows: 'var obj = {foo}'",
                  "markdown": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\nExample:\n\n\n    var obj = {foo:foo}\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    var obj = {foo}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ShorthandObjectProperty",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnBreakStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement whose labels may be removed without changing the flow of control.",
                  "markdown": "Reports a labeled `break` statement whose labels may be removed without changing the flow of control."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnBreakStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementJS",
                "shortDescription": {
                  "text": "'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'continue' statement.",
                  "markdown": "Reports a `continue` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToForLoopParameterJS",
                "shortDescription": {
                  "text": "Assignment to 'for' loop parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a variable declared as a 'for' loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.",
                  "markdown": "Reports an assignment to a variable declared as a `for` loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToForLoopParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidConstructorUsage",
                "shortDescription": {
                  "text": "Potentially invalid constructor usage"
                },
                "fullDescription": {
                  "text": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after 'new', using a constructor's prototype or calling a constructor without 'new'. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc '@constructor' tag.",
                  "markdown": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after `new`, using a constructor's prototype or calling a constructor without `new`. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc `@constructor` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidConstructorUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Pointless arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.",
                  "markdown": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessArithmeticExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NodeCoreCodingAssistance",
                "shortDescription": {
                  "text": "Unresolved Node.js APIs"
                },
                "fullDescription": {
                  "text": "Suggests configuring coding assistance for Node.js, for example, 'require' and/or core modules ('path', 'http', 'fs', etc.). See https://nodejs.org/api/ for the complete list.",
                  "markdown": "Suggests configuring coding assistance for Node.js, for example, `require` and/or core modules ('path', 'http', 'fs', etc.).\n\n\nSee <https://nodejs.org/api/> for the complete list."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NodeCoreCodingAssistance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Node.js",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndeclaredVariable",
                "shortDescription": {
                  "text": "Implicitly declared global JavaScript variable"
                },
                "fullDescription": {
                  "text": "Reports an implicit declaration of a global variable. Example: 'var aaa = 1; // good\n  bbb = 2; // bad, if bbb is not declared with 'var' somewhere'",
                  "markdown": "Reports an implicit declaration of a global variable.\n\nExample:\n\n\n      var aaa = 1; // good\n      bbb = 2; // bad, if bbb is not declared with 'var' somewhere\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUndeclaredVariable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DivideByZeroJS",
                "shortDescription": {
                  "text": "Division by zero"
                },
                "fullDescription": {
                  "text": "Reports division by zero or a remainder by zero.",
                  "markdown": "Reports division by zero or a remainder by zero."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DivideByZeroJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPrimitiveTypeWrapperUsage",
                "shortDescription": {
                  "text": "Primitive type object wrapper used"
                },
                "fullDescription": {
                  "text": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost.",
                  "markdown": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPrimitiveTypeWrapperUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSmartCast",
                "shortDescription": {
                  "text": "Narrowed type"
                },
                "fullDescription": {
                  "text": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection.",
                  "markdown": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptSmartCast",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertIndexedForToForOf",
                "shortDescription": {
                  "text": "Indexed 'for' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports an indexed 'for' loop used on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops are introduced in ECMAScript 6 and iterate over 'iterable' objects.",
                  "markdown": "Reports an indexed [for](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop used on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops are introduced in ECMAScript 6 and iterate over `iterable` objects."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertIndexedForToForOf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInArrayLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in array literal"
                },
                "fullDescription": {
                  "text": "Reports a usage of a trailing comma in an array literal. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Although trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation.",
                  "markdown": "Reports a usage of a trailing comma in an array literal.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSLastCommaInArrayLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionJS",
                "shortDescription": {
                  "text": "Conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit 'if' statements.",
                  "markdown": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit `if` statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertVarToLetConst",
                "shortDescription": {
                  "text": "'var' is used instead of 'let' or 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'var' declaration that is used instead of 'let' or 'const'. Both 'let' and 'const' are block-scoped and behave more strictly. Suggests replacing all 'var' declarations with 'let' or 'const' declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors. Select the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action.",
                  "markdown": "Reports a `var` declaration that is used instead of `let` or `const`.  \nBoth `let` and `const` are block-scoped and behave more strictly.   \n\nSuggests replacing all `var` declarations with `let` or `const` declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.   \nSelect the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertVarToLetConst",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSReferencingMutableVariableFromClosure",
                "shortDescription": {
                  "text": "Referencing mutable variable from closure"
                },
                "fullDescription": {
                  "text": "Reports access to outer mutable variables from functions. Example: 'for (var i = 1; i <= 3; i++) {\n    setTimeout(function() {\n        console.log(i); // bad\n    }, 0);\n  }'",
                  "markdown": "Reports access to outer mutable variables from functions.\n\nExample:\n\n\n      for (var i = 1; i <= 3; i++) {\n        setTimeout(function() {\n            console.log(i); // bad\n        }, 0);\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSReferencingMutableVariableFromClosure",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBooleanExpressionJS",
                "shortDescription": {
                  "text": "Pointless statement or boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a pointless or pointlessly complicated boolean expression or statement. Example: 'let a = !(false && x);\n  let b = false || x;' After the quick fix is applied the result looks like: 'let a = true;\n  let b = x;'",
                  "markdown": "Reports a pointless or pointlessly complicated boolean expression or statement.\n\nExample:\n\n\n      let a = !(false && x);\n      let b = false || x;\n\nAfter the quick fix is applied the result looks like:\n\n\n      let a = true;\n      let b = x;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBooleanExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DynamicallyGeneratedCodeJS",
                "shortDescription": {
                  "text": "Execution of dynamically generated code"
                },
                "fullDescription": {
                  "text": "Reports a call of the 'eval()', 'setTimeout()', or 'setInterval()' function or an allocation of a 'Function' object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk. Ignores the cases when a callback function is provided to these methods statically, without code generation.",
                  "markdown": "Reports a call of the `eval()`, `setTimeout()`, or `setInterval()` function or an allocation of a `Function` object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk.   \n\nIgnores the cases when a callback function is provided to these methods statically, without code generation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DynamicallyGeneratedCodeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Negated conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: '!condition ? 2 : 1'",
                  "markdown": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: `!condition ? 2 : 1`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUrlImportUsage",
                "shortDescription": {
                  "text": "URL import is used"
                },
                "fullDescription": {
                  "text": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation. URLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.",
                  "markdown": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation.   \n\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUrlImportUsage",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnContinueStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement whose labels may be removed without changing the flow of control.",
                  "markdown": "Reports a labeled `continue` statement whose labels may be removed without changing the flow of control."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnContinueStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedEqualityJS",
                "shortDescription": {
                  "text": "Chained equality"
                },
                "fullDescription": {
                  "text": "Reports a chained equality comparison (i.e. 'a==b==c'). Such comparisons are confusing.",
                  "markdown": "Reports a chained equality comparison (i.e. `a==b==c`). Such comparisons are confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedEqualityComparisonsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SillyAssignmentJS",
                "shortDescription": {
                  "text": "Variable is assigned to itself"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'x = x'.",
                  "markdown": "Reports an assignment in the form `x = x`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SillyAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                "shortDescription": {
                  "text": "Possibly incorrect target of indexed property access"
                },
                "fullDescription": {
                  "text": "Reports a potentially invalid indexed property access, for example, 'Array[1]'.",
                  "markdown": "Reports a potentially invalid indexed property access, for example, `Array[1]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAccessibilityCheck",
                "shortDescription": {
                  "text": "Inaccessible @private and @protected members referenced"
                },
                "fullDescription": {
                  "text": "Reports a reference to a JavaScript member that is marked with a '@private' or '@protected' tag but does not comply with visibility rules that these tags imply.",
                  "markdown": "Reports a reference to a JavaScript member that is marked with a `@private` or `@protected` tag but does not comply with visibility rules that these tags imply."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSAccessibilityCheck",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertRequireIntoImport",
                "shortDescription": {
                  "text": "'require()' is used instead of 'import'"
                },
                "fullDescription": {
                  "text": "Reports a 'require()' statement. Suggests converting it to a 'require()' call with an 'import' statement. Enable 'Convert require() inside inner scopes with Fix all action' to convert all 'require()' calls inside the nested functions and statements when using the 'Fix all' action. Please note that converting 'require()' statements inside inner scopes to 'import' statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. 'require()' calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used. Clear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action.",
                  "markdown": "Reports a `require()` statement. Suggests converting it to a `require()` call with an `import` statement.   \n\nEnable 'Convert require() inside inner scopes with Fix all action' to convert all `require()` calls inside the nested functions and statements when using the 'Fix all' action.   \n\nPlease note that converting `require()` statements inside inner scopes to `import` statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. `require()` calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used.   \nClear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertRequireIntoImport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleLoopsJS",
                "shortDescription": {
                  "text": "Function with multiple loops"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple loop statements.",
                  "markdown": "Reports a function with multiple loop statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMultipleLoopsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LabeledStatementJS",
                "shortDescription": {
                  "text": "Labeled statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement.",
                  "markdown": "Reports a labeled statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LabeledStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedCatchParameterJS",
                "shortDescription": {
                  "text": "Unused 'catch' parameter"
                },
                "fullDescription": {
                  "text": "Reports a 'catch' parameter that is not used in the corresponding block. The 'catch' parameters named 'ignore' or 'ignored' are ignored. Use the checkbox below to disable this inspection for 'catch' blocks with comments.",
                  "markdown": "Reports a `catch` parameter that is not used in the corresponding block. The `catch` parameters named `ignore` or `ignored` are ignored.\n\n\nUse the checkbox below to disable this inspection for `catch`\nblocks with comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedCatchParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NpmUsedModulesInstalled",
                "shortDescription": {
                  "text": "Missing module dependency"
                },
                "fullDescription": {
                  "text": "Reports a module from a 'require()' call or an 'import' statement that is not installed or is not listed in package.json dependencies. Suggests installing the module and/or including it into package.json. For 'require()' calls, works only in the files from the scope of Node.js Core JavaScript library.",
                  "markdown": "Reports a module from a `require()` call or an `import` statement that is not installed or is not listed in package.json dependencies.\n\nSuggests installing the module and/or including it into package.json.\n\nFor `require()` calls, works only in the files from the scope of *Node.js Core* JavaScript library."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "NpmUsedModulesInstalled",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithStatementJS",
                "shortDescription": {
                  "text": "'with' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'with' statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables.",
                  "markdown": "Reports a `with` statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WithStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptCheckImport",
                "shortDescription": {
                  "text": "Unresolved imported name"
                },
                "fullDescription": {
                  "text": "Reports an unresolved name or binding in an 'import' declaration in TypeScript code.",
                  "markdown": "Reports an unresolved name or binding in an `import` declaration in TypeScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptCheckImport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConstantReassignment",
                "shortDescription": {
                  "text": "Attempt to assign to const or readonly variable"
                },
                "fullDescription": {
                  "text": "Reports reassigning a value to a constant or a readonly variable.",
                  "markdown": "Reports reassigning a value to a constant or a readonly variable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSConstantReassignment",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MagicNumberJS",
                "shortDescription": {
                  "text": "Magic number"
                },
                "fullDescription": {
                  "text": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored.",
                  "markdown": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MagicNumberJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionNamingConventionJS",
                "shortDescription": {
                  "text": "Function naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression for function names. Use the standard 'java.util.regex' format for regular expressions.",
                  "markdown": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard `java.util.regex` format for regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXSyntaxUsed",
                "shortDescription": {
                  "text": "JSX syntax used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX tag in JavaScript code.",
                  "markdown": "Reports a usage of a JSX tag in JavaScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSXSyntaxUsed",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJoinVariableDeclarationAndAssignment",
                "shortDescription": {
                  "text": "Variable declaration can be merged with the first assignment to the variable"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.",
                  "markdown": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSJoinVariableDeclarationAndAssignment",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRedundantSwitchStatement",
                "shortDescription": {
                  "text": "'switch' statement is redundant and can be replaced"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement with an empty body, or with only one 'case' branch, or with a 'default' branch only.",
                  "markdown": "Reports a `switch` statement with an empty body, or with only one `case` branch, or with a `default` branch only."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSRedundantSwitchStatement",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptLibrary",
                "shortDescription": {
                  "text": "Missing global library"
                },
                "fullDescription": {
                  "text": "Reports a TypeScript library file that is required for a symbol but is not listed under the 'lib' compiler option in 'tsconfig.json'.",
                  "markdown": "Reports a TypeScript library file that is required for a symbol but is not listed under the `lib` compiler option in `tsconfig.json`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptLibrary",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingAugmentationImport",
                "shortDescription": {
                  "text": "Missing augmentation import"
                },
                "fullDescription": {
                  "text": "Reports a usage from augmentation module without an explicit import.",
                  "markdown": "Reports a usage from [augmentation module](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) without an explicit import."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptMissingAugmentationImport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedGlobalSymbols",
                "shortDescription": {
                  "text": "Unused global symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused globally accessible public function, variable, class, or property.",
                  "markdown": "Reports an unused globally accessible public function, variable, class, or property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedGlobalSymbols",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertModuleExportToExport",
                "shortDescription": {
                  "text": "'module.exports' is used instead of 'export'"
                },
                "fullDescription": {
                  "text": "Reports a 'module.export' statement. Suggests replacing it with an 'export' or 'export default' statement. Please note that the quick-fix for converting 'module.export' into 'export' is not available for 'module.export' inside functions or statements because 'export' statements can only be at the top level of a module.",
                  "markdown": "Reports a `module.export` statement. Suggests replacing it with an `export` or `export default` statement.   \n\nPlease note that the quick-fix for converting `module.export` into `export` is not available for `module.export` inside functions or statements because `export` statements can only be at the top level of a module."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertModuleExportToExport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DocumentWriteJS",
                "shortDescription": {
                  "text": "Call to 'document.write()'"
                },
                "fullDescription": {
                  "text": "Reports a method call to 'document.write()' or 'document.writeln()'. Most usages of such calls are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, the 'write()' and 'writeln()' calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs.",
                  "markdown": "Reports a method call to `document.write()` or `document.writeln()`. Most usages of such calls are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, the `write()` and `writeln()` calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DocumentWriteJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousFunctionJS",
                "shortDescription": {
                  "text": "Anonymous function"
                },
                "fullDescription": {
                  "text": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a 'name' property specified in the ECMAScript 6 standard. For example, 'var bar = function() {};' is not reported.",
                  "markdown": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a `name` property specified in the ECMAScript 6 standard. For example, `var bar = function() {};` is not reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AnonymousFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BlockStatementJS",
                "shortDescription": {
                  "text": "Unnecessary block statement"
                },
                "fullDescription": {
                  "text": "Reports a block statement that is not used as the body of 'if', 'for', 'while', 'do', 'with', or 'try' statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for 'let' and 'const' variables, but still free-standing block statements may be confusing and result in subtle bugs when used with 'var' variables.",
                  "markdown": "Reports a block statement that is not used as the body of `if`, `for`, `while`, `do`, `with`, or `try` statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for `let` and `const` variables, but still free-standing block statements may be confusing and result in subtle bugs when used with `var` variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BlockStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectAllocationIgnoredJS",
                "shortDescription": {
                  "text": "Result of object allocation ignored"
                },
                "fullDescription": {
                  "text": "Reports object allocation where the result of the allocated object is ignored, for example, 'new Error();' as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy.",
                  "markdown": "Reports object allocation where the result of the allocated object is ignored, for example, `new Error();` as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ObjectAllocationIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteRecursionJS",
                "shortDescription": {
                  "text": "Infinite recursion"
                },
                "fullDescription": {
                  "text": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally.",
                  "markdown": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteRecursionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTypeOfValues",
                "shortDescription": {
                  "text": "'typeof' comparison with non-standard value"
                },
                "fullDescription": {
                  "text": "Reports a comparison of a 'typeof' expression with a literal string which is not one of the standard types: 'undefined', 'object', 'boolean', 'number', 'string', 'function', or 'symbol'. Such comparisons always return 'false'.",
                  "markdown": "Reports a comparison of a `typeof` expression with a literal string which is not one of the standard types: `undefined`, `object`, `boolean`, `number`, `string`, `function`, or `symbol`. Such comparisons always return `false`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSTypeOfValues",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Nested conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic.",
                  "markdown": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncompatibleMaskJS",
                "shortDescription": {
                  "text": "Incompatible bitwise mask operation"
                },
                "fullDescription": {
                  "text": "Reports a bitwise mask expression which for sure evaluates to 'true' or 'false'. Expressions are of the form '(var & constant1) == constant2' or '(var | constant1) == constant2', where 'constant1' and 'constant2' are incompatible bitmask constants. Example: '// Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask & 0xFF00) == 0x1234) {...}'",
                  "markdown": "Reports a bitwise mask expression which for sure evaluates to `true` or `false`. Expressions are of the form `(var & constant1) == constant2` or `(var | constant1) == constant2`, where `constant1` and `constant2` are incompatible bitmask constants.\n\nExample:\n\n\n    // Incompatible mask: as the last byte in mask is zero,\n    // something like 0x1200 would be possible, but not 0x1234\n    if ((mask & 0xFF00) == 0x1234) {...}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncompatibleBitwiseMaskOperation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PossiblyAsyncFunction",
                "shortDescription": {
                  "text": "'await' in non-async function"
                },
                "fullDescription": {
                  "text": "Reports a usage of 'await' in a function that was possibly intended to be async but is actually missing the 'async' modifier. Although 'await' can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made 'async'.",
                  "markdown": "Reports a usage of `await` in a function that was possibly intended to be async but is actually missing the `async` modifier. Although `await` can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made `async`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6PossiblyAsyncFunction",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TextLabelInSwitchStatementJS",
                "shortDescription": {
                  "text": "Text label in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement inside a 'switch' statement, which often results from a typo. Example: 'switch(x)\n    {\n        case 1:\n        case2:   //typo!\n        case 3:\n            break;\n    }'",
                  "markdown": "Reports a labeled statement inside a `switch` statement, which often results from a typo.\n\nExample:\n\n\n        switch(x)\n        {\n            case 1:\n            case2:   //typo!\n            case 3:\n                break;\n        }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TextLabelInSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyCatchBlockJS",
                "shortDescription": {
                  "text": "Empty 'catch' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'catch' block. This indicates that errors are simply ignored instead of handling them. Any comment in a 'catch' block mutes the inspection.",
                  "markdown": "Reports an empty `catch` block. This indicates that errors are simply ignored instead of handling them.   \n\nAny comment in a `catch` block mutes the inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyCatchBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSHint",
                "shortDescription": {
                  "text": "JSHint"
                },
                "fullDescription": {
                  "text": "Reports a problem detected by the JSHint linter.",
                  "markdown": "Reports a problem detected by the [JSHint](https://jshint.com/) linter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSHint",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSFlagCommentPlacement",
                "shortDescription": {
                  "text": "Misplaced @flow flag"
                },
                "fullDescription": {
                  "text": "Reports a '@flow' flag comment that is not located at the top of a file.",
                  "markdown": "Reports a `@flow` flag comment that is not located at the top of a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FlowJSFlagCommentPlacement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Eslint",
                "shortDescription": {
                  "text": "ESLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the ESLint linter. The highlighting is based on the rule severity specified in the ESLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules.",
                  "markdown": "Reports a discrepancy detected by the [ESLint](https://eslint.org) linter.   \n\nThe highlighting is based on the rule severity specified in the [ESLint configuration file](https://eslint.org/docs/user-guide/configuring) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Eslint",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicatedDeclaration",
                "shortDescription": {
                  "text": "Duplicate declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple declarations in a scope.",
                  "markdown": "Reports multiple declarations in a scope."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSDuplicatedDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion.TS",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing '==' or '!=' equality operators with type-safe '===' or '!==' operators. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'.",
                  "markdown": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing `==` or `!=` equality operators with type-safe `===` or `!==` operators.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualityComparisonWithCoercionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSOctalInteger",
                "shortDescription": {
                  "text": "Octal integer"
                },
                "fullDescription": {
                  "text": "Reports a deprecated octal integer literal prefixed with '0' instead of '0o'. Such literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error. To force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below.",
                  "markdown": "Reports a deprecated octal integer literal prefixed with `0` instead of `0o`.  \nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.  \nTo force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSOctalInteger",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExceptionCaughtLocallyJS",
                "shortDescription": {
                  "text": "Exception used for local control-flow"
                },
                "fullDescription": {
                  "text": "Reports a 'throw' statement whose exceptions are always caught by the containing 'try' statement. Using 'throw' statements as a 'goto' to change the local flow of control is confusing.",
                  "markdown": "Reports a `throw` statement whose exceptions are always caught by the containing `try` statement. Using `throw` statements as a `goto` to change the local flow of control is confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExceptionCaughtLocallyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'throw' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports s 'throw' statement inside a 'finally' block. Such 'throw' statements may mask exceptions thrown, and complicate debugging.",
                  "markdown": "Reports s `throw` statement inside a `finally` block. Such `throw` statements may mask exceptions thrown, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowInsideFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateGenericTypes",
                "shortDescription": {
                  "text": "Incorrect generic type argument"
                },
                "fullDescription": {
                  "text": "Reports an invalid type argument in a function, interface, or class declaration.",
                  "markdown": "Reports an invalid type argument in a function, interface, or class declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptValidateGenericTypes",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclomaticComplexityJS",
                "shortDescription": {
                  "text": "Overly complex function"
                },
                "fullDescription": {
                  "text": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test. Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function.",
                  "markdown": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test.\n\n\nUse the field provided below to specify the maximum acceptable cyclomatic complexity for a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMismatchedCollectionQueryUpdate",
                "shortDescription": {
                  "text": "Mismatched query and update of collection"
                },
                "fullDescription": {
                  "text": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error. Query methods are automatically detected, based on whether they return something, or a callback is passed to them. Use the table below to specify which methods are update methods.",
                  "markdown": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error.\n\n\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSMismatchedCollectionQueryUpdate",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageJsonMismatchedDependency",
                "shortDescription": {
                  "text": "Mismatched dependencies in package.json"
                },
                "fullDescription": {
                  "text": "Reports a dependency from package.json that is not installed or doesn't match the specified version range.",
                  "markdown": "Reports a dependency from package.json that is not installed or doesn't match the specified [version range](https://docs.npmjs.com/about-semantic-versioning)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageJsonMismatchedDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' from closure"
                },
                "fullDescription": {
                  "text": "Reports a 'this' in closure that is used for referencing properties of outer context. Example: 'function Outer() {\n  this.outerProp = 1;\n  function inner() {\n    // bad, because 'outerProp' of Outer\n    // won't be updated here\n    // on calling 'new Outer()' as may be expected\n    this.outerProp = 2;\n  }\n  inner();\n}'",
                  "markdown": "Reports a `this` in closure that is used for referencing properties of outer context.\n\nExample:\n\n\n    function Outer() {\n      this.outerProp = 1;\n      function inner() {\n        // bad, because 'outerProp' of Outer\n        // won't be updated here\n        // on calling 'new Outer()' as may be expected\n        this.outerProp = 2;\n      }\n      inner();\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidUsageOfThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchDefault",
                "shortDescription": {
                  "text": "'switch' statement has no 'default' branch"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement without a 'default' clause when some possible values are not enumerated.",
                  "markdown": "Reports a `switch` statement without a `default` clause when some possible values are not enumerated."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMissingSwitchDefault",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXNamespaceValidation",
                "shortDescription": {
                  "text": "Missing JSX namespace"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation.",
                  "markdown": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSXNamespaceValidation",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedLibraryURL",
                "shortDescription": {
                  "text": "Missed locally stored library for HTTP link"
                },
                "fullDescription": {
                  "text": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation.",
                  "markdown": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedLibraryURL",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PreferShortImport",
                "shortDescription": {
                  "text": "Import can be shortened"
                },
                "fullDescription": {
                  "text": "Reports an ES6 import whose 'from' part can be shortened. Suggests importing the parent directory.",
                  "markdown": "Reports an ES6 import whose `from` part can be shortened. Suggests importing the parent directory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6PreferShortImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBitwiseExpressionJS",
                "shortDescription": {
                  "text": "Bitwise expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports an expression that includes 'and' with zero, 'or' by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings.",
                  "markdown": "Reports an expression that includes `and` with zero, `or` by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBitwiseExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteLoopJS",
                "shortDescription": {
                  "text": "Infinite loop statement"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement which can only exit by throwing an exception. Such statements often indicate coding errors.",
                  "markdown": "Reports a `for`, `while`, or `do` statement which can only exit by throwing an exception. Such statements often indicate coding errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteLoopJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSStringConcatenationToES6Template",
                "shortDescription": {
                  "text": "String concatenation is used instead of template literal"
                },
                "fullDescription": {
                  "text": "Reports a string concatenation. Suggests replacing it with a template literal Example '\"result: \" + a + \".\"' After applying the quick-fix the code looks as follows: '`result: ${a}.`'",
                  "markdown": "Reports a string concatenation. Suggests replacing it with a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nExample\n\n     \"result: \" + a + \".\" \n\nAfter applying the quick-fix the code looks as follows:\n\n     `result: ${a}.` \n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSStringConcatenationToES6Template",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSArrowFunctionBracesCanBeRemoved",
                "shortDescription": {
                  "text": "Redundant braces around arrow function body"
                },
                "fullDescription": {
                  "text": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces. 'let incrementer = (x) => {return x + 1};' After the quick-fix is applied, the code fragment looks as follows: 'let incrementer = (x) => x + 1;'",
                  "markdown": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces.\n\n\n        let incrementer = (x) => {return x + 1};\n\nAfter the quick-fix is applied, the code fragment looks as follows:\n\n\n        let incrementer = (x) => x + 1;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSArrowFunctionBracesCanBeRemoved",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAssignmentWithOperatorAssignmentJS",
                "shortDescription": {
                  "text": "Assignment could be replaced with operator assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer. Example: 'x = x + 3;'\n  'x = x / 3;'\n After the quick fix is applied the result looks like:   'x += 3;'\n  'x /= 3;'",
                  "markdown": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\n\nExample:\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied the result looks like:\n\n      x += 3;\n      x /= 3;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentReplaceableWithOperatorAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFileReferences",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.",
                  "markdown": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSFileReferences",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithInconsistentReturnsJS",
                "shortDescription": {
                  "text": "Function with inconsistent returns"
                },
                "fullDescription": {
                  "text": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error. Example: 'function foo() {\n  if (true)\n    return 3;\n  return;\n}'",
                  "markdown": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error.\n\nExample:\n\n\n    function foo() {\n      if (true)\n        return 3;\n      return;\n    }\n\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithInconsistentReturnsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ClassMemberInitializationOrder",
                "shortDescription": {
                  "text": "Use of possibly unassigned property in a static initializer"
                },
                "fullDescription": {
                  "text": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet. Initialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.",
                  "markdown": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.   \n\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6ClassMemberInitializationOrder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyTryBlockJS",
                "shortDescription": {
                  "text": "Empty 'try' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'try' block, which usually indicates an error.",
                  "markdown": "Reports an empty `try` block, which usually indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyTryBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReservedWordUsedAsNameJS",
                "shortDescription": {
                  "text": "Reserved word used as name"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords.",
                  "markdown": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReservedWordAsName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClassNamingConvention",
                "shortDescription": {
                  "text": "Class naming convention"
                },
                "fullDescription": {
                  "text": "Reports a class or a function that is annotated with a JSDoc '@constructor' or '@class' tag whose names are too short, too long, or do not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for classes names. Use the standard 'java.util.regex' format for regular expressions.",
                  "markdown": "Reports a class or a function that is annotated with a JSDoc `@constructor` or `@class` tag whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for classes names. Use the standard `java.util.regex` format for regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSClassNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionJS",
                "shortDescription": {
                  "text": "Nested function"
                },
                "fullDescription": {
                  "text": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing. Use the checkbox below to ignore anonymous nested functions.",
                  "markdown": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing.\n\n\nUse the checkbox below to ignore anonymous nested functions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XHTMLIncompatabilitiesJS",
                "shortDescription": {
                  "text": "Incompatible XHTML usages"
                },
                "fullDescription": {
                  "text": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include document.body, document.images, document.applets, document.links, document.forms, and document.anchors.",
                  "markdown": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include **document.body** , **document.images** , **document.applets** , **document.links** , **document.forms** , and **document.anchors**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XHTMLIncompatabilitiesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncrementDecrementResultUsedJS",
                "shortDescription": {
                  "text": "Result of increment or decrement used"
                },
                "fullDescription": {
                  "text": "Reports an increment ('++') or decrement ('--') expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: 'var a = b++'",
                  "markdown": "Reports an increment (`++`) or decrement (`--`) expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: `var a = b++`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncrementDecrementResultUsedJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousTypeOfGuard",
                "shortDescription": {
                  "text": "Unsound type guard check"
                },
                "fullDescription": {
                  "text": "Reports a 'typeof' or 'instanceof' unsound type guard check. The 'typeof x' type guard can be unsound in one of the following two cases: 'typeof x' never corresponds to the specified value (for example, 'typeof x === 'number'' when 'x' is of the type 'string | boolean') 'typeof x' always corresponds to the specified value (for example, 'typeof x === 'string'' when 'x' is of the type 'string') The 'x instanceof A' type guard can be unsound in one of the following two cases: The type of 'x' is not related to 'A' The type of 'x' is 'A' or a subtype of 'A'",
                  "markdown": "Reports a `typeof` or `instanceof` unsound type guard check. The `typeof x` type guard can be unsound in one of the following two cases:\n\n* `typeof x` never corresponds to the specified value (for example, `typeof x === 'number'` when `x` is of the type 'string \\| boolean')\n* `typeof x` always corresponds to the specified value (for example, `typeof x === 'string'` when `x` is of the type 'string')\n\nThe `x instanceof A` type guard can be unsound in one of the following two cases:\n\n* The type of `x` is not related to `A`\n* The type of `x` is `A` or a subtype of `A`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousTypeOfGuard",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptJSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name. The template for a new component can be modified in Editor | File and Code Templates.",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptJSXUnresolvedComponent",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptFieldCanBeMadeReadonly",
                "shortDescription": {
                  "text": "Field can be readonly"
                },
                "fullDescription": {
                  "text": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor).",
                  "markdown": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptFieldCanBeMadeReadonly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6DestructuringVariablesMerge",
                "shortDescription": {
                  "text": "Destructuring properties with the same key"
                },
                "fullDescription": {
                  "text": "Reports multiple destructuring properties with identical keys. Suggests merging the properties.",
                  "markdown": "Reports multiple destructuring properties with identical keys. Suggests merging the properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6DestructuringVariablesMerge",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopStatementThatDoesntLoopJS",
                "shortDescription": {
                  "text": "Loop statement that doesn't loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error.",
                  "markdown": "Reports a `for`, `while`, or `do` statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoopStatementThatDoesntLoopJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedIfStatementJS",
                "shortDescription": {
                  "text": "Negated 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports if statements which have an else branch and a negated condition. Flipping the order of the if and else branches will usually increase the clarity of such statements.",
                  "markdown": "Reports **if** statements which have an **else** branch and a negated condition. Flipping the order of the **if** and **else** branches will usually increase the clarity of such statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedIfStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonASCIINames",
                "shortDescription": {
                  "text": "Identifiers with non-ASCII symbols"
                },
                "fullDescription": {
                  "text": "Reports a non-ASCII symbol in a name. If the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols. Otherwise reports all names that contain both ASCII and non-ASCII symbols.",
                  "markdown": "Reports a non-ASCII symbol in a name.  \n\nIf the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.  \nOtherwise reports all names that contain both ASCII and non-ASCII symbols."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSNonASCIINames",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptRedundantGenericType",
                "shortDescription": {
                  "text": "Redundant type arguments"
                },
                "fullDescription": {
                  "text": "Reports a type argument that is equal to the default one and can be removed. Example: 'type Foo<T=number> = T;\nlet z: Foo<number>;'",
                  "markdown": "Reports a type argument that is equal to the default one and can be removed.\n\n\nExample:\n\n\n    type Foo<T=number> = T;\n    let z: Foo<number>;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptRedundantGenericType",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUMDGlobal",
                "shortDescription": {
                  "text": "Referenced UMD global variable"
                },
                "fullDescription": {
                  "text": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly.",
                  "markdown": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptUMDGlobal",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryReturnJS",
                "shortDescription": {
                  "text": "Unnecessary 'return' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'return' statement, that is, a 'return' statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed.",
                  "markdown": "Reports an unnecessary `return` statement, that is, a `return` statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryReturnStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "Conditional expression with identical branches"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression with identical 'then' and 'else' branches.",
                  "markdown": "Reports a ternary conditional expression with identical `then` and `else` branches."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionWithIdenticalBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIncompatibleTypesComparison",
                "shortDescription": {
                  "text": "Comparison of expressions having incompatible types"
                },
                "fullDescription": {
                  "text": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values.",
                  "markdown": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSIncompatibleTypesComparison",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAnnotator",
                "shortDescription": {
                  "text": "ECMAScript specification is not followed"
                },
                "fullDescription": {
                  "text": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters. Generally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.",
                  "markdown": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.   \nGenerally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSAnnotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnfilteredForInLoop",
                "shortDescription": {
                  "text": "Unfiltered for..in loop"
                },
                "fullDescription": {
                  "text": "Reports unfiltered 'for-in' loops. The use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when 'Object''s prototype may be incorrectly modified. For example, the following code will print 42 and myMethod: 'Object.prototype.myMethod = function myMethod() {};\nlet a = { foo: 42 };\nfor (let i in a) {\n  console.log(a[i]);\n}' Suggests replacing the whole loop with a 'Object.keys()' method or adding a 'hasOwnProperty()' check. After applying the quick-fix the code looks as follows: 'for (let i in a) {\n  if (a.hasOwnProperty(i)) {\n    console.log(a[i]);\n  }\n}'",
                  "markdown": "Reports unfiltered `for-in` loops.   \n\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when `Object`'s prototype may be incorrectly modified. For example, the following code will print **42** and **myMethod** :   \n\n\n    Object.prototype.myMethod = function myMethod() {};\n    let a = { foo: 42 };\n    for (let i in a) {\n      console.log(a[i]);\n    }\n\nSuggests replacing the whole loop with a `Object.keys()` method or adding a `hasOwnProperty()` check. After applying the quick-fix the code looks as follows:\n\n\n    for (let i in a) {\n      if (a.hasOwnProperty(i)) {\n        console.log(a[i]);\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnfilteredForInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInObjectLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in object literal"
                },
                "fullDescription": {
                  "text": "Reports usages of a trailing comma in object literals. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Trailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation.",
                  "markdown": "Reports usages of a trailing comma in object literals.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSLastCommaInObjectLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFunctionExpressionToArrowFunction",
                "shortDescription": {
                  "text": "Function expression is used instead of arrow function"
                },
                "fullDescription": {
                  "text": "Reports a function expression. Suggests converting it to an arrow function. Example: 'arr.map(function(el) {return el + 1})' After applying the quick-fix the code looks as follows: 'arr.map(el => el + 1)'",
                  "markdown": "Reports a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) expression. Suggests converting it to an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nExample:\n\n    arr.map(function(el) {return el + 1})\n\nAfter applying the quick-fix the code looks as follows:\n\n    arr.map(el => el + 1)\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSFunctionExpressionToArrowFunction",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6TopLevelAwaitExpression",
                "shortDescription": {
                  "text": "Top-level 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a usage of a top-level 'await' expression. While the new 'top-level async' proposal is on its way, using 'await' outside async functions is not allowed.",
                  "markdown": "Reports a usage of a top-level `await` expression. While the new 'top-level async' proposal is on its way, using `await` outside async functions is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ES6TopLevelAwaitExpression",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6MissingAwait",
                "shortDescription": {
                  "text": "Missing await for an async function call"
                },
                "fullDescription": {
                  "text": "Reports an 'async' function call without an expected 'await' prefix inside an 'async' function. Such call returns a 'Promise' and control flow is continued immediately. Example: 'async function bar() { /* ... */ }\nasync function foo() {\n    bar(); // bad\n}' After the quick-fix is applied, the 'await' prefix is added: 'async function bar() { /* ... */ }\nasync function foo() {\n    await bar(); // good\n}' When the 'Report for promises in return statements' checkbox is selected, also suggests adding 'await' in return statements. While this is generally not necessary, it gives two main benefits. You won't forget to add 'await' when surrounding your code with 'try-catch'. An explicit 'await' helps V8 runtime to provide async stack traces.",
                  "markdown": "Reports an `async` function call without an expected `await` prefix inside an `async` function. Such call returns a `Promise` and control flow is continued immediately.\n\nExample:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        bar(); // bad\n    }\n\n\nAfter the quick-fix is applied, the `await` prefix is added:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        await bar(); // good\n    }\n\nWhen the 'Report for promises in return statements' checkbox is selected, also suggests adding `await` in return statements.  \nWhile this is generally not necessary, it gives two main benefits.  \n\n* You won't forget to add `await` when surrounding your code with `try-catch`.\n* An explicit `await` helps V8 runtime to provide [async stack traces](https://bit.ly/v8-zero-cost-async-stack-traces)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6MissingAwait",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TailRecursionJS",
                "shortDescription": {
                  "text": "Tail recursion"
                },
                "fullDescription": {
                  "text": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments.",
                  "markdown": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TailRecursionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertToForOf",
                "shortDescription": {
                  "text": "'for..in' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports a usage of a 'for..in' loop on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops, which are introduced in ECMAScript 6, iterate over 'iterable' objects. For arrays, this structure is preferable to 'for..in', because it works only with array values but not with array object's properties.",
                  "markdown": "Reports a usage of a [for..in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops, which are introduced in ECMAScript 6, iterate over `iterable` objects. For arrays, this structure is preferable to `for..in`, because it works only with array values but not with array object's properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertToForOf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSCoverage",
                "shortDescription": {
                  "text": "Code is not covered by Flow"
                },
                "fullDescription": {
                  "text": "Reports JavaScript code fragments that are not covered by the Flow type checker. To use this inspection, configure the Flow executable in Settings | Languages & Frameworks | JavaScript.",
                  "markdown": "Reports JavaScript code fragments that are not covered by the Flow type checker. To use this inspection, configure the Flow executable in [Settings \\| Languages \\& Frameworks \\| JavaScript](settings://Settings.JavaScript)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "FlowJSCoverage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterNamingConventionJS",
                "shortDescription": {
                  "text": "Function parameter naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions.",
                  "markdown": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length and regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ParameterNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndefinedPropertyAssignment",
                "shortDescription": {
                  "text": "Undefined property assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a property that is not defined in the type of a variable. Example: '/**\n * @type {{ property1: string, property2: number }}\n */\nlet myVariable = create();\n\nmyVariable.newProperty = 3; // bad'",
                  "markdown": "Reports an assignment to a property that is not defined in the type of a variable.\n\nExample:\n\n\n    /**\n     * @type {{ property1: string, property2: number }}\n     */\n    let myVariable = create();\n\n    myVariable.newProperty = 3; // bad\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUndefinedPropertyAssignment",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StandardJS",
                "shortDescription": {
                  "text": "Standard code style"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the JavaScript Standard Style linter. The highlighting severity in the editor is based on the severity level the linter reports.",
                  "markdown": "Reports a discrepancy detected by the [JavaScript Standard Style](https://standardjs.com/) linter.   \n\nThe highlighting severity in the editor is based on the severity level the linter reports."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "StandardJS",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParametersPerFunctionJS",
                "shortDescription": {
                  "text": "Function with too many parameters"
                },
                "fullDescription": {
                  "text": "Reports a function with too many parameters. Such functions often indicate problems with design. Use the field below to specify the maximum acceptable number of parameters for a function.",
                  "markdown": "Reports a function with too many parameters. Such functions often indicate problems with design.\n\n\nUse the field below to specify the maximum acceptable number of parameters for a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThisExpressionReferencesGlobalObjectJS",
                "shortDescription": {
                  "text": "'this' expression which references the global object"
                },
                "fullDescription": {
                  "text": "Reports a 'this' expression outside an object literal or a constructor body. Such 'this' expressions reference the top-level \"global\" JavaScript object, but are mostly useless.",
                  "markdown": "Reports a `this` expression outside an object literal or a constructor body. Such `this` expressions reference the top-level \"global\" JavaScript object, but are mostly useless."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThisExpressionReferencesGlobalObjectJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedAssignmentJS",
                "shortDescription": {
                  "text": "Nested assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression nested inside another expression, for example, 'a = b = 1'. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.",
                  "markdown": "Reports an assignment expression nested inside another expression, for example, `a = b = 1`. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultNotLastCaseInSwitchJS",
                "shortDescription": {
                  "text": "'default' not last case in 'switch'"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where the 'default' case comes before another case instead of being the very last case, which may cause confusion.",
                  "markdown": "Reports a `switch` statement where the `default` case comes before another case instead of being the very last case, which may cause confusion."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DefaultNotLastCaseInSwitchJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingPlusesOrMinusesJS",
                "shortDescription": {
                  "text": "Confusing sequence of '+' or '-'"
                },
                "fullDescription": {
                  "text": "Reports a suspicious combination of '+' or '-' characters in JavaScript code (for example, 'a+++b'. Such sequences are confusing, and their semantics may change through changes in the whitespace.",
                  "markdown": "Reports a suspicious combination of `+` or `-` characters in JavaScript code (for example, `a+++b`. Such sequences are confusing, and their semantics may change through changes in the whitespace."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingPlusesOrMinusesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeprecatedSymbols",
                "shortDescription": {
                  "text": "Deprecated symbol used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a deprecated function variable.",
                  "markdown": "Reports a usage of a deprecated function variable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSDeprecatedSymbols",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableNamingConventionJS",
                "shortDescription": {
                  "text": "Local variable naming convention"
                },
                "fullDescription": {
                  "text": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions.",
                  "markdown": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LocalVariableNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyFinallyBlockJS",
                "shortDescription": {
                  "text": "Empty 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'finally' block, which usually indicates an error.",
                  "markdown": "Reports an empty `finally` block, which usually indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCommentMatchesSignature",
                "shortDescription": {
                  "text": "Mismatched JSDoc and function signature"
                },
                "fullDescription": {
                  "text": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment. Example: '/**\n * @param height Height in pixels\n */\nfunction sq(height, width) {} // width is not documented' After the quick-fix is applied: '/**\n * @param height Height in pixels\n * @param width\n */\nfunction sq(height, width) {}'",
                  "markdown": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment.\n\n**Example:**\n\n\n    /**\n     * @param height Height in pixels\n     */\n    function sq(height, width) {} // width is not documented\n\nAfter the quick-fix is applied:\n\n\n    /**\n     * @param height Height in pixels\n     * @param width\n     */\n    function sq(height, width) {}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSCommentMatchesSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UpdateDependencyToLatestVersion",
                "shortDescription": {
                  "text": "Update package.json dependencies to latest versions"
                },
                "fullDescription": {
                  "text": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.",
                  "markdown": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UpdateDependencyToLatestVersion",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptConfig",
                "shortDescription": {
                  "text": "Inconsistent tsconfig.json properties"
                },
                "fullDescription": {
                  "text": "Reports inconsistency of a 'paths', 'checkJs', or 'extends' property in a tsconfig.json file. The 'checkJs' property requires 'allowJs'. The 'extends' property should be a valid file reference.",
                  "markdown": "Reports inconsistency of a `paths`, `checkJs`, or `extends` property in a tsconfig.json file.   \nThe `checkJs` property requires `allowJs`.   \nThe `extends` property should be a valid file reference."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousNameCombination",
                "shortDescription": {
                  "text": "Suspicious variable/parameter name combination"
                },
                "fullDescription": {
                  "text": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it. Example: 'var x = 0;\n  var y = x;' or 'var x = 0, y = 0;\n  var rc = new Rectangle(y, x, 20, 20);' Here the inspection guesses that 'x' and 'y' are mixed up. Specify the names that should not be used together. An error is reported if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed variable contains words from another group.",
                  "markdown": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample:\n\n\n      var x = 0;\n      var y = x;\n\nor\n\n\n      var x = 0, y = 0;\n      var rc = new Rectangle(y, x, 20, 20);\n\nHere the inspection guesses that `x` and `y` are mixed up.\n\nSpecify the names that should not be used together. An error is reported\nif a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\nvariable contains words from another group."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSuspiciousNameCombination",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedExtXType",
                "shortDescription": {
                  "text": "Unresolved Ext JS xtype"
                },
                "fullDescription": {
                  "text": "Reports an Ext JS 'xtype' reference that doesn't have a corresponding class.",
                  "markdown": "Reports an Ext JS `xtype` reference that doesn't have a corresponding class."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedExtXType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopThatDoesntUseLoopVariableJS",
                "shortDescription": {
                  "text": "'for' loop where update or condition does not use loop variable"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop where the condition or update does not use the 'for' loop variable.",
                  "markdown": "Reports a `for` loop where the condition or update does not use the `for` loop variable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopThatDoesntUseLoopVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                "shortDescription": {
                  "text": "Abstract class constructor can be made protected"
                },
                "fullDescription": {
                  "text": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).",
                  "markdown": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleReturnPointsJS",
                "shortDescription": {
                  "text": "Function with multiple return points"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple return points. Such functions are hard to understand and maintain.",
                  "markdown": "Reports a function with multiple return points. Such functions are hard to understand and maintain."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMultipleReturnPointsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIgnoredPromiseFromCall",
                "shortDescription": {
                  "text": "Result of method call returning a promise is ignored"
                },
                "fullDescription": {
                  "text": "Reports a function call that returns a 'Promise' that is not used later. Such calls are usually unintended and indicate an error.",
                  "markdown": "Reports a function call that returns a `Promise` that is not used later. Such calls are usually unintended and indicate an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSIgnoredPromiseFromCall",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreeNegationsPerFunctionJS",
                "shortDescription": {
                  "text": "Function with more than three negations"
                },
                "fullDescription": {
                  "text": "Reports a function with three or more negation operations ('!' or '!='). Such functions may be unnecessarily confusing.",
                  "markdown": "Reports a function with three or more negation operations (`!` or `!=`). Such functions may be unnecessarily confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMoreThanThreeNegationsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRemoveUnnecessaryParentheses",
                "shortDescription": {
                  "text": "Unnecessary parentheses"
                },
                "fullDescription": {
                  "text": "Reports redundant parentheses. In expressions: 'var x = ((1) + 2) + 3' In arrow function argument lists: 'var incrementer = (x) => x + 1' In TypeScript and Flow type declarations: 'type Card = (Suit & Rank) | (Suit & Number)'",
                  "markdown": "Reports redundant parentheses.\n\nIn expressions:\n\n    var x = ((1) + 2) + 3\n\nIn arrow function argument lists:\n\n    var incrementer = (x) => x + 1\n\nIn TypeScript and Flow type declarations:\n\n    type Card = (Suit & Rank) | (Suit & Number)\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSRemoveUnnecessaryParentheses",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexBooleanExpressionJS",
                "shortDescription": {
                  "text": "Overly complex boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression.",
                  "markdown": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexBooleanExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Overly complex arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression.",
                  "markdown": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexArithmeticExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantNestingInTemplateLiteral",
                "shortDescription": {
                  "text": "Redundant nesting in template literal"
                },
                "fullDescription": {
                  "text": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string. Example: 'let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`' After applying the quick-fix the code looks as follows: 'let a = `Hello, Brave New World!`'",
                  "markdown": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\nExample:\n\n\n    let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    let a = `Hello, Brave New World!`\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6RedundantNestingInTemplateLiteral",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralBreaksHTMLJS",
                "shortDescription": {
                  "text": "String literal which breaks HTML parsing"
                },
                "fullDescription": {
                  "text": "Reports a string literal that contains a '</' sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded.",
                  "markdown": "Reports a string literal that contains a `</` sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringLiteralBreaksHTMLJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestingDepthJS",
                "shortDescription": {
                  "text": "Overly nested function"
                },
                "fullDescription": {
                  "text": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary. Use the field provided below to specify the maximum acceptable nesting depth allowed in a function.",
                  "markdown": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary.\n\n\nUse the field provided below to specify the maximum acceptable nesting depth allowed in a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyNestedFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSuspiciousConstructorParameterAssignment",
                "shortDescription": {
                  "text": "Assigned constructor field parameter"
                },
                "fullDescription": {
                  "text": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned. In this case, the corresponding field won't be assigned, only the local parameter value is modified. 'class Foo {\n  constructor(private p: number) {\n    p = 1; //must be this.p = 1;\n  }\n}'",
                  "markdown": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.  \nIn this case, the corresponding field *won't* be assigned, only the local parameter value is modified.\n\n\n    class Foo {\n      constructor(private p: number) {\n        p = 1; //must be this.p = 1;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptSuspiciousConstructorParameterAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedFunctionCallJS",
                "shortDescription": {
                  "text": "Chained function call"
                },
                "fullDescription": {
                  "text": "Reports a function call whose target is another function call, for example, 'foo().bar()'",
                  "markdown": "Reports a function call whose target is another function call, for example, `foo().bar()`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedFunctionCallJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateConditionJS",
                "shortDescription": {
                  "text": "Duplicate condition in 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports duplicate conditions in different branches of an 'if' statement. Duplicate conditions usually represent programmer oversight. Example: 'if (a) {\n    ...\n  } else if (a) {\n    ...\n  }'",
                  "markdown": "Reports duplicate conditions in different branches of an `if` statement. Duplicate conditions usually represent programmer oversight.\n\nExample:\n\n\n      if (a) {\n        ...\n      } else if (a) {\n        ...\n      }\n\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicateConditionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionCallJS",
                "shortDescription": {
                  "text": "Nested function call"
                },
                "fullDescription": {
                  "text": "Reports a function call that is used as an argument in another function call, for example, 'foo(bar())'",
                  "markdown": "Reports a function call that is used as an argument in another function call, for example, `foo(bar())`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedFunctionCallJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialIfJS",
                "shortDescription": {
                  "text": "Redundant 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement that can be simplified to a single assignment or a 'return' statement. Example: 'if(foo())\n {\n  return true;\n }\n else\n {\n   return false;\n }' After applying the quick-fix the code looks as follows:  'return foo();'",
                  "markdown": "Reports an `if` statement that can be simplified to a single assignment or a `return` statement.\n\nExample:\n\n\n    if(foo())\n     {\n      return true;\n     }\n     else\n     {\n       return false;\n     }\n\nAfter applying the quick-fix the code looks as follows:\n\n     return foo();\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantIfStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing '==' and '!=' with type-safe equality operators '===' and '!=='. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'.",
                  "markdown": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing `==` and `!=` with type-safe equality operators `===` and `!==`.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualityComparisonWithCoercionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommaExpressionJS",
                "shortDescription": {
                  "text": "Comma expression"
                },
                "fullDescription": {
                  "text": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of 'for' loops are ignored.",
                  "markdown": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of `for` loops are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CommaExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnLHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on left side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons.",
                  "markdown": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantOnLefSideOfComparisonJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCheckFunctionSignatures",
                "shortDescription": {
                  "text": "Signature mismatch"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types. TypeScript code is ignored.",
                  "markdown": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSCheckFunctionSignatures",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentResultUsedJS",
                "shortDescription": {
                  "text": "Result of assignment used"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, '=' instead of '=='. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Expressions in parentheses are ignored.",
                  "markdown": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, `=` instead of `==`. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways.\n\nExpressions in parentheses are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentResultUsedJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6BindWithArrowFunction",
                "shortDescription": {
                  "text": "Suspicious usage of 'bind' with arrow function"
                },
                "fullDescription": {
                  "text": "Reports 'bind' used together with an arrow function. Because arrow functions use lexical 'this', a 'bind' call will have no effect on them. See here for details.",
                  "markdown": "Reports `bind` used together with an arrow function.  \nBecause arrow functions use lexical `this`, a `bind` call will have no effect on them.  \nSee [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this) for details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6BindWithArrowFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnRHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on right side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons.",
                  "markdown": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantOnRightSideOfComparisonJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSComparisonWithNaN",
                "shortDescription": {
                  "text": "Comparison with NaN"
                },
                "fullDescription": {
                  "text": "Reports a comparison with NaN. Comparisons like 'expr == NaN' or 'expr === NaN' are always evaluated to 'false'.",
                  "markdown": "Reports a comparison with NaN. Comparisons like `expr == NaN` or `expr === NaN` are always evaluated to `false`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSComparisonWithNaN",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnnecessarySemicolon",
                "shortDescription": {
                  "text": "Unnecessary semicolon"
                },
                "fullDescription": {
                  "text": "Reports an unneeded semicolon.",
                  "markdown": "Reports an unneeded semicolon."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnnecessarySemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelJS",
                "shortDescription": {
                  "text": "Unnecessary label"
                },
                "fullDescription": {
                  "text": "Reports an unused label.",
                  "markdown": "Reports an unused label."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSBitwiseOperatorUsage",
                "shortDescription": {
                  "text": "Bitwise operator usage"
                },
                "fullDescription": {
                  "text": "Reports a suspicious usage of a bitwise AND (\"'&'\") or OR (\"'|'\") operator. Usually it is a typo and the result of applying boolean operations AND (\"'&&'\") and OR (\"'||'\") is expected.",
                  "markdown": "Reports a suspicious usage of a bitwise AND (\"`&`\") or OR (\"`|`\") operator. Usually it is a typo and the result of applying boolean operations AND (\"`&&`\") and OR (\"`||`\") is expected."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSBitwiseOperatorUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved TypeScript reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference in TypeScript code.",
                  "markdown": "Reports an unresolved reference in TypeScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptUnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference in JavaScript code.",
                  "markdown": "Reports an unresolved reference in JavaScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedReference",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonStrictModeUsed",
                "shortDescription": {
                  "text": "Non-strict mode used"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file that is not in the 'strict' mode.",
                  "markdown": "Reports a JavaScript file that is not in the `strict` mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSNonStrictModeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantAwait",
                "shortDescription": {
                  "text": "Redundant 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a redundant usage of 'await', such as 'await await', or awaiting a non-promise result. When the 'Report for promises' option is selected, suggests removing 'await' before promises when applicable (in 'return' statements, and with 'Promise.resolve/reject'). Removing 'await' in such contexts causes two problems. Surrounding your code with 'try-catch' and forgetting to add 'await' will change code semantics while you may fail to notice that. Having an explicit 'await' may prevent the V8 runtime from providing async stack traces.",
                  "markdown": "Reports a redundant usage of `await`, such as `await await`, or awaiting a non-promise result.\n\n\nWhen the 'Report for promises' option is selected, suggests removing `await` before promises when applicable\n(in `return` statements, and with `Promise.resolve/reject`).\n\nRemoving `await` in such contexts causes two problems.\n\n* Surrounding your code with `try-catch` and forgetting to add `await` will change code semantics while you may fail to notice that.\n* Having an explicit `await` may prevent the V8 runtime from providing [async stack traces](http://bit.ly/v8-zero-cost-async-stack-traces)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6RedundantAwait",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedSwitchStatementJS",
                "shortDescription": {
                  "text": "Nested 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement that is nested in another 'switch' statement. Nested 'switch' statements may be very confusing, particularly if indenting is inconsistent.",
                  "markdown": "Reports a `switch` statement that is nested in another `switch` statement. Nested `switch` statements may be very confusing, particularly if indenting is inconsistent."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnterminatedStatementJS",
                "shortDescription": {
                  "text": "Unterminated statement"
                },
                "fullDescription": {
                  "text": "Reports a statement without a semicolon or a newline at the end. Select the 'Terminate statements with semicolons' option in Editor | Code Style | JavaScript or TypeScript - Punctuation to report any statement that doesn't end with a semicolon, even if a newline is used. According to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.",
                  "markdown": "Reports a statement without a semicolon or a newline at the end.\n\nSelect the 'Terminate statements with semicolons' option in *Editor \\| Code Style \\| JavaScript or TypeScript - Punctuation* to report any statement that doesn't end with a semicolon, even if a newline is used.\nAccording to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnterminatedStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with identical branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with identical 'then' and 'else' branches. Such statements are almost certainly an error.",
                  "markdown": "Reports an `if` statement with identical `then` and `else` branches. Such statements are almost certainly an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithIdenticalBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PlatformDetectionJS",
                "shortDescription": {
                  "text": "Inaccurate platform detection"
                },
                "fullDescription": {
                  "text": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform. Patterns detected include: 'document.all' 'document.layers' 'navigator.userAgent' 'navigator.oscpu' 'navigator.appName' 'navigator.appCodeName' 'navigator.platform'",
                  "markdown": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform.\n\nPatterns detected include:\n\n* `document.all`\n* `document.layers`\n* `navigator.userAgent`\n* `navigator.oscpu`\n* `navigator.appName`\n* `navigator.appCodeName`\n* `navigator.platform`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PlatformDetectionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToFunctionParameterJS",
                "shortDescription": {
                  "text": "Assignment to function parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.",
                  "markdown": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToFunctionParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConsecutiveCommasInArrayLiteral",
                "shortDescription": {
                  "text": "Consecutive commas in array literal"
                },
                "fullDescription": {
                  "text": "Reports a consecutive comma in an array literal. The skipped element accepts the 'undefined' value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.",
                  "markdown": "Reports a consecutive comma in an array literal. The skipped element accepts the `undefined` value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSConsecutiveCommasInArrayLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FallThroughInSwitchStatementJS",
                "shortDescription": {
                  "text": "Fallthrough in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing 'break' or 'return'.",
                  "markdown": "Reports a `switch` statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing `break` or `return`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FallThroughInSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallerJS",
                "shortDescription": {
                  "text": "Use of 'caller' property"
                },
                "fullDescription": {
                  "text": "Reports a usage of the 'caller' property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.",
                  "markdown": "Reports a usage of the `caller` property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallerJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptExplicitMemberType",
                "shortDescription": {
                  "text": "Explicit types"
                },
                "fullDescription": {
                  "text": "Reports a type annotation that doesn't match the current code style for explicit types. Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example: 'var pi: number = 3.14' In some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.",
                  "markdown": "Reports a type annotation that doesn't match the current code style for explicit types.\n\n\nType declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\n\n        var pi: number = 3.14\n\nIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptExplicitMemberType",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicateCaseLabel",
                "shortDescription": {
                  "text": "Duplicate 'case' label"
                },
                "fullDescription": {
                  "text": "Reports a duplicated 'case' label on a 'switch' statement, which normally indicates an error.",
                  "markdown": "Reports a duplicated `case` label on a `switch` statement, which normally indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSDuplicateCaseLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnreachableSwitchBranches",
                "shortDescription": {
                  "text": "Unreachable 'case' branch of a 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports an unreachable 'case' branch of a 'switch' statement. Example: '/**\n * @param {('foo' | 'bar')} p\n */\nfunction foo(p) {\n    switch (p) {\n        case 'foo': break;\n        case 'bar': break;\n        case 'baz': break; // unreachable\n    }\n}'",
                  "markdown": "Reports an unreachable `case` branch of a `switch` statement.\n\nExample:\n\n\n    /**\n     * @param {('foo' | 'bar')} p\n     */\n    function foo(p) {\n        switch (p) {\n            case 'foo': break;\n            case 'bar': break;\n            case 'baz': break; // unreachable\n        }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnreachableSwitchBranches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptDuplicateUnionOrIntersectionType",
                "shortDescription": {
                  "text": "Duplicate union or intersection type component"
                },
                "fullDescription": {
                  "text": "Reports a duplicate type inside a union or intersection.",
                  "markdown": "Reports a duplicate type inside a union or intersection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptDuplicateUnionOrIntersectionType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialConditionalJS",
                "shortDescription": {
                  "text": "Redundant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression of the form 'condition ? true : false\ncondition ? false : true' These expressions may be safely converted to 'condition\n!condition'",
                  "markdown": "Reports a conditional expression of the form\n\n\n    condition ? true : false\n    condition ? false : true\n\n\nThese expressions may be safely converted to\n\n\n    condition\n    !condition\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerHTMLJS",
                "shortDescription": {
                  "text": "Use of 'innerHTML' property"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript access to DOM nodes as text using the 'innerHTML' property. Most usages of 'innerHTML' are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, 'innerHTML' will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs.",
                  "markdown": "Reports a JavaScript access to DOM nodes as text using the `innerHTML` property. Most usages of `innerHTML` are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, `innerHTML` will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InnerHTMLJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchBranches",
                "shortDescription": {
                  "text": "'switch' statement has missing branches"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement on a variable of the type 'enum' or 'union' when the statement doesn't cover some value options from the type.",
                  "markdown": "Reports a `switch` statement on a variable of the type `enum` or `union` when the statement doesn't cover some value options from the type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMissingSwitchBranches",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6UnusedImports",
                "shortDescription": {
                  "text": "Unused import"
                },
                "fullDescription": {
                  "text": "Reports a redundant 'import' statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import 'import 'packageName'' instead of the regular one.",
                  "markdown": "Reports a redundant `import` statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import `import 'packageName'` instead of the regular one."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6UnusedImports",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSwitchVariableDeclarationIssue",
                "shortDescription": {
                  "text": "Variable is declared and being used in different 'case' clauses"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared in one 'case' clause of a 'switch' statement but is used in another 'case' clause of the same statement. For block-scoped variables, this results in throwing a 'ReferenceError'. For 'var' variables, it indicates a potential error. Disable the inspection for 'var' variables if this pattern is used intentionally.",
                  "markdown": "Reports a variable that is declared in one `case` clause of a `switch` statement but is used in another `case` clause of the same statement. For block-scoped variables, this results in throwing a `ReferenceError`. For `var` variables, it indicates a potential error.\n\nDisable the inspection for `var` variables if this pattern is used intentionally."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSwitchVariableDeclarationIssue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VoidExpressionJS",
                "shortDescription": {
                  "text": "'void' expression"
                },
                "fullDescription": {
                  "text": "Reports a 'void' expression.",
                  "markdown": "Reports a `void` expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VoidExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJQueryEfficiency",
                "shortDescription": {
                  "text": "JQuery selector can be optimized"
                },
                "fullDescription": {
                  "text": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).",
                  "markdown": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSJQueryEfficiency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAssignmentUsedAsCondition",
                "shortDescription": {
                  "text": "Assignment used as condition"
                },
                "fullDescription": {
                  "text": "Reports an assignment that is used as the condition of an 'if', 'while', 'for', or 'do' statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, '=' instead of '==').",
                  "markdown": "Reports an assignment that is used as the condition of an `if`, `while`, `for`, or `do` statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, `=` instead of `==`)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSAssignmentUsedAsCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableCodeJS",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code that can never be executed, which almost certainly indicates an error",
                  "markdown": "Reports code that can never be executed, which almost certainly indicates an error"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnreachableCodeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopReplaceableByWhileJS",
                "shortDescription": {
                  "text": "'for' loop may be replaced by 'while' loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler 'while' statement. Example: 'for(; exitCondition(); ) {\n    process();\n  }' After the quick-fix is applied the result looks like: 'while(exitCondition()) {\n    process();\n  }' Use the checkbox below if you wish this inspection to ignore for loops with trivial or non-existent conditions.",
                  "markdown": "Reports a `for` loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler `while` statement.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nUse the checkbox below if you wish this inspection to ignore **for** loops with trivial or non-existent conditions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopReplaceableByWhile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousEqPlus",
                "shortDescription": {
                  "text": "Suspicious '=+' assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'a =+ b'. Suggests replacing with 'a += b'.",
                  "markdown": "Reports an assignment in the form `a =+ b`. Suggests replacing with `a += b`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSuspiciousEqPlus",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatementBodyJS",
                "shortDescription": {
                  "text": "Statement with empty body"
                },
                "fullDescription": {
                  "text": "Reports an 'if', 'while', 'for', or 'with' statement with an empty body. Such statements often result from typos, and may cause confusion. Use the checkbox below to specify whether the statements with empty block statements as bodies should be reported.",
                  "markdown": "Reports an `if`, `while`, `for`, or `with` statement with an empty body. Such statements often result from typos, and may cause confusion.\n\n\nUse the checkbox below to specify whether the statements with empty block statements as bodies\nshould be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StatementWithEmptyBodyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSVoidFunctionReturnValueUsed",
                "shortDescription": {
                  "text": "Void function return value used"
                },
                "fullDescription": {
                  "text": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an 'undefined' value and such assignment may indicate an error. Example: 'let a = console.log('foo');' The following usages are ignored: Inside a return statement In some binary operations For overridden non-void functions",
                  "markdown": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an `undefined` value and such assignment may indicate an error.\n\nExample:\n\n\n    let a = console.log('foo');\n\nThe following usages are ignored:\n\n* Inside a return statement\n* In some binary operations\n* For overridden non-void functions"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSVoidFunctionReturnValueUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'return' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'return' statement inside a 'finally' block. Such 'return' statements may mask exceptions thrown, and complicate debugging.",
                  "markdown": "Reports a `return` statement inside a `finally` block. Such `return` statements may mask exceptions thrown, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReturnInsideFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedLocalSymbols",
                "shortDescription": {
                  "text": "Unused local symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration.",
                  "markdown": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedLocalSymbols",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports incorrect type of: a parameter in a function call a return value an assigned expression TypeScript code is ignored.",
                  "markdown": "Reports incorrect type of:\n\n* a parameter in a function call\n* a return value\n* an assigned expression\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSValidateTypes",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "242.3350",
            "rules": [
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigCharClassRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigRootDeclarationUniqueness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigNumerousWildcards",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigPartialOverride",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigEmptySection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigShadowingOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigListAcceptability",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigKeyCorrectness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}' in contrast to a list containing multiple patterns, for example '{foo,bar}'. In this case braces are handled as a part of the name. For example, the pattern '*.{a}' will match the file 'my.{a}' but not 'my.a'.",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigPatternEnumerationRedundancy",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEncoding",
                "shortDescription": {
                  "text": "File encoding doesn't match EditorConfig charset"
                },
                "fullDescription": {
                  "text": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file.",
                  "markdown": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigRootDeclarationCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigReferenceCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigPairAcceptability",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigPatternRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigNoMatchingFiles",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigDeprecatedDescriptor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigWildcardRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigHeaderUniqueness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigShadowedOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigEmptyHeader",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigValueCorrectness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigVerifyByCore",
                "shortDescription": {
                  "text": "Invalid .editorconfig file"
                },
                "fullDescription": {
                  "text": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied.",
                  "markdown": "Verifies the whole file using the backing EditorConfig core library and reports any failures. Any such failure would prevent EditorConfig properties from being correctly applied."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigVerifyByCore",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigValueUniqueness",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigMissingRequiredDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigCharClassLetterRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "EditorConfigSpaceInHeader",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigOptionRedundancy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EditorConfigUnusedDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "EditorConfigUnexpectedComma",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.go",
            "version": "242.3350",
            "rules": [
              {
                "id": "GoVetCopyLock",
                "shortDescription": {
                  "text": "Locks mistakenly passed by value"
                },
                "fullDescription": {
                  "text": "Reports locks that are mistakenly passed by values. Accidentally copying a value containing a lock may cause both copies to work incorrectly. Generally, such values should be referred to through a pointer. A lock here means a type implementing 'sync.Locker', such as 'sync.Mutex' or 'sync.WaitGroup'. Example: 'type SafeInt struct {\n  m sync.Mutex\n  i int\n}\n\nfunc (s SafeInt) Inc() { // mutex is copied\n  s.m.Lock()\n  s.i++\n  s.m.Unlock()\n}' After the Add pointer quick-fix is applied: 'type SafeInt struct {\n  m sync.Mutex\n  i int\n}\n\nfunc (s *SafeInt) Inc() {\n  s.m.Lock()\n  s.i++\n  s.m.Unlock()\n}'",
                  "markdown": "Reports locks that are mistakenly passed by values.\n\nAccidentally copying a value containing a lock may cause both copies to work incorrectly. Generally, such values should be\nreferred to through a pointer. A lock here means a type implementing `sync.Locker`, such as `sync.Mutex`\nor `sync.WaitGroup`.\n\nExample:\n\n    type SafeInt struct {\n      m sync.Mutex\n      i int\n    }\n\n    func (s SafeInt) Inc() { // mutex is copied\n      s.m.Lock()\n      s.i++\n      s.m.Unlock()\n    }\n\nAfter the **Add pointer** quick-fix is applied:\n\n    type SafeInt struct {\n      m sync.Mutex\n      i int\n    }\n\n    func (s *SafeInt) Inc() {\n      s.m.Lock()\n      s.i++\n      s.m.Unlock()\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVetCopyLock",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoVetImpossibleInterfaceToInterfaceAssertion",
                "shortDescription": {
                  "text": "Impossible interface type assertion"
                },
                "fullDescription": {
                  "text": "Reports impossible interface-to-interface type assertions. Checks for type assertions 'v.(T)' and corresponding type-switch cases in which the static type 'V' of 'v' is the interface that cannot possibly implement the target interface 'T'. This occurs when 'V' and 'T' contain methods with the same name but different signatures. Example: 'var v interface {\n  Read()\n}\n_ = v.(io.Reader)' The 'Read' method in 'v' has a different signature than the 'Read' method in 'io.Reader', so this assertion cannot succeed. This inspection only reports if the language version is 1.15 or higher.",
                  "markdown": "Reports impossible interface-to-interface type assertions.\n\nChecks for type assertions `v.(T)` and corresponding type-switch cases\nin which the static type `V` of `v` is the interface that\ncannot possibly implement the target interface `T`. This occurs when\n`V` and `T` contain methods with the same name but\ndifferent signatures.\n\nExample:\n\n    var v interface {\n      Read()\n    }\n    _ = v.(io.Reader)\n\nThe `Read` method in `v` has a different signature than\nthe `Read` method in `io.Reader`, so this assertion\ncannot succeed.\n\nThis inspection only reports if the language version is 1.15 or higher."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVetImpossibleInterfaceToInterfaceAssertion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnusedTypeParameter",
                "shortDescription": {
                  "text": "Unused type parameter"
                },
                "fullDescription": {
                  "text": "Reports unused type parameters. 'func main() {\n printAll(\n  42,\n  \"bird\",\n )\n}\n\nfunc printAll[I int, S string](\n i I,\n s string,\n) {\n fmt.Println(i)\n fmt.Println(s)\n}' The printAll function has two type parameters 'I' and 'S' but uses only the first of them. Therefore, the 'S string' is grayed out.",
                  "markdown": "Reports unused type parameters.\n\n    func main() {\n     printAll(\n      42,\n      \"bird\",\n     )\n    }\n\n    func printAll[I int, S string](\n     i I,\n     s string,\n    ) {\n     fmt.Println(i)\n     fmt.Println(s)\n    }\n\nThe **printAll** function has two type parameters `I` and `S` but uses only the first of them.\nTherefore, the `S string` is grayed out."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnusedTypeParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoShadowedVar",
                "shortDescription": {
                  "text": "Shadowing variable"
                },
                "fullDescription": {
                  "text": "Reports declarations of variables that overlap with the declarations in the outer scope. As the meaning of the variable depends on the scope in that case, it may create confusion and lead to unintended consequences. Example: 'for i := 0; i < len(nums); i++ {\n    for i := 0; i < len(nums); i++ {\n    }\n  }' The 'i' variable in the embedded loop is shadowed. To get rid of shadowing, consider renaming the variable in the embedded loop. 'for i := 0; i < len(nums); i++ {\n    for j := 0; j < len(nums); j++ {\n    }\n  }'",
                  "markdown": "Reports declarations of variables that overlap with the declarations in the outer scope.\n\nAs the meaning of the variable depends on the scope in that case, it may create confusion and lead to unintended consequences.\n\nExample:\n\n    for i := 0; i < len(nums); i++ {\n        for i := 0; i < len(nums); i++ {\n        }\n      }\n\nThe `i` variable in the embedded loop is shadowed. To get rid of shadowing, consider renaming the variable\nin the embedded loop.\n\n    for i := 0; i < len(nums); i++ {\n        for j := 0; j < len(nums); j++ {\n        }\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoShadowedVar",
                    "ideaSeverity": "TEXT ATTRIBUTES",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoVetFailNowInNotTestGoroutine",
                "shortDescription": {
                  "text": "'FailNow' in a non-test goroutine"
                },
                "fullDescription": {
                  "text": "Reports calls to 'testing.T.FailNow' and similar methods located in goroutines in test files. Methods like 'FailNow' call 'runtime.Goexit' and stop the calling goroutine, not the test. Therefore, they must only be called from the goroutine that runs the test or benchmark. For more information about 'FailNow', refer to func (*T) FailNow at go.dev. Example: 'func TestFoo(t *testing.T) {\n  go func() {\n    t.Fatal(\"oops\") //exits goroutine, not TestFoo\n  }()\n}' After the Replace with 'Error' and 'return' quick-fix is applied: 'func TestFoo(t *testing.T) {\n  go func() {\n    t.Error(\"oops\")\n    return\n  }()\n}'",
                  "markdown": "Reports calls to `testing.T.FailNow` and similar methods located in goroutines in test files.\n\nMethods like `FailNow` call `runtime.Goexit` and stop the calling goroutine, not the test.\nTherefore, they must only be called from the goroutine that runs the test or benchmark.\n\nFor more information about `FailNow`, refer to [func (\\*T) FailNow at\ngo.dev](https://pkg.go.dev/testing#T.FailNow).\n\nExample:\n\n    func TestFoo(t *testing.T) {\n      go func() {\n        t.Fatal(\"oops\") //exits goroutine, not TestFoo\n      }()\n    }\n\nAfter the **Replace with 'Error' and 'return'** quick-fix is applied:\n\n    func TestFoo(t *testing.T) {\n      go func() {\n        t.Error(\"oops\")\n        return\n      }()\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVetFailNowInNotTestGoroutine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoRedundantImportAlias",
                "shortDescription": {
                  "text": "Redundant import alias"
                },
                "fullDescription": {
                  "text": "Reports aliases of imported packages that may be omitted. Usually, such aliases equal to the names of the imported packages, so aliases have no effect and one can use package names directly. Example: 'import fmt \"fmt\"' The 'fmt' alias duplicates the package name that is also named '\"fmt\"'. To delete the alias, use the Delete import alias quick-fix. After the quick-fix is applied: 'import \"fmt\"'",
                  "markdown": "Reports aliases of imported packages that may be omitted.\n\nUsually, such aliases equal to the names of the imported packages,\nso aliases have no effect and one can use package names directly.\n\nExample:\n\n    import fmt \"fmt\"\n\nThe `fmt` alias duplicates the package name that is also named `\"fmt\"`. To delete the alias,\nuse the **Delete import alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    import \"fmt\"\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoRedundantImportAlias",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoPreferNilSlice",
                "shortDescription": {
                  "text": "Empty slice declared using a literal"
                },
                "fullDescription": {
                  "text": "Reports slice declarations with empty literal initializers used instead of 'nil'. An empty slice can be represented by 'nil' or an empty slice literal. They are functionally equivalent — their 'len' and 'cap' are both zero — but the nil slice is the preferred style. For more information about empty slices, refer to Declaring Empty Slices at github.com/golang. Example: 's := []string{}' To change the declaration, use the Replace with nil slice declaration (changes semantics) quick-fix. After the quick-fix is applied: 'var s []string'",
                  "markdown": "Reports slice declarations with empty literal initializers used instead of `nil`.\n\nAn empty slice can be represented by `nil` or an empty slice literal. They are functionally equivalent ---\ntheir `len` and `cap` are both zero --- but the nil slice is the preferred style.\nFor more information about empty slices, refer to\n[Declaring Empty Slices at github.com/golang](https://github.com/golang/go/wiki/CodeReviewComments#declaring-empty-slices).\n\nExample:\n\n    s := []string{}\n\nTo change the declaration, use the **Replace with nil slice declaration (changes semantics)** quick-fix.\nAfter the quick-fix is applied:\n\n    var s []string\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoPreferNilSlice",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoDirectComparisonOfErrors",
                "shortDescription": {
                  "text": "Direct comparison of errors"
                },
                "fullDescription": {
                  "text": "Reports direct comparison of errors, for example, using '==', and suggests using 'errors.Is' instead. Since Go 1.13, errors can be wrapped using the 'fmt.Errorf' function with the '%w' verb. Therefore, direct comparison of errors using the equality check fails on wrapped errors. The preferred way of checking for a specific error is to use the errors.Is function from the standard library as this function traverses the chain of the wrapped errors while checking for a specific error. For more information about 'errors.Is', refer to working with Errors in Go 1.13. The quick-fix replaces direct comparison of errors with a call to 'errors.Is'. Example: 'if err == MyError {\n  fmt.Println(\"MyErr\")\n}' After the quick fix is applied: 'if errors.Is(err, MyError) {\n  fmt.Println(\"MyErr\")\n}'",
                  "markdown": "Reports direct comparison of errors, for example, using `==`, and suggests using `errors.Is` instead.\n\nSince Go 1.13, errors can be wrapped using the `fmt.Errorf` function with the `%w` verb. Therefore, direct comparison of\nerrors using the equality check fails on wrapped errors. The preferred way of checking for a specific error\nis to use the [errors.Is](https://pkg.go.dev/errors#Is) function from the standard library as this function traverses the chain of the wrapped errors while checking for a specific error.\n\nFor more information about `errors.Is`, refer to [working with Errors in Go 1.13](https://go.dev/blog/go1.13-errors).\n\nThe quick-fix replaces direct comparison of errors with a call to `errors.Is`.\n\n**Example:**\n\n\n    if err == MyError {\n      fmt.Println(\"MyErr\")\n    }\n\nAfter the quick fix is applied:\n\n\n    if errors.Is(err, MyError) {\n      fmt.Println(\"MyErr\")\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoDirectComparisonOfErrors",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoVetIntToStringConversion",
                "shortDescription": {
                  "text": "Integer to string type conversion"
                },
                "fullDescription": {
                  "text": "Reports conversions of 'string(x)'-alike expressions where 'x' is an integer but not byte or rune. Such conversions are discouraged because they return the UTF-8 representation of the Unicode code point 'x', and not a decimal string representation of 'x' as one might expect. Furthermore, if 'x' denotes an invalid code point, the conversion cannot be statically rejected. For conversions that intend on using the code point, consider replacing them with 'string(rune(x))'. Otherwise, 'strconv.Itoa' and its equivalents return the string representation of the value in the desired base. Example: 'func main() {\n a := 1\n _ = string(a)\n}' After the Convert integer to rune quick-fix is applied: 'func main() {\n a := 1\n _ = string(rune(a))\n}'",
                  "markdown": "Reports conversions of `string(x)`-alike expressions where `x` is an integer but not byte or rune.\n\nSuch conversions are discouraged because they return the UTF-8 representation\nof the Unicode code point `x`, and not a decimal string representation\nof `x` as one might expect. Furthermore, if `x` denotes\nan invalid code point, the conversion cannot be statically rejected.\n\nFor conversions that intend on using the code point, consider replacing them\nwith `string(rune(x))`. Otherwise, `strconv.Itoa`\nand its equivalents return the string representation of the value in the desired\nbase.\n\nExample:\n\n    func main() {\n     a := 1\n     _ = string(a)\n    }\n\nAfter the **Convert integer to rune** quick-fix is applied:\n\n    func main() {\n     a := 1\n     _ = string(rune(a))\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVetIntToStringConversion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoSnakeCaseUsage",
                "shortDescription": {
                  "text": "Usage of Snake_Case"
                },
                "fullDescription": {
                  "text": "Reports usage of snake case instead of camelcase for naming variables, constants and functions. According to MixedCaps at go.dev, camelcase is a convention in Go. Example: 'func get_external_IP() (string, error) {}' The 'get_external_IP' is in snake case but should be in camelcase. You can apply a quick-fix to convert the function name to 'getExternalIp'.",
                  "markdown": "Reports usage of snake case instead of camelcase for naming variables, constants and functions. According to [MixedCaps at go.dev](https://go.dev/doc/effective_go#mixed-caps), camelcase is a convention in Go.\n\nExample:\n\n    func get_external_IP() (string, error) {}\n\nThe `get_external_IP` is in snake case but should be in camelcase. You can apply a quick-fix to convert the function name to\n`getExternalIp`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoSnakeCaseUsage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoRedundantComma",
                "shortDescription": {
                  "text": "Redundant comma"
                },
                "fullDescription": {
                  "text": "Reports commas that may be omitted in the end of argument lists and composite literals. The IDE suggests removing commas that are considered optional. Removing these commas might improve code readability. Example: 's := []int{1, 2,} // the last comma may be omitted'",
                  "markdown": "Reports commas that may be omitted in the end of argument lists and composite literals.\n\nThe IDE suggests removing commas that are considered optional. Removing these commas might improve\ncode readability.\n\nExample:\n\n    s := []int{1, 2,} // the last comma may be omitted\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoRedundantComma",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoRedundantSemicolon",
                "shortDescription": {
                  "text": "Redundant semicolon"
                },
                "fullDescription": {
                  "text": "Reports redundant semicolons. Idiomatic Go programs have semicolons only in places such as 'for' loop clauses, to separate the initializer, condition, and continuation elements. They are also necessary to separate multiple statements on a line. In other cases, you can omit them. For more information about semicolons in Go, refer to Semicolons at go.dev. Example: 'i := 1;'",
                  "markdown": "Reports redundant semicolons. Idiomatic Go programs have semicolons only in places such as `for` loop clauses, to separate the initializer, condition, and continuation elements. They are also necessary to separate multiple statements on a line. In other cases, you can omit them.\n\nFor more information about semicolons in Go, refer to [Semicolons at go.dev](https://go.dev/doc/effective_go#semicolons).\n\nExample:\n\n    i := 1;\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoRedundantSemicolon",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoRedundantSecondIndexInSlices",
                "shortDescription": {
                  "text": "Redundant second index in slices"
                },
                "fullDescription": {
                  "text": "Reports a redundant second index (a high bound) in slice expressions. Usually, the second index is optional. If you remove it, you might improve code readability. Example: 'var a []int\na = a[0:len(a)] // `a[0:len(a)]` is the same as `a[0:]`'\n You can apply the Remove redundant index quick-fix to such cases. After the quick-fix is applied, this code looks as follows: 'var a []int\na = a[0:]'",
                  "markdown": "Reports a redundant second index (a high bound) in slice expressions.\n\nUsually, the second index is optional. If you remove it, you might improve code readability.\n\nExample:\n\n    var a []int\n    a = a[0:len(a)] // `a[0:len(a)]` is the same as `a[0:]`\n\nYou can apply the **Remove redundant index** quick-fix to such cases. After the quick-fix is applied, this\ncode looks as follows:\n\n    var a []int\n    a = a[0:]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoRedundantSecondIndexInSlices",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoImportUsedAsName",
                "shortDescription": {
                  "text": "Imported package name as a name identifier"
                },
                "fullDescription": {
                  "text": "Reports declarations of variables, arguments or functions that overlap with the used import. While legal, such declarations will make using the package exported identifiers impossible after the declaration or create confusion when reading the code. Example: 'import \"fmt\"\nimport _ \"fmt\"\nimport iio \"io\"\n\nfunc _() {\n fmt.Println(\"demo\")\n demo := true\n _, _ = iio.EOF, demo\n}\n\nfunc demo() (int, int) {\n return 1, 2\n}\n\nfunc _() {\n _, _ = iio.EOF, demo\n fmt := \"demo\"\n iio := 1\n _, _ = iio, fmt\n a, _ := demo()\n _ = a\n}' Variable names 'fmt' and 'iio' clash with names of import packages. Not to confuse them later in code, it is better to rename these variables.",
                  "markdown": "Reports declarations of variables, arguments or functions that overlap with the used import.\n\nWhile legal, such declarations will make using the package exported identifiers impossible after the declaration or create\nconfusion when reading the code.\n\nExample:\n\n    import \"fmt\"\n    import _ \"fmt\"\n    import iio \"io\"\n\n    func _() {\n     fmt.Println(\"demo\")\n     demo := true\n     _, _ = iio.EOF, demo\n    }\n\n    func demo() (int, int) {\n     return 1, 2\n    }\n\n    func _() {\n     _, _ = iio.EOF, demo\n     fmt := \"demo\"\n     iio := 1\n     _, _ = iio, fmt\n     a, _ := demo()\n     _ = a\n    }\n\nVariable names `fmt` and `iio` clash with names of import packages. Not to confuse them later in code, it is better\nto rename these variables."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoImportUsedAsName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnitSpecificDurationSuffix",
                "shortDescription": {
                  "text": "Unit-specific suffix for 'time.Duration'"
                },
                "fullDescription": {
                  "text": "Reports unit-specific suffixes in constant and variable names of 'time.Duration' type. The inspection comes from 'go lint'. A list of suffixes that imply a time unit is available in the golang repository at github.com. 'time.Duration' represents a value in nanoseconds, so adding a time unit suffix might make the meaning of the variable confusing, or even indicate a misuse of the 'time.Duration' API. Example: 'var timeoutSeconds = 5 * time.Second'",
                  "markdown": "Reports unit-specific suffixes in constant and variable names of `time.Duration` type.\n\nThe inspection comes from `go lint`. A list of suffixes that imply a time unit is available\nin [the golang repository at\ngithub.com](https://github.com/golang/lint/blob/c5fb716d6688a859aae56d26d3e6070808df29f7/lint.go#L1365-L1373).\n\n`time.Duration` represents a value in nanoseconds, so adding a time unit suffix\nmight make the meaning of the variable confusing, or even indicate a misuse of the `time.Duration` API.\n\nExample:\n\n    var timeoutSeconds = 5 * time.Second\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoUnitSpecificDurationSuffix",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnusedExportedType",
                "shortDescription": {
                  "text": "Unused exported type"
                },
                "fullDescription": {
                  "text": "Reports unused exported types in the 'main' package and in tests. For more information about exported identifiers, refer to Exported identifiers at go.dev. 'type User struct {}\n\nfunc main() {}' The 'User' struct type is declared but never used in the code. This type will be grayed out.",
                  "markdown": "Reports unused exported types in the `main` package and in tests. For more information about exported identifiers, refer to [Exported identifiers at go.dev](https://go.dev/ref/spec#Exported_identifiers).\n\n    type User struct {}\n\n    func main() {}\n\nThe `User` struct type is declared but never used in the code. This type will be grayed out."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnusedExportedType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoDeprecation",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated elements. Example: '// Deprecated: Use io.SeekStart, io.SeekCurrent, and io.SeekEnd.\nconst (\n SEEK_SET int = 0 // seek relative to the origin of the file\n SEEK_CUR int = 1 // seek relative to the current offset\n SEEK_END int = 2 // seek relative to the end\n)' According to Constants at go.dev, 'SEEK_SET', 'SEEK_CUR', and 'SEEK_END' are deprecated.",
                  "markdown": "Reports usages of deprecated elements.\n\nExample:\n\n    // Deprecated: Use io.SeekStart, io.SeekCurrent, and io.SeekEnd.\n    const (\n     SEEK_SET int = 0 // seek relative to the origin of the file\n     SEEK_CUR int = 1 // seek relative to the current offset\n     SEEK_END int = 2 // seek relative to the end\n    )\n\nAccording to [Constants at go.dev](https://pkg.go.dev/os#pkg-constants), `SEEK_SET`, `SEEK_CUR`,\nand `SEEK_END` are deprecated."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoDeprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoNilness",
                "shortDescription": {
                  "text": "Nilness analyzer"
                },
                "fullDescription": {
                  "text": "Reports problems caused by incorrect usage of the 'nil' value. The IDE analyses data flow to determine if variables could have 'nil' or not 'nil' values. Based on this, the IDE reports potential issues in code. Consider the following list of situations that might lead to unintended consequences: Method calls with the 'nil' receiver might lead to 'nil pointer dereference'. The 'nil' slice indexing might cause panics. Comparisons like 'v == nil' might be meaningless if 'v' is known to be always 'nil' or not 'nil'. Variables with corresponding errors are not checked on not to be 'nil'. An error corresponds to a variable when they are defined or assigned together in statements like 'v, err := foo()'.",
                  "markdown": "Reports problems caused by incorrect usage of the `nil` value.\n\nThe IDE analyses data flow to determine if variables could have `nil` or not `nil` values.\nBased on this, the IDE reports potential issues in code. Consider the following list of situations that might lead to unintended\nconsequences:\n\n* Method calls with the `nil` receiver might lead to 'nil pointer dereference'.\n* The `nil` slice indexing might cause panics.\n* Comparisons like `v == nil` might be meaningless if `v` is known to be always `nil` or not `nil`.\n* Variables with corresponding errors are not checked on not to be `nil`. An error corresponds to a variable when they are defined or assigned together in statements like `v, err := foo()`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoNilness",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoVarAndConstTypeMayBeOmitted",
                "shortDescription": {
                  "text": "Type can be omitted"
                },
                "fullDescription": {
                  "text": "Reports types in variable and constant declarations that can be omitted since they can be inferred by the compiler. Such types are redundant, omitting them may improve readability of the code. Example: 'var s string = fmt.Sprintln(\"hi\")' The 'string' type in the variable declaration may be omitted. To remove the type, use the Delete type quick-fix. After the quick-fix is applied: 'var s = fmt.Sprintln(\"hi\")'",
                  "markdown": "Reports types in variable and constant declarations that can be omitted since they can be inferred by the compiler. Such types are redundant, omitting them may improve readability of the code.\n\nExample:\n\n    var s string = fmt.Sprintln(\"hi\")\n\nThe `string` type in the variable declaration may be omitted. To remove the type, use the **Delete type** quick-fix.\nAfter the quick-fix is applied:\n\n    var s = fmt.Sprintln(\"hi\")\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoVarAndConstTypeMayBeOmitted",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoPrintFunctions",
                "shortDescription": {
                  "text": "Incorrect usage of 'fmt.Printf' and 'fmt.Println' functions"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of 'fmt.Printf', 'fmt.Println', and similar formatting and printing functions. In their format strings, formatting functions use formatting verbs, like '%s', '%d', '%v', and others. If formatting verbs are used incorrectly, the result of a formatting function will contain an error. For more information about formatting verbs, refer to Package fmt at go.dev. Example: 'fmt.Printf(\"id: %s\", 42)' The output of this function is 'id: %!s(int=42)'. It might be not what you really want. The following function uses the '%d' formatting verb. The output with the '%d' formatting verb will be 'id: 42'. 'fmt.Printf(\"id: %d\", 42)'",
                  "markdown": "Reports incorrect usages of `fmt.Printf`, `fmt.Println`, and similar formatting and printing functions.\n\nIn their format strings, formatting functions use formatting verbs, like `%s`, `%d`, `%v`, and others.\nIf formatting verbs are used incorrectly, the result of a formatting function will contain an error.\nFor more information about formatting verbs, refer to [Package fmt at go.dev](https://pkg.go.dev/fmt).\n\nExample:\n\n    fmt.Printf(\"id: %s\", 42)\n\nThe output of this function is `id: %!s(int=42)`. It might be not what you really want.\nThe following function uses the `%d` formatting verb.\nThe output with the `%d` formatting verb will be `id: 42`.\n\n    fmt.Printf(\"id: %d\", 42)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoPrintFunctions",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoDeferGo",
                "shortDescription": {
                  "text": "Defer/go statement calls 'recover' or 'panic' directly"
                },
                "fullDescription": {
                  "text": "Reports 'defer' and 'go' statements that call 'panic()' or 'recover()' directly. Such statements are rarely useful and might indicate a misuse of the 'panic()' and 'recover()' mechanism. In particular: 'go panic()': a newly-started goroutine will panic immediately. 'defer panic()': a function with this statement will always panic on exit. 'go recover()': has no effect as newly-started goroutine cannot panic. 'defer recover()': function with this statement will silently stop panicking. This could be a valid usage, but an idiomatic way is to inspect the value returned by 'recover()': 'defer func() {\n  if r := recover(); r != nil {\n    fmt.Println(\"Recovered from: \", r)\n  }\n}()' For more information about go statements and panics handling, refer to Handling panics and Go statements in the Go Language Specification.",
                  "markdown": "Reports `defer` and `go` statements that call `panic()` or `recover()` directly.\n\nSuch statements are rarely useful and might indicate a misuse of the `panic()` and `recover()` mechanism.\nIn particular:\n\n* `go panic()`: a newly-started goroutine will panic immediately.\n* `defer panic()`: a function with this statement will always panic on exit.\n* `go recover()`: has no effect as newly-started goroutine cannot panic.\n* `defer recover()`: function with this statement will silently stop panicking. This could be a valid usage, but an idiomatic way is to inspect the value returned by `recover()`:\n\n      defer func() {\n        if r := recover(); r != nil {\n          fmt.Println(\"Recovered from: \", r)\n        }\n      }()\n\nFor more information about go statements and panics handling, refer to [Handling\npanics](https://go.dev/ref/spec#Handling_panics) and\n[Go statements](https://go.dev/ref/spec#Go_statements) in the Go Language Specification."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoDeferGo",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoVetUnsafePointer",
                "shortDescription": {
                  "text": "Invalid conversions of 'uintptr' to 'unsafe.Pointer'"
                },
                "fullDescription": {
                  "text": "Reports possibly incorrect conversions of 'uintptr' to 'unsafe.Pointer'. A conversion from 'uintptr' to 'unsafe.Pointer' is invalid if it implies that there is a 'uintptr'-typed word in memory that holds a pointer value, because that word will be invisible to stack copying and to the garbage collector. Example of invalid usage: 'nums := []int8{42, 24}\nptr := unsafe.Pointer(&nums[0])\naddr := uintptr(ptr) // address is stored to a local variable\nptr = unsafe.Pointer(addr + uintptr(1))' Example of valid usage: 'nums := []int8{42, 24}\nptr := unsafe.Pointer(&nums[0])\nptr = unsafe.Pointer(uintptr(ptr) + uintptr(1))'",
                  "markdown": "Reports possibly incorrect conversions of `uintptr` to `unsafe.Pointer`.\n\nA conversion from\n`uintptr` to `unsafe.Pointer` is invalid if it implies that there is a `uintptr`-typed word\nin memory that holds a pointer value, because that word will be invisible to stack copying and to the garbage collector.\n\nExample of invalid usage:\n\n    nums := []int8{42, 24}\n    ptr := unsafe.Pointer(&nums[0])\n    addr := uintptr(ptr) // address is stored to a local variable\n    ptr = unsafe.Pointer(addr + uintptr(1))\n\nExample of valid usage:\n\n    nums := []int8{42, 24}\n    ptr := unsafe.Pointer(&nums[0])\n    ptr = unsafe.Pointer(uintptr(ptr) + uintptr(1))\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVetUnsafePointer",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoReceiverNames",
                "shortDescription": {
                  "text": "Receiver has a generic name"
                },
                "fullDescription": {
                  "text": "Reports receiver names like 'me', 'this', 'self', or names that differ from other receiver names for this type. Example: 'func (self *MeterSnapshot) Rate5() float64 { return math.Float64frombits(self.rate5) }' According to Receiver Names at github.com/golang, you should not use generic names such as \"me\", \"this\", or \"self\". These identifiers are typical for object-oriented languages and might give the method a special meaning.",
                  "markdown": "Reports receiver names like `me`, `this`, `self`, or names that differ from other receiver names for this type.\n\nExample:\n\n    func (self *MeterSnapshot) Rate5() float64 { return math.Float64frombits(self.rate5) }\n\nAccording to [Receiver Names at github.com/golang](https://github.com/golang/go/wiki/CodeReviewComments#receiver-names),\nyou should not use generic names such as \"me\", \"this\", or \"self\". These identifiers are typical for object-oriented languages and might\ngive the method a special meaning."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoReceiverNames",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoConvertStringLiterals",
                "shortDescription": {
                  "text": "Convert string literals"
                },
                "fullDescription": {
                  "text": "Reports double-quoted string literals that can be converted into raw string literals and raw string literals that can be converted to double-quoted string literals. Example: 'var s = \"Hello\\n   \\\"World\\\"\"' After the quick fix is applied: 'var s = `Hello\n   \"World\"`' There are two notes that you should take into account while converting double-quoted strings to raw strings: According to the Go language specification, the carriage return character (''\\r'') is discarded from the raw string values. As there is no way to show carriage return in raw strings, we discard carriage return characters when converting a double-quoted string to a raw string. The backtick character (''`'') cannot exist in raw string literals because there is no way to escape it. Therefore, converting double-quoted strings that contain the backtick character to raw strings is not possible and will result in a syntax error. The user can decide to undo the conversion or use some form of concatenation to preserve the backtick in a double-quoted string. For example, '\"`ab``\"' will result in '`ab``', which is syntactically incorrect. The user can either undo the operation or change the resulting string to '`ab` + \"`\"'.",
                  "markdown": "Reports double-quoted [string literals](https://go.dev/ref/spec#String_literals) that can be converted into raw string literals and raw string literals that can be converted to double-quoted string literals.\n\n**Example:**\n\n\n      var s = \"Hello\\n   \\\"World\\\"\"\n\nAfter the quick fix is applied:\n\n\n      var s = `Hello\n       \"World\"`\n\nThere are two notes that you should take into account while converting double-quoted strings to raw strings:\n\n* According to the [Go language specification](https://go.dev/ref/spec#String_literals), the carriage return character (`'\\r'`) is discarded from the raw string values. As there is no way to show carriage return in raw strings, we discard carriage return characters when converting a double-quoted string to a raw string.\n* The backtick character (``'`'``) cannot exist in raw string literals because there is no way to escape it. Therefore, converting double-quoted strings that contain the backtick character to raw strings is not possible and will result in a syntax error. The user can decide to undo the conversion or use some form of concatenation to preserve the backtick in a double-quoted string. For example, ```\"`ab``\"``` will result in ````ab`````, which is syntactically incorrect. The user can either undo the operation or change the resulting string to ```ab` + \"`\"``."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoConvertStringLiterals",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnhandledErrorResult",
                "shortDescription": {
                  "text": "Unhandled error"
                },
                "fullDescription": {
                  "text": "Reports calls to functions and methods that do not handle the call result of the 'error' type. An API of such functions imply that their execution might finish unsuccessfully and they would return an error. Calls that do not handle the error result could be an indication of the API misuse. Example: 'os.Remove(\"non-existing\") // error is ignored' After the Handle error quick-fix is applied: 'err := os.Remove(\"non-existing\") // error is handled\nif err != nil {\n  return err\n}'",
                  "markdown": "Reports calls to functions and methods that do not handle the call result of the `error` type.\n\nAn API of such functions imply that their execution might finish unsuccessfully and they would return an error.\nCalls that do not handle the error result could be an indication of the API misuse.\n\nExample:\n\n\n    os.Remove(\"non-existing\") // error is ignored\n\nAfter the **Handle error** quick-fix is applied:\n\n    err := os.Remove(\"non-existing\") // error is handled\n    if err != nil {\n      return err\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnhandledErrorResult",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoRedundantConversion",
                "shortDescription": {
                  "text": "Redundant type conversion"
                },
                "fullDescription": {
                  "text": "Reports type conversions that may be omitted. Example: 'var s = string(\"hello\")' The '\"hello\"' value is the 'string' type already, the additional conversion to 'string' is redundant. To remove the conversion, consider using the Delete conversion quick-fix. After the quick-fix is applied: 'var s = \"hello\"' Sometimes conversion of a floating expression to a floating type can be intentional (refer to this issue as an example). In such cases, the IDE issues a warning about a possibly redundant conversion.",
                  "markdown": "Reports type conversions that may be omitted.\n\nExample:\n\n    var s = string(\"hello\")\n\nThe `\"hello\"` value is the `string` type already, the additional conversion to `string` is redundant.\nTo remove the conversion, consider using the **Delete conversion** quick-fix.\n\nAfter the quick-fix is applied:\n\n    var s = \"hello\"\n\nSometimes conversion of a floating expression to a floating type can be intentional\n(refer to [this issue](https://github.com/mdempsky/unconvert/issues/40) as an example). In such cases, the IDE issues\na warning about a *possibly* redundant conversion."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoRedundantConversion",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoReservedWordUsedAsName",
                "shortDescription": {
                  "text": "Reserved word used as name"
                },
                "fullDescription": {
                  "text": "Reports declarations of variables, arguments or functions that overlap with the built-in or reserved keyword. If you receive this error then your code might not be as explicit as possible and might confuse other users. Example: 'type byte struct{}\ntype string interface{}' Types 'byte' and 'string' collide with the built-in type aliases. Therefore, they will be highlighted. Consider renaming such declarations.",
                  "markdown": "Reports declarations of variables, arguments or functions that overlap with the built-in or reserved keyword.\n\nIf you receive this error then your code might not be as explicit as possible and might confuse other users.\n\nExample:\n\n    type byte struct{}\n    type string interface{}\n\nTypes `byte` and `string` collide with the built-in type aliases. Therefore, they will be highlighted.\nConsider renaming such declarations."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoReservedWordUsedAsName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnreachableCode",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code that can never be executed because there exists no control flow path to the code from the rest of the program. Example: 'func _() int {\n print(1)\n return 2\n println() // This code is unreachable \n return 0\n}'",
                  "markdown": "Reports code that can never be executed because there exists no control flow path to the code from the rest of the program.\n\nExample:\n\n    func _() int {\n     print(1)\n     return 2\n     println() // This code is unreachable \n     return 0\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnreachableCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Control flow issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoVetLostCancel",
                "shortDescription": {
                  "text": "'context.CancelFunc' is not called"
                },
                "fullDescription": {
                  "text": "Reports execution paths that do not call the 'cancel' function returned by 'context.WithCancel' and similar functions. The 'WithCancel', 'WithDeadline', and 'WithTimeout' functions take a 'Context' (the parent) and return a derived 'Context' (the child) and a 'CancelFunc'. Calling the 'CancelFunc' cancels the child and its children, removes the parent's reference to the child, and stops any associated timers. Failing to call the CancelFunc leaks the child and its children until the parent is canceled or the timer fires. For more information about the 'context' package, refer to Package context at go.dev. Example: 'func _(ctx context.Context, cancel func()) {\n var ctx2 context.Context\n ctx2, cancel = context.WithCancel(ctx)\n _ = ctx2\n}'",
                  "markdown": "Reports execution paths that do not call the `cancel` function returned by `context.WithCancel` and similar functions.\n\nThe `WithCancel`, `WithDeadline`, and `WithTimeout` functions take a `Context` (the parent)\nand return a\nderived `Context` (the child) and a `CancelFunc`.\nCalling the `CancelFunc` cancels the child and its children, removes the parent's reference to the child, and stops any\nassociated timers.\nFailing to call the CancelFunc leaks the child and its children until the parent is canceled or the timer fires.\n\nFor more information about the `context` package, refer to [Package context at\ngo.dev](https://pkg.go.dev/context).\n\nExample:\n\n    func _(ctx context.Context, cancel func()) {\n     var ctx2 context.Context\n     ctx2, cancel = context.WithCancel(ctx)\n     _ = ctx2\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVetLostCancel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoCommentStart",
                "shortDescription": {
                  "text": "Comment of exported element starts with the incorrect name"
                },
                "fullDescription": {
                  "text": "Reports comments that do not start with the name of the exported element. According to Comment Sentences at github.com/golang, this is a convention to begin a comment with the name of the exported element. Example: '// represents a request to run a command.\ntype Request struct {}' The comment starts with the struct description, not with the struct name. To stick to the convention rules, you can apply the Add prefix to comment quick-fix. After the quick-fix is applied, the comment looks as follows: // Request represents a request to run a command.\ntype Request struct {} // better",
                  "markdown": "Reports comments that do not start with the name of the exported element.\n\nAccording to\n[Comment Sentences at github.com/golang](https://github.com/golang/go/wiki/CodeReviewComments#comment-sentences), this is a convention to begin\na comment with the name of the exported element.\n\nExample:\n\n    // represents a request to run a command.\n    type Request struct {}\n\nThe comment starts with the struct description, not with the struct name. To stick to the convention rules, you can apply the **Add\nprefix to comment** quick-fix. After the quick-fix is applied, the comment looks as follows:\n\n```\n// Request represents a request to run a command.\ntype Request struct {} // better\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoCommentStart",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoRedundantBlankArgInRange",
                "shortDescription": {
                  "text": "Redundant blank argument in range"
                },
                "fullDescription": {
                  "text": "Reports optional blank variables in range loops. When you use the 'range' loop to iterate over a slice, two values are returned for each iteration. The first is the index number, and the second is a copy of the element at that index. If you do not need the second value, you can skip this element instead of using a blank identifier. Example: 'for a, _ = range v {} // `for a, _ =` is the same as `for a =`' To remove the blank identifier, you can use the Delete blank argument quick-fix. After the quick-fix is applied, the code will look as follows: 'for a = range v {}'",
                  "markdown": "Reports optional blank variables in range loops.\n\nWhen you use the `range` loop to iterate over a slice, two values are returned for each iteration. The first is the index\nnumber, and the second is a copy of the element at that index. If you do not need the second value, you can skip this element instead of\nusing a blank identifier.\n\nExample:\n\n    for a, _ = range v {} // `for a, _ =` is the same as `for a =`\n\nTo remove the blank identifier, you can use the **Delete blank argument** quick-fix. After the quick-fix is applied, the code will\nlook as follows:\n\n    for a = range v {}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoRedundantBlankArgInRange",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoEmptyDeclaration",
                "shortDescription": {
                  "text": "Empty declaration"
                },
                "fullDescription": {
                  "text": "Reports empty declarations. Empty declarations have no effect. If you remove them, you might improve code readability. Example: 'func main() {\n const () // empty declaration\n}' You can apply the Delete empty declaration quick-fix to remove this declaration.",
                  "markdown": "Reports empty declarations.\n\nEmpty declarations have no effect. If you remove them, you might improve code readability.\n\nExample:\n\n    func main() {\n     const () // empty declaration\n    }\n\nYou can apply the **Delete empty declaration** quick-fix to remove this declaration."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoEmptyDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VgoUnusedDependency",
                "shortDescription": {
                  "text": "Unused dependency"
                },
                "fullDescription": {
                  "text": "Reports unused dependencies. For each dependency in the current go.mod file, this inspection searches for any import statement starting with the dependency name in all GO files. If no such imports found then the dependency is considered unused. This inspection is an equivalent of the 'go mod why' command. The inspection processes 'require' and 'replace' directives. The 'require' directives with '// indirect' comments are also processed. The inspection might not accurately determine that a replaced or indirectly-required dependency is unused in the following cases: Vendoring mode is enabled Some dependencies are not downloaded",
                  "markdown": "Reports unused dependencies.\n\nFor each dependency in the current *go.mod* file, this inspection searches for any import statement starting with the dependency\nname in\nall GO files.\nIf no such imports found then the dependency is considered unused.\nThis inspection is an equivalent of the [`go mod why` command](https://go.dev/ref/mod#go-mod-why).\n\nThe inspection processes `require` and `replace` directives.\nThe `require` directives with `// indirect` comments are also processed.\n\nThe inspection might not accurately determine that a replaced or indirectly-required dependency is unused in the following cases:\n\n* Vendoring mode is enabled\n* Some dependencies are not downloaded"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VgoUnusedDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go modules/Declaration redundancy",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoStandardMethods",
                "shortDescription": {
                  "text": "Non-standard signature for well-known function names"
                },
                "fullDescription": {
                  "text": "Reports methods with certain names in the following cases: the method's name matches the name of several well-known interface methods from the standard library the signature does not match the signature of the corresponding interface method Such methods might indicate that the receiver type is intended to satisfy an interface from the standard library, but fails to do so because of the mistake in the method's signature. Example: 'type MyReader []byte\n\nfunc (r MyReader) ReadByte(data []byte) (byte, error) {\n}' The usage is suspicious because it looks like an attempt to implement 'io.ByteReader' but the signature is wrong. More correct version will be as follows: 'type MyReader []byte\n\nfunc (r MyReader) ReadByte() (byte, error) {\n}'",
                  "markdown": "Reports methods with certain names in the following cases:\n\n* the method's name matches the name of several well-known interface methods from the standard library\n* the signature does not match the signature of the corresponding interface method\n\nSuch methods might indicate that the receiver type is intended to satisfy an interface from the standard library,\nbut fails to do so because of the mistake in the method's signature.\n\nExample:\n\n    type MyReader []byte\n\n    func (r MyReader) ReadByte(data []byte) (byte, error) {\n    }\n\nThe usage is suspicious because it looks like an attempt to implement `io.ByteReader` but the signature is wrong.\nMore correct version will be as follows:\n\n    type MyReader []byte\n\n    func (r MyReader) ReadByte() (byte, error) {\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoStandardMethods",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoNameStartsWithPackageName",
                "shortDescription": {
                  "text": "Name starts with a package name"
                },
                "fullDescription": {
                  "text": "Reports exported names that start with a package name. This inspection does not report such names in the 'main' package. Example: 'package myPackage\n\nfunc MyPackageGetIP() {\n\n}' The 'MyPackageGetIP' name will be highlighted as it starts with the package name. According to Package Names at github.com/golang, all references to names in a package will be done using the package name, so one can omit that name from the identifiers. For example, if you are in a package 'foo', you do not need a type 'FooFile', which clients will write as 'foo.FooFile'. Instead, we name the type 'File', which clients will write as 'foo.File'.",
                  "markdown": "Reports exported names that start with a package name. This inspection does not report such names in the `main` package.\n\nExample:\n\n    package myPackage\n\n    func MyPackageGetIP() {\n\n    }\n\nThe `MyPackageGetIP` name will be highlighted as it starts with the package name.\n\nAccording to\n[Package Names at github.com/golang](https://github.com/golang/go/wiki/CodeReviewComments#package-names),\nall references to names in a package will be done using the package name, so one can omit that name from the identifiers.\nFor example, if you are in a package `foo`, you do not need a type `FooFile`,\nwhich clients will write as `foo.FooFile`. Instead, we name the type `File`,\nwhich clients will write as `foo.File`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoNameStartsWithPackageName",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoInterfaceToAny",
                "shortDescription": {
                  "text": "Usage of 'interface{}' as a type"
                },
                "fullDescription": {
                  "text": "Reports usages of the empty interface as a type or type constraint. The empty interface denotes the set of all types. Go 1.18 introduced the more explicit alias 'any' for 'interface{}', which is equivalent to 'interface{}' in all ways. The inspection is triggered for any usage of an empty interface as a type or type constraint. Aliases of the empty interface and interfaces that exclusively embed other empty interfaces do not trigger the inspection. Consider using the more explicit alias 'any' instead.",
                  "markdown": "Reports usages of the empty interface as a type or type constraint.\n\n\nThe empty interface denotes the set of all types.\nGo 1.18 introduced the more explicit alias `any` for `interface{}`,\nwhich is equivalent to `interface{}` in all ways.\n\nThe inspection is triggered for any usage of an empty interface as a type or type constraint.\nAliases of the empty interface and interfaces that exclusively embed other empty interfaces do not trigger the inspection.\n\nConsider using the more explicit alias `any` instead."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoInterfaceToAny",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnsortedImport",
                "shortDescription": {
                  "text": "Unsorted imports"
                },
                "fullDescription": {
                  "text": "Reports unsorted imports. All Go programs should be formatted in the same way, the formatting rules are fixed by the gofmt tool. Those rules require imports to be sorted. Example of a wrong sorting: 'import (\n \"net\"\n \"errors\"\n \"fmt\"\n)' You can apply the Sort imports quick-fix to fix the sorting. After the quick-fix is applied, the sorting looks as follows: 'import (\n \"errors\"\n \"fmt\"\n \"net\"\n)'",
                  "markdown": "Reports unsorted imports.\n\nAll Go programs should be formatted in the same way, the formatting rules are fixed by the\n[gofmt](https://pkg.go.dev/cmd/gofmt) tool. Those rules require imports to be sorted.\n\nExample of a wrong sorting:\n\n    import (\n     \"net\"\n     \"errors\"\n     \"fmt\"\n    )\n\nYou can apply the **Sort imports** quick-fix to fix the sorting. After the quick-fix is applied, the sorting\nlooks as follows:\n\n    import (\n     \"errors\"\n     \"fmt\"\n     \"net\"\n    )\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoUnsortedImport",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoTypeAssertionOnErrors",
                "shortDescription": {
                  "text": "Type assertion on errors fails on wrapped errors"
                },
                "fullDescription": {
                  "text": "Reports type assertion or type switch on errors, for example, 'err.(*MyErr)' or 'switch err.(type)', and suggests using 'errors.As' instead. Since Go 1.13, errors can be wrapped using the 'fmt.Errorf' function with the '%w' verb. Therefore, type assertion or type switch on errors fails on wrapped errors. The preferred way for checking for a specific error type is to use the errors.As function from the standard library as this function traverses the chain of the wrapped errors while checking for a specific error type. For more information about 'errors.As', refer to working with Errors in Go 1.13. The quick-fix replaces type assertion and type switch on errors with a call to 'errors.As'. Example 'errFoo, ok := err.(*ErrFoo)\n\n\nswitch err.(type) {\n  case *ErrBar:\n}' After the quick fix is applied: 'var errFoo *ErrFoo\nok := errors.As(err, &errFoo)\n\nvar errBar *ErrBar\nswitch {\ncase errors.As(err, &errBar):\n}'",
                  "markdown": "Reports type assertion or type switch on errors, for example, `err.(*MyErr)` or `switch err.(type)`, and suggests using `errors.As` instead.\n\nSince Go 1.13, errors can be wrapped using the `fmt.Errorf` function with the `%w` verb. Therefore, type assertion\nor type switch on errors fails on wrapped errors. The preferred way for checking for a specific error type\nis to use the [errors.As](https://pkg.go.dev/errors#As) function from the standard library as this function traverses the chain of the wrapped errors while\nchecking for a specific error type.\n\nFor more information about `errors.As`, refer to [working with Errors in Go 1.13](https://go.dev/blog/go1.13-errors).\n\nThe quick-fix replaces type assertion and type switch on errors with a call to `errors.As`.\n\n**Example**\n\n\n    errFoo, ok := err.(*ErrFoo)\n\n\n    switch err.(type) {\n      case *ErrBar:\n    }\n\nAfter the quick fix is applied:\n\n\n    var errFoo *ErrFoo\n    ok := errors.As(err, &errFoo)\n\n    var errBar *ErrBar\n    switch {\n    case errors.As(err, &errBar):\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoTypeAssertionOnErrors",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoContextTodo",
                "shortDescription": {
                  "text": "Usage of context.TODO()"
                },
                "fullDescription": {
                  "text": "Reports usages of 'context.TODO()'. According to the documentation at pkg.go.dev, you need to use 'context.TODO' when it is unclear what 'Context' to use, or 'Context' is not yet available. 'Context' might not be available because of the surrounding function that has not yet been extended to accept the 'Context' parameter. Note that it is a temporary placeholder, and you must change it in the future to a more meaningful context (for example, 'context.Background()').",
                  "markdown": "Reports usages of `context.TODO()`.\n\nAccording to the [documentation at pkg.go.dev](https://pkg.go.dev/context#TODO),\nyou need to use `context.TODO` when it is unclear what\n`Context` to use, or `Context` is not yet available.\n`Context` might not be available because of the surrounding function that\nhas not yet been extended to accept the `Context` parameter.\n\nNote that it is a temporary placeholder, and you must change it in the future to a more meaningful\ncontext (for example, `context.Background()`)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoContextTodo",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoExportedOwnDeclaration",
                "shortDescription": {
                  "text": "Exported element should have its own declaration"
                },
                "fullDescription": {
                  "text": "Reports exported variables or constants in comma-separated lists of declarations. Example: 'const C1, C3, C2, C44, C9, C11, C6 = 1, 2, 3, 1, 3, 2, 1' This declaration makes it hard to understand what value each constant has. You can apply the Extract to own declaration quick-fix to make this declaration more readable. After the quick-fix is applied to each constant, the declaration looks as follows: 'const (\n C3  = 2\n C2  = 3\n C44 = 1\n C9  = 3\n C11 = 2\n C6  = 1\n C1  = 1\n)'",
                  "markdown": "Reports exported variables or constants in comma-separated lists of declarations.\n\nExample:\n\n    const C1, C3, C2, C44, C9, C11, C6 = 1, 2, 3, 1, 3, 2, 1\n\nThis declaration makes it hard to understand what value each constant has. You can apply the **Extract to own declaration** quick-fix\nto make this declaration more readable. After the quick-fix is applied to each constant, the declaration looks as follows:\n\n    const (\n     C3  = 2\n     C2  = 3\n     C44 = 1\n     C9  = 3\n     C11 = 2\n     C6  = 1\n     C1  = 1\n    )\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoExportedOwnDeclaration",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoDivisionByZero",
                "shortDescription": {
                  "text": "Division by zero"
                },
                "fullDescription": {
                  "text": "Reports division by zero. Division by zero will lead to a runtime panic. Example: 's := 3 / 0'",
                  "markdown": "Reports division by zero.\n\nDivision by zero will lead to a runtime panic.\n\nExample:\n\n    s := 3 / 0\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoDivisionByZero",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoMixedReceiverTypes",
                "shortDescription": {
                  "text": "Mixed value and pointer receivers"
                },
                "fullDescription": {
                  "text": "Reports structures with methods that use a mixture of types: value and pointer receivers. Such usage is not recommended by the Go Documentation. For more information, refer to Should I define methods on values or pointers? in the Go FAQ. Example: 'type S struct{\n}\n\nfunc (s *S) fun() {}\nfunc (s S) fun2() {}'",
                  "markdown": "Reports structures with methods that use a mixture of types: value and pointer receivers. Such usage is not recommended by the Go Documentation.\n\nFor more information, refer to [Should I define methods on values or pointers?](https://go.dev/doc/faq#methods_on_values_or_pointers) in the Go FAQ.\n\nExample:\n\n    type S struct{\n    }\n\n    func (s *S) fun() {}\n    func (s S) fun2() {}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoMixedReceiverTypes",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoVetAtomic",
                "shortDescription": {
                  "text": "Incorrect usage of the 'sync/atomic' package"
                },
                "fullDescription": {
                  "text": "Reports assignment statements of the form 'x = atomic.AddUint64(&x, 1)'. Such operations are not atomic, and is a common misuse of the 'sync/atomic' API. To make them atomic, one need to remove the assignment to use a direct call: 'atomic.AddUint64(&x, 1)'. In that case, the value of 'x' will be updated atomically by address. Example: 'import (\n \"sync/atomic\"\n)\n\ntype Counter uint64\n\nfunc AtomicTests() {\n x := uint64(1)\n x = atomic.AddUint64(&x, 1)         // ERROR \"direct assignment to atomic value\"\n _, x = 10, atomic.AddUint64(&x, 1)  // ERROR \"direct assignment to atomic value\"\n x, _ = atomic.AddUint64(&x, 1), 10  // ERROR \"direct assignment to atomic value\"\n}'",
                  "markdown": "Reports assignment statements of the form `x = atomic.AddUint64(&x, 1)`.\n\nSuch operations are not atomic,\nand is a common misuse of the `sync/atomic` API. To make them atomic, one need to remove the assignment\nto use a direct call: `atomic.AddUint64(&x, 1)`. In that case, the value of `x` will be updated\natomically by address.\n\nExample:\n\n    import (\n     \"sync/atomic\"\n    )\n\n    type Counter uint64\n\n    func AtomicTests() {\n     x := uint64(1)\n     x = atomic.AddUint64(&x, 1)         // ERROR \"direct assignment to atomic value\"\n     _, x = 10, atomic.AddUint64(&x, 1)  // ERROR \"direct assignment to atomic value\"\n     x, _ = atomic.AddUint64(&x, 1), 10  // ERROR \"direct assignment to atomic value\"\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVetAtomic",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoVetUnmarshal",
                "shortDescription": {
                  "text": "'Unmarshal' is called with the incorrect argument"
                },
                "fullDescription": {
                  "text": "Reports calls to 'json.Unmarshal' and similar functions if the argument that is passed to store the result is not a pointer or an interface. These calls will fail and return an error. For more information about 'Unmarshal', refer to func Unmarshal at go.dev. Example: 'var animals []Animal\nerr := json.Unmarshal(jsonData, animals) // always returns an error' After the Prepend '&' quick-fix is applied: 'var animals []Animal\nerr := json.Unmarshal(jsonData, &animals)'",
                  "markdown": "Reports calls to `json.Unmarshal` and similar functions if the argument that is passed to store the result is not a pointer or an interface.\n\nThese calls will fail and return an error.\n\nFor more information about `Unmarshal`, refer to [func Unmarshal at\ngo.dev](https://pkg.go.dev/encoding/json#Unmarshal).\n\nExample:\n\n    var animals []Animal\n    err := json.Unmarshal(jsonData, animals) // always returns an error\n\nAfter the **Prepend '\\&'** quick-fix is applied:\n\n    var animals []Animal\n    err := json.Unmarshal(jsonData, &animals)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVetUnmarshal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnnecessarilyExportedIdentifiers",
                "shortDescription": {
                  "text": "Unnecessarily exported identifier"
                },
                "fullDescription": {
                  "text": "Reports exported identifiers that are used only in the package where they are defined but are not used in other packages. Making them exported is redundant and may clutter the API of the package.",
                  "markdown": "Reports exported identifiers that are used only in the package where they are defined but are not used in other packages.\n\nMaking them exported is redundant and may clutter the API of the package."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoUnnecessarilyExportedIdentifiers",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoIrregularIota",
                "shortDescription": {
                  "text": "Irregular usage of 'iota'"
                },
                "fullDescription": {
                  "text": "Reports irregular usage of 'iota' within a constant declaration. The 'iota' identifier is reset for every constant declaration and automatically incremented for every constant specification. Within one constant specification, the identifier keeps its value. Explicitly referring to 'iota' does not reset the counter. For more information, refer to Iota in the Go specification. This inspection is triggered if two constant specifications have a textually identical expression list containing at least one reference to 'iota' and there are exclusively constant specifications without an expression list in between them. Consider omitting the redundant expression list or writing out the expression list every time. Example: 'const (\n  a = iota  // 0\n  b         // 1\n  c = iota  // 2\n)' Triggers the inspection as the 'iota' in the definition of 'c' is redundant. Example: 'const (\n  a, aa = iota, iota       // 0, 0\n  b, bb                    // 1, 1\n  c, cc = iota + 40, iota  // 42, 2\n)' Does not trigger the inspection as none of the expression lists is redundant.",
                  "markdown": "Reports irregular usage of `iota` within a constant declaration.\n\nThe `iota` identifier is reset for every constant declaration and automatically incremented for every constant specification.\nWithin one constant specification, the identifier keeps its value. Explicitly referring to `iota` does not reset the counter.\n\nFor more information, refer to [Iota](https://go.dev/ref/spec#Iota) in the Go specification.\n\nThis inspection is triggered if two constant specifications have a textually identical expression list containing at least one reference to `iota`\nand there are exclusively constant specifications without an expression list in between them.\n\nConsider omitting the redundant expression list or writing out the expression list every time.\n\nExample:\n\n    const (\n      a = iota  // 0\n      b         // 1\n      c = iota  // 2\n    )\n\nTriggers the inspection as the `iota` in the definition of `c` is redundant.\n\nExample:\n\n    const (\n      a, aa = iota, iota       // 0, 0\n      b, bb                    // 1, 1\n      c, cc = iota + 40, iota  // 42, 2\n    )\n\nDoes not trigger the inspection as none of the expression lists is redundant."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoIrregularIota",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoVetStructTag",
                "shortDescription": {
                  "text": "Malformed struct tag"
                },
                "fullDescription": {
                  "text": "Reports struct tags that do not conform to Go conventions for struct tags. According to these conventions, tag strings are a concatenation of optionally space-separated 'key:\"value\"' pairs. Each key is a non-empty string consisting of non-control characters other than 'space (U+0020 ' ')', 'quote (U+0022 '\"')', and 'colon (U+003A ':')'. Each value is quoted using 'U+0022 '\"'' characters and Go string literal syntax. Also, the inspection checks that fields with tags are exported. Example of a valid tag: 'type Example struct {\n  Field int `json:\"field\" xml:\"demo\"`\n}'",
                  "markdown": "Reports struct tags that do not conform to [Go conventions for struct tags](https://pkg.go.dev/reflect#StructTag).\n\nAccording to these conventions, tag strings are a concatenation of optionally space-separated `key:\"value\"` pairs. Each\nkey is a non-empty string consisting of non-control characters other than `space (U+0020 ' ')`, `quote (U+0022 '\"')`,\nand\n`colon (U+003A ':')`. Each value is quoted using `U+0022 '\"'` characters and Go string literal syntax.\n\nAlso, the inspection checks that fields with tags are exported.\n\nExample of a valid tag:\n\n    type Example struct {\n      Field int `json:\"field\" xml:\"demo\"`\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVetStructTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoRedundantTypeDeclInCompositeLit",
                "shortDescription": {
                  "text": "Redundant types in composite literals"
                },
                "fullDescription": {
                  "text": "Reports redundant type declarations in composite literals. Example: 'nums := [][]int{[]int{1}, []int{2}}' We have a slice of slices of the 'int' type. In this case, you can use a shorter definition. You can fix this code manually or use the Delete redundant type quick-fix. After the quick-fix is applied, the code looks as follows: 'nums := [][]int{{1},{2}}' For more information about composite literals, refer to Go Language Specification: Composite Literals at go.dev.",
                  "markdown": "Reports redundant type declarations in composite literals.\n\nExample:\n\n    nums := [][]int{[]int{1}, []int{2}}\n\nWe have a slice of slices of the `int` type. In this case, you can use a shorter definition. You can fix this code manually or\nuse the **Delete redundant type** quick-fix. After the quick-fix is applied, the code looks as follows:\n\n    nums := [][]int{{1},{2}}\n\nFor more information about composite literals, refer to [Go Language Specification:\nComposite Literals at go.dev](https://go.dev/ref/spec#Composite_literals)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoRedundantTypeDeclInCompositeLit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VgoDependencyVersionRetracted",
                "shortDescription": {
                  "text": "Retracted dependency version"
                },
                "fullDescription": {
                  "text": "Reports retracted dependency versions. Users must avoid using retracted versions as they might contain a vulnerability, a significant bug, or other issues that might be harmful. The retraction reason is described in the provided retraction notice. To solve a problem, update the dependency to the most recent version that has not been retracted. Note that retraction does not prevent you from using the retracted versions. Available quick-fixes may suggest updating to the latest version or reading the retraction notice. For more information, refer to 'retract' directive at go.dev. Retraction data is provided by the command go list -m -u.",
                  "markdown": "Reports retracted dependency versions.\n\n\nUsers must avoid using retracted versions as they might contain a vulnerability, a significant bug, or other issues that might be harmful.\nThe retraction reason is described in the provided retraction notice.\n\n\nTo solve a problem, update the dependency to the most recent version that has not been retracted.\nNote that retraction does not prevent you from using the retracted versions.\n\n\nAvailable quick-fixes may suggest updating to the latest version or reading the retraction notice.\n\n\nFor more information, refer to [`retract` directive at go.dev](https://go.dev/ref/mod#go-mod-file-retract).  \n\nRetraction data is provided by the command [go list -m -u](https://go.dev/ref/mod#go-list-m)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VgoDependencyVersionRetracted",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go modules/Dependency issues (go list -m -u)",
                      "index": 57,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VgoDependencyUpdateAvailable",
                "shortDescription": {
                  "text": "Dependency update available"
                },
                "fullDescription": {
                  "text": "Suggests updating outdated go.mod dependencies to the latest versions. Ignores the retracted versions. For more information about retracted versions, refer to the 'retract' directive at go.dev. Latest version data is provided by the command go list -m -u.",
                  "markdown": "Suggests updating outdated *go.mod* dependencies to the latest versions. Ignores the retracted versions.\n\nFor more information about retracted versions,\nrefer to the [`retract` directive at go.dev](https://go.dev/ref/mod#go-mod-file-retract).  \n\nLatest version data is provided by the command [go list -m -u](https://go.dev/ref/mod#go-list-m)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "VgoDependencyUpdateAvailable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go modules/Dependency issues (go list -m -u)",
                      "index": 57,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoRedundantParens",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Reports redundant parentheses in expressions and types. Example: 'func _(x (int), y ((string))) {\n}\nfunc _() {\n _ = (1 + 1)\n _ = (((1 + 1)))\n _ = (((1 + 1))) + (((2 + 2)))\n}' After the Unwrap parentheses quick-fix is applied: 'func _(x int, y string) {\n}\nfunc _() {\n _ = 1 + 1\n _ = 1 + 1\n _ = (1 + 1) + (2 + 2)\n}'",
                  "markdown": "Reports redundant parentheses in expressions and types.\n\nExample:\n\n    func _(x (int), y ((string))) {\n    }\n    func _() {\n     _ = (1 + 1)\n     _ = (((1 + 1)))\n     _ = (((1 + 1))) + (((2 + 2)))\n    }\n\nAfter the **Unwrap parentheses** quick-fix is applied:\n\n    func _(x int, y string) {\n    }\n    func _() {\n     _ = 1 + 1\n     _ = 1 + 1\n     _ = (1 + 1) + (2 + 2)\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoRedundantParens",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnusedParameter",
                "shortDescription": {
                  "text": "Unused parameter"
                },
                "fullDescription": {
                  "text": "Reports unused function parameters. 'func main() {\n printAll(\n  42,\n  \"bird\",\n )\n}\n\nfunc printAll(\n i int,\n s string,\n) {\n fmt.Println(i)\n}' We call the printAll function passing '42' and 'bird' as arguments. The printAll function accepts two parameters 'int' and 'string' but uses only the first of them. Therefore, the 's string' is grayed out.",
                  "markdown": "Reports unused function parameters.\n\n    func main() {\n     printAll(\n      42,\n      \"bird\",\n     )\n    }\n\n    func printAll(\n     i int,\n     s string,\n    ) {\n     fmt.Println(i)\n    }\n\nWe call the **printAll** function passing `42` and `bird` as arguments. The **printAll** function accepts two\nparameters `int` and `string` but uses only the first of them. Therefore, the `s string` is grayed out."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnusedParameter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoDisabledGopathIndexing",
                "shortDescription": {
                  "text": "Disabled GOPATH indexing"
                },
                "fullDescription": {
                  "text": "Reports disabled GOPATH indexing that might prevent proper resolution of code references. GOPATH stores your code base and all the files that are necessary for your development. Also, it includes packages that you download and install. If you disabled GOPATH indexing, only project and vendored packages are indexed. It might improve the overall performance but makes it impossible to use packages from GOPATH.",
                  "markdown": "Reports disabled GOPATH indexing that might prevent proper resolution of code references.\n\nGOPATH stores your code base and all the files that are necessary for your development. Also, it includes packages that you download and\ninstall. If you disabled GOPATH indexing, only project and vendored packages are indexed. It might improve the overall performance but\nmakes it impossible to use packages from GOPATH."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoDisabledGopathIndexing",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoLeadingWhitespaceInDirectiveComment",
                "shortDescription": {
                  "text": "Leading whitespace in directive comment"
                },
                "fullDescription": {
                  "text": "Reports leading whitespaces before Go directives in comments. Go directives are not recognized if there is whitespace between '//' and the Go directive. The quick-fix removes the leading whitespace before the Go directive. Example: '//  go:embed file.txt\nvar File string' After the quick fix is applied: '//go:embed file.txt\nvar File string'",
                  "markdown": "Reports leading whitespaces before Go directives in comments.\n\nGo directives are not recognized if there is whitespace between `//` and\nthe Go directive.\n\nThe quick-fix removes the leading whitespace before the Go directive.\n\n**Example:**\n\n\n    //  go:embed file.txt\n    var File string\n\nAfter the quick fix is applied:\n\n\n    //go:embed file.txt\n    var File string\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoLeadingWhitespaceInDirectiveComment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoShift",
                "shortDescription": {
                  "text": "Exceeded shift expression"
                },
                "fullDescription": {
                  "text": "Reports shift expressions that equal or exceed the width of the integer. All the bits of the left operand are shifted in such expression resulting in a constant value. The constant value indicates that either the shift offset is incorrect or the shift expression is redundant. Example: 'func shift(i int8) {\n    fmt.Println(i << 8) // always prints 0\n  }'",
                  "markdown": "Reports shift expressions that equal or exceed the width of the integer.\n\nAll the bits of the left operand are shifted in such expression resulting in a constant value. The constant value\nindicates that either the shift offset is incorrect or the shift expression is redundant.\n\nExample:\n\n\n      func shift(i int8) {\n        fmt.Println(i << 8) // always prints 0\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoShift",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoSelfAssignment",
                "shortDescription": {
                  "text": "Self assignment"
                },
                "fullDescription": {
                  "text": "Reports expressions that are assigned to themselves. Such assignments have no effect, removing them might improve code readability. Example: 'func importedVarSelfAssignment() {\n http.ErrNotSupported = http.ErrNotSupported\n}'",
                  "markdown": "Reports expressions that are assigned to themselves.\n\nSuch assignments have no effect, removing them might improve code readability.\n\nExample:\n\n    func importedVarSelfAssignment() {\n     http.ErrNotSupported = http.ErrNotSupported\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoSelfAssignment",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoStructInitializationWithoutFieldNames",
                "shortDescription": {
                  "text": "Struct initialization without field names"
                },
                "fullDescription": {
                  "text": "Reports structures that are initialized without specifying their field names. By default, the inspection is available only when you use the type that is defined in a different package. When initializing a structure, it is better to explicitly state field names in order to ensure that in case of changes in order of these fields or in names of the fields, they will correctly continue to be addressed. Example: '_ = io.LimitedReader{nil, 10}' The 'LimitedReader' initialization will be highlighted because explicit names for struct fields are missing. You can apply the Add keys and delete zero values quick-fix to the struct initialization. After the quick-fix is applied, the code looks as follows: '_ = io.LimitedReader{N: 10}' The inspection has the following options: Report types defined in current package: reports situations when you declare and initialize struct in the same package. Consider the following example. 'd := struct {\n  c string\n }{ \"dsd \"}' Report struct literals without types: reports fields without names when the type (struct or interface) is omitted. Consider the following example when the type is omitted. '_ = []io.LimitedReader{\n {nil, 10},\n {nil, 20},\n }' In the following example, the type is present but is redundant. '_ = []io.LimitedReader{\n io.LimitedReader{nil, 10},\n io.LimitedReader{nil, 20},\n}'",
                  "markdown": "Reports structures that are initialized without specifying their field names. By default, the inspection is available only when you use the type that is defined in a different package.\n\nWhen initializing a structure, it is better to explicitly state field names in order\nto ensure that in case of changes in order of these fields or in names of the fields, they\nwill correctly continue to be addressed.\n\nExample:\n\n    _ = io.LimitedReader{nil, 10}\n\nThe `LimitedReader` initialization will be highlighted because explicit names for struct fields are missing.\nYou can apply the **Add keys and delete zero values** quick-fix to the\nstruct initialization. After the quick-fix is applied, the code looks as follows:\n\n    _ = io.LimitedReader{N: 10}\n\nThe inspection has the following options:\n\n* **Report types defined in current package**: reports situations when you declare and initialize struct in the same package.\n  Consider the following example.\n\n      d := struct {\n        c string\n       }{ \"dsd \"}\n\n* **Report struct literals without types**: reports fields without names when the type (struct or interface) is omitted.\n  Consider the following example when the type is omitted.\n\n      _ = []io.LimitedReader{\n       {nil, 10},\n       {nil, 20},\n       }\n\n  In the following example, the type is present but is redundant.\n\n      _ = []io.LimitedReader{\n       io.LimitedReader{nil, 10},\n       io.LimitedReader{nil, 20},\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoStructInitializationWithoutFieldNames",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VgoMigrateFromReplacesToWorkspace",
                "shortDescription": {
                  "text": "Migration to Go workspace is possible"
                },
                "fullDescription": {
                  "text": "Generates 'go.work' files using 'replace' directives. Go workspaces is a feature introduced in Go 1.18 that allows working simultaneously on several modules. Workspaces are a modern alternative to 'replace' directives pointing to local directories. All modules in a workspace have the same set of dependencies, thus making the configuration simpler, more robust, and requiring fewer 'go list' calls to scan the project structure. The fix for this inspection generates a new 'go.work' file and does not change existing files. By default, the 'warning' severity is used. If a generated workspace would include Go modules that were not replaced in the original 'go.mod', no warning is shown due to possible side effects caused by migration. But you can still run the fix manually. For more information about workspaces, refer to Go Modules Reference. For Go workspaces introduction, refer to Tutorial: Getting started with multi-module workspaces.",
                  "markdown": "Generates 'go.work' files using 'replace' directives.\n\n\nGo workspaces is a feature introduced in Go 1.18 that allows working simultaneously on several modules.  \n\nWorkspaces are a modern alternative to 'replace' directives pointing to local directories.  \n\nAll modules in a workspace have the same set of dependencies, thus making the configuration simpler, more robust,\nand requiring fewer 'go list' calls to scan the project structure.  \n\nThe fix for this inspection generates a new 'go.work' file and does not change existing files.\n\n\nBy default, the 'warning' severity is used. If a generated workspace would include Go modules that were not replaced\nin the original 'go.mod', no warning is shown due to possible side effects caused by migration. But you can still run the fix manually.\n\n\nFor more information about workspaces, refer to [Go Modules Reference](https://go.dev/ref/mod#workspaces).  \n\nFor Go workspaces introduction, refer to [Tutorial: Getting started with multi-module\nworkspaces](https://go.dev/doc/tutorial/workspaces)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VgoMigrateFromReplacesToWorkspace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go modules/General",
                      "index": 58,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoRedundantTrueInForCondition",
                "shortDescription": {
                  "text": "Redundant 'true' in for loop condition"
                },
                "fullDescription": {
                  "text": "Reports the redundant 'true' literal in the 'for' loop condition. In Go, the 'for' loop has a form with an implicit condition. It means that you can create an infinite loop by writing 'for { }'. Therefore, in cases with the 'true' condition ('for true { }'), 'true' is considered redundant and might be omitted. For more information about the 'for' loop in Go, refer to For at go.dev. Example: 'for true {\n  println(\"ping\")\n}'",
                  "markdown": "Reports the redundant `true` literal in the `for` loop condition.\n\nIn Go, the `for` loop has a form with an implicit condition.\nIt means that you can create an infinite loop by writing `for { }`.\nTherefore, in cases with the `true` condition (`for true { }`), `true` is considered redundant and might be omitted.\n\nFor more information about the `for` loop in Go, refer to [For at go.dev](https://go.dev/doc/effective_go#for).\n\nExample:\n\n    for true {\n      println(\"ping\")\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoRedundantTrueInForCondition",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoSwitchMissingCasesForIotaConsts",
                "shortDescription": {
                  "text": "Missing 'case' statements for 'iota' consts in 'switch'"
                },
                "fullDescription": {
                  "text": "Reports unhandled values in 'switch' statements when the 'iota' identifier is in the 'const' declaration. To handle these values, consider using 'case' or 'default' clauses. The 'iota' keyword in Go creates a sequence of integers in a 'const' block. Although the Go compiler does not require handling all 'iota' values, missing some of them could indicate a bug. For more information about 'iota', refer to Iota at go.dev. Examples: 'const (\n  a = iota\n  b\n  c = -5\n)\n\nfunc main() {\n  v := 5\n  switch v {\n  case a:\n    break;\n  case b:\n    break;\n  }\n}' The IDE triggers an inspection because 'c' is not handled by the 'switch' statement. Note that 'c' is in the same 'const' block even if it does not use 'iota'. Quick-fix options are Create 'case' clause for values and Create 'default' clause. After the Create 'default' clause quick-fix is applied: 'const (\n  a = iota\n  b\n  c\n)\n\nfunc main() {\n  v := 5\n  switch v {\n  case a:\n    break;\n  default:\n  }\n}'",
                  "markdown": "Reports unhandled values in `switch` statements when the `iota` identifier is in the `const` declaration. To handle these values, consider using `case` or `default` clauses.\n\n\nThe `iota` keyword in Go creates a sequence of integers in a `const` block. Although the Go compiler does not require handling all `iota` values, missing some of them could indicate a bug.\n\nFor more information about `iota`, refer to [Iota at go.dev](https://go.dev/ref/spec#Iota).\n\nExamples:\n\n    const (\n      a = iota\n      b\n      c = -5\n    )\n\n    func main() {\n      v := 5\n      switch v {\n      case a:\n        break;\n      case b:\n        break;\n      }\n    }\n\n\nThe IDE triggers an inspection because `c` is not handled by the `switch` statement. Note that `c` is in the same `const` block even if it does not use `iota`.\n\nQuick-fix options are **Create 'case' clause for values** and **Create 'default' clause** . After the **Create 'default' clause** quick-fix is applied:\n\n    const (\n      a = iota\n      b\n      c\n    )\n\n    func main() {\n      v := 5\n      switch v {\n      case a:\n        break;\n      default:\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoSwitchMissingCasesForIotaConsts",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoTestName",
                "shortDescription": {
                  "text": "Malformed test function name"
                },
                "fullDescription": {
                  "text": "Reports malformed names of tests, benchmarks, and examples. According to Package testing at go.dev, names must follow a special convention in order to make the go tool process them correctly. Example: 'func Testfoo(*testing.T) {} // the 'go' tool will not run this test' After the Rename to quick-fix is applied: 'func TestFoo(*testing.T) {}'",
                  "markdown": "Reports malformed names of tests, benchmarks, and examples.\n\nAccording to [Package testing at go.dev](https://pkg.go.dev/testing), names must follow a special convention\nin order to make the go tool process them correctly.\n\nExample:\n\n    func Testfoo(*testing.T) {} // the 'go' tool will not run this test\n\nAfter the **Rename to** quick-fix is applied:\n\n    func TestFoo(*testing.T) {}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoTestName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoErrorStringFormat",
                "shortDescription": {
                  "text": "Error string should not be capitalized or end with punctuation"
                },
                "fullDescription": {
                  "text": "Reports format issues in error strings. Example: 'err := fmt.Errorf(\"Cannot read the file!\")\nlog.Printf(\"Reading %s: %v\", file, err)' According to Error Strings at github.com/golang, error strings should not be capitalized or end with punctuation because they might appear among other context. To fix the format, you can apply the Fix error string format quick-fix. After the quick-fix is applied, the error string will look like this: 'err := fmt.Errorf(\"cannot read the file\")\nlog.Printf(\"Reading %s: %v\", file, err)'",
                  "markdown": "Reports format issues in error strings.\n\nExample:\n\n    err := fmt.Errorf(\"Cannot read the file!\")\n    log.Printf(\"Reading %s: %v\", file, err)\n\nAccording to\n[Error Strings at github.com/golang](https://github.com/golang/go/wiki/CodeReviewComments#error-strings),\nerror strings should not be capitalized or end with punctuation because they might appear among other context.\n\nTo fix the format, you can apply the **Fix error string format** quick-fix. After the quick-fix is applied,\nthe error string will look like this:\n\n    err := fmt.Errorf(\"cannot read the file\")\n    log.Printf(\"Reading %s: %v\", file, err)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoErrorStringFormat",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoCommentLeadingSpace",
                "shortDescription": {
                  "text": "Comment has no leading space"
                },
                "fullDescription": {
                  "text": "Reports comments without a leading space. Note that the inspection works only if you select the Add a leading space to comments in Editor | Code Style | Go on the Other tab. Comments with a leading space can be easier to read since the first word is separated from the comment by a space. Example: '//Prints JSON received from the createJSON function\nfunc printJSON(output []byte) {\n\tfmt.Println(string(output))\n}'",
                  "markdown": "Reports comments without a leading space.\n\nNote that the inspection works only if you select the **Add a leading space to comments** in **Editor \\| Code Style \\| Go** on the\n**Other** tab.\n\nComments with a leading space can be easier to read since the first word is separated from the comment by a space.\n\nExample:\n\n    //Prints JSON received from the createJSON function\n    func printJSON(output []byte) {\n    \tfmt.Println(string(output))\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoCommentLeadingSpace",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoDeferInLoop",
                "shortDescription": {
                  "text": "'defer' in the loop"
                },
                "fullDescription": {
                  "text": "Reports 'defer' statements inside loops. Using 'defer' in loops can lead to resource leaks or unpredictable execution order of statements. Example: 'func main() {\n for {\n  field, err := db.Query(\"SELECT 1\")\n  if err != nil {\n   // ...\n  }\n  defer field.Close()\n  // ...\n }\n}' Calls of 'defer row.Close()' inside the loop are not executed until the function completes its execution. Not at the end of each step of the 'for' loop. Such implementation might lead to overflow of the function's stack and other issues.",
                  "markdown": "Reports `defer` statements inside loops.\n\nUsing `defer` in loops can lead to resource leaks or unpredictable execution order of statements.\n\nExample:\n\n    func main() {\n     for {\n      field, err := db.Query(\"SELECT 1\")\n      if err != nil {\n       // ...\n      }\n      defer field.Close()\n      // ...\n     }\n    }\n\nCalls of `defer row.Close()` inside the loop are not executed until the function completes its execution.\nNot at the end of each step of the `for` loop. Such implementation might lead to overflow of the function's stack and\nother issues."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoDeferInLoop",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Control flow issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoErrorsAs",
                "shortDescription": {
                  "text": "Incorrect usage of the 'errors.As' function"
                },
                "fullDescription": {
                  "text": "Reports calls of the 'errors.As' function when the second argument is not a pointer to an interface or to a type that implements an error. Such calls panic at runtime. For more information about the 'As' function, refer to func As at go.dev. Example: '_, err := os.Open(\"non-existing\")\nvar pathError *fs.PathError\nif errors.As(err, pathError) { // a pointer to *fs.PathError is required\n}' After the Prepend '&' quick-fix is applied: '_, err := os.Open(\"non-existing\")\nvar pathError *fs.PathError\nif errors.As(err, &pathError) {\n}' This inspection only reports if the language version is 1.13 or higher.",
                  "markdown": "Reports calls of the `errors.As` function when the second argument is not a pointer to an interface or to a type that implements an error.\n\nSuch calls panic at runtime.\n\nFor more information about the `As` function, refer to [func As at go.dev](https://pkg.go.dev/errors#As).\n\nExample:\n\n    _, err := os.Open(\"non-existing\")\n    var pathError *fs.PathError\n    if errors.As(err, pathError) { // a pointer to *fs.PathError is required\n    }\n\nAfter the **Prepend '\\&'** quick-fix is applied:\n\n    _, err := os.Open(\"non-existing\")\n    var pathError *fs.PathError\n    if errors.As(err, &pathError) {\n    }\n\nThis inspection only reports if the language version is 1.13 or higher."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoErrorsAs",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoExportedElementShouldHaveComment",
                "shortDescription": {
                  "text": "Exported element should have a comment"
                },
                "fullDescription": {
                  "text": "Reports exported declarations without a documentation comment. According to Doc Comments at github.com/golang, all top-level exported names should have doc comments. Also, for more information about comment sentences, refer to Comment Sentences at github.com/golang. To add a comment, you can apply the Add comment quick-fix.",
                  "markdown": "Reports exported declarations without a documentation comment. According to [Doc Comments at github.com/golang](https://github.com/golang/go/wiki/CodeReviewComments#doc-comments), all top-level exported names should have doc comments.\n\nAlso, for more information about comment sentences, refer to [Comment\nSentences at github.com/golang](https://github.com/golang/go/wiki/CodeReviewComments#comment-sentences).\n\nTo add a comment, you can apply the **Add comment** quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoExportedElementShouldHaveComment",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VgoDependencyDeprecated",
                "shortDescription": {
                  "text": "Deprecated dependency"
                },
                "fullDescription": {
                  "text": "Reports deprecated dependencies. Using deprecated versions can lead to security vulnerabilities, incompatibility issues, inefficiencies, and other risks. To solve a problem, you can follow the migration instructions in the provided deprecation notice or use another dependency. Available quick-fixes may suggest reading the deprecation notice. For more information, refer to Module Deprecation at go.dev. Deprecation data is provided by the command go list -m -u.",
                  "markdown": "Reports deprecated dependencies. Using deprecated versions can lead to security vulnerabilities, incompatibility issues, inefficiencies, and other risks.\n\nTo solve a problem, you can follow the migration instructions in the provided deprecation notice or use another dependency.\n\nAvailable quick-fixes may suggest reading the deprecation notice.\n\n\nFor more information, refer to [Module Deprecation at go.dev](https://go.dev/ref/mod#go-mod-file-module-deprecation).  \n\nDeprecation data is provided by the command [go list -m -u](https://go.dev/ref/mod#go-list-m)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VgoDependencyDeprecated",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go modules/Dependency issues (go list -m -u)",
                      "index": 57,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnusedExportedFunction",
                "shortDescription": {
                  "text": "Unused exported function"
                },
                "fullDescription": {
                  "text": "Reports unused exported functions. In Go, a function is exported if it begins with a capital letter. Names of exported functions that were defined but never used are grayed out. '// Unused exported function\nfunc ExportedUnusedFunc()  {\n\n}\n\nfunc main() {\n fmt.Println(\"Hello\")\n}'",
                  "markdown": "Reports unused exported functions.\n\nIn Go, a function is exported if it begins with a capital letter. Names of exported functions that were defined but never used are\ngrayed out.\n\n    // Unused exported function\n    func ExportedUnusedFunc()  {\n\n    }\n\n    func main() {\n     fmt.Println(\"Hello\")\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnusedExportedFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoExportedFuncWithUnexportedType",
                "shortDescription": {
                  "text": "Unexported return type of the exported function"
                },
                "fullDescription": {
                  "text": "Reports exported functions with unexported return types. Unexported types can be difficult to use when viewing documentation under go doc. Example: 'type hidden struct{}\n\nfunc Exported() hidden { // Exported function with the `hidden` unexported return type\n return hidden{}\n}' You can apply Export quick-fix to export the type. After the quick-fix is applied, type name will be capitalized: 'type Hidden struct{}\n\nfunc Exported() Hidden { // Fixed\n return Hidden{}\n}'",
                  "markdown": "Reports exported functions with unexported return types.\n\nUnexported types can be difficult to use when viewing documentation under **go doc**.\n\nExample:\n\n    type hidden struct{}\n\n    func Exported() hidden { // Exported function with the `hidden` unexported return type\n     return hidden{}\n    }\n\nYou can apply **Export** quick-fix to export the type. After the quick-fix is applied,\ntype name will be capitalized:\n\n    type Hidden struct{}\n\n    func Exported() Hidden { // Fixed\n     return Hidden{}\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoExportedFuncWithUnexportedType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoInfiniteFor",
                "shortDescription": {
                  "text": "Infinite 'for' loop"
                },
                "fullDescription": {
                  "text": "Reports empty 'for' loops. Running this code will make the CPU usage stay at maximum and will make the machine nearly unusable. Example: 'func main() {\n for {\n }\n}'",
                  "markdown": "Reports empty `for` loops.\n\nRunning this code will make the CPU usage stay at maximum and will make the machine nearly unusable.\n\nExample:\n\n    func main() {\n     for {\n     }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoInfiniteFor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Control flow issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnusedConst",
                "shortDescription": {
                  "text": "Unused constant"
                },
                "fullDescription": {
                  "text": "Reports constants that are defined but are never used in code. 'func main() {\n const i = 100\n}' Unlike unused variables and imports, this code will compile. Unused constants might increase your code base and slow down program compilation. To delete the unused constant, consider using the Delete constant quick-fix.",
                  "markdown": "Reports constants that are defined but are never used in code.\n\n    func main() {\n     const i = 100\n    }\n\nUnlike unused variables and imports, this code will compile. Unused constants might increase your code base and\nslow down program compilation. To delete the unused constant, consider using the **Delete constant** quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnusedConst",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnusedFunction",
                "shortDescription": {
                  "text": "Unused function"
                },
                "fullDescription": {
                  "text": "Reports unused unexported functions. In Go, a function is unexported if it begins with a small letter. Names of unexported functions that were defined but never used are grayed out. '// Unused unexported function\nfunc unExportedUnusedFunc()  {\n\n}\n\nfunc main() {\n fmt.Println(\"Hello\")\n}'",
                  "markdown": "Reports unused unexported functions.\n\nIn Go, a function is unexported if it begins with a small letter. Names of unexported functions that were defined but never used are\ngrayed out.\n\n    // Unused unexported function\n    func unExportedUnusedFunc()  {\n\n    }\n\n    func main() {\n     fmt.Println(\"Hello\")\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnusedFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoMissingTrailingComma",
                "shortDescription": {
                  "text": "Missing trailing comma before a newline in a composite literal"
                },
                "fullDescription": {
                  "text": "Reports a missing trailing comma before a newline in composite literals, function call arguments, and function parameter lists. Example: 'func f(f int) (\n int,\n bool   // missing a trailing comma\n){\n println(1, 2  // missing a trailing comma\n )\n}'",
                  "markdown": "Reports a missing trailing comma before a newline in composite literals, function call arguments, and function parameter lists.\n\nExample:\n\n    func f(f int) (\n     int,\n     bool   // missing a trailing comma\n    ){\n     println(1, 2  // missing a trailing comma\n     )\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "GoMissingTrailingComma",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoStringsReplaceCount",
                "shortDescription": {
                  "text": "Incorrect 'strings.Replace' count argument"
                },
                "fullDescription": {
                  "text": "Reports 'strings.Replace' calls with the replace count '0' instead of '-1'. The count argument for how many times a string should be replaced should not be '0' as it will not replace anything and make the function call redundant. Use '-1' instead. Example: 'a := strings.Replace(\"SSS\", \"S\", \"H\", 0) // replaces nothing\nb := strings.Replace(\"SSS\", \"S\", \"H\", -1) // replaces all S occurrences with H'",
                  "markdown": "Reports `strings.Replace` calls with the replace count `0` instead of `-1`.\n\nThe count argument for how many times a string should be replaced should not be `0`\nas it will not replace anything and make the function call redundant. Use `-1` instead.\n\nExample:\n\n    a := strings.Replace(\"SSS\", \"S\", \"H\", 0) // replaces nothing\n    b := strings.Replace(\"SSS\", \"S\", \"H\", -1) // replaces all S occurrences with H\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoStringsReplaceCount",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoTypeParameterInLowerCase",
                "shortDescription": {
                  "text": "Type parameter is declared in lowercase"
                },
                "fullDescription": {
                  "text": "Reports type parameters that are declared in lowercase. Examples in the official Go documentation use type parameters in uppercase. This inspection follows this uppercase rule for type parameters. 'func PrintSlice[t any](s []t) {\n    for _, v := range s{\n        print(v)\n    }\n}' The type parameter 't' is declared in lowercase and thus will be reported.",
                  "markdown": "Reports type parameters that are declared in lowercase.\n\nExamples in the official Go documentation use type parameters in uppercase.\nThis inspection follows this uppercase rule for type parameters.\n\n    func PrintSlice[t any](s []t) {\n        for _, v := range s{\n            print(v)\n        }\n    }\n\nThe type parameter `t` is declared in lowercase and thus will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoTypeParameterInLowerCase",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Code style issues",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnusedCallResult",
                "shortDescription": {
                  "text": "Unused function or method call result"
                },
                "fullDescription": {
                  "text": "Reports calls to certain functions and methods that do not handle a call result. An API of such functions imply that users should call them mostly to get a return value and process it, not for side effects. Calls that do not handle the result could be an indication of a misuse of the API. Example: 'fmt.Errorf(\"error: %s\", reason) // constructed error is ignored' After the Introduce local variable quick-fix is applied: 'err := fmt.Errorf(\"error: %s\", reason)'",
                  "markdown": "Reports calls to certain functions and methods that do not handle a call result.\n\nAn API of such functions imply that users\nshould call them mostly to get a return value and process it, not for side effects. Calls that do not handle the result\ncould be an indication of a misuse of the API.\n\nExample:\n\n    fmt.Errorf(\"error: %s\", reason) // constructed error is ignored\n\nAfter the **Introduce local variable** quick-fix is applied:\n\n    err := fmt.Errorf(\"error: %s\", reason)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnusedCallResult",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnusedType",
                "shortDescription": {
                  "text": "Unused type"
                },
                "fullDescription": {
                  "text": "Reports unused types. 'type user struct {\n FirstName string    `json:\"firstname\"`\n LastName  string    `json:\"lastname\"`\n}\n\nfunc main() {\n \n}' The 'user' type will be grayed out because it is not used anywhere in code.",
                  "markdown": "Reports unused types.\n\n    type user struct {\n     FirstName string    `json:\"firstname\"`\n     LastName  string    `json:\"lastname\"`\n    }\n\n    func main() {\n     \n    }\n\nThe `user` type will be grayed out because it is not used anywhere in code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnusedType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoFuzzingSupport",
                "shortDescription": {
                  "text": "Fuzzing is supported starting with Go 1.18"
                },
                "fullDescription": {
                  "text": "Reports presence of fuzz tests when Go SDK version is less than 1.18 Fuzz testing is a method of automated testing that involves a directed search for input data that may cause a program crash or expose invalid behavior. Go supports fuzz testing starting from Go 1.18. Example of a fuzz test: 'func Div(a, b int) int {\n\treturn a / b\n}\n\nfunc FuzzDiv(f *testing.F) {\n\tf.Fuzz(func(t *testing.T, a, b int) {\n\t\tDiv(a, b) // reports runtime error: integer divide by zero\n\t})\n}' See Go Fuzzing for more information.",
                  "markdown": "Reports presence of fuzz tests when Go SDK version is less than 1.18\n\nFuzz testing is a method of automated testing that involves a directed search for input data that may cause a program crash\nor expose invalid behavior. Go supports fuzz testing starting from Go 1.18.\n\nExample of a fuzz test:\n\n\n    func Div(a, b int) int {\n    \treturn a / b\n    }\n\n    func FuzzDiv(f *testing.F) {\n    \tf.Fuzz(func(t *testing.T, a, b int) {\n    \t\tDiv(a, b) // reports runtime error: integer divide by zero\n    \t})\n    }\n\n\nSee [Go Fuzzing](https://go.dev/doc/fuzz/) for more information."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoFuzzingSupport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/General",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoBoolExpressions",
                "shortDescription": {
                  "text": "Bool condition"
                },
                "fullDescription": {
                  "text": "Reports parts of boolean expressions that are either always 'true', always 'false', or redundant. Such boolean expressions can be simplified, which may improve a readability of the code. In some cases, this also indicates a presence of other issues. Example: 'func isNonZero(x, y int) bool {\n  // the second comparison is either always true\n  // or not executed at all\n  return x > 0 && x > 0\n}' You can apply the Simplify expression quick-fix for the 'x > 0 && x > 0' part. After the quick-fix is applied, the expression looks as follows: 'x > 0'.",
                  "markdown": "Reports parts of boolean expressions that are either always `true`, always `false`, or redundant. Such boolean expressions can be simplified, which may improve a readability of the code. In some cases, this also indicates a presence of other issues.\n\nExample:\n\n    func isNonZero(x, y int) bool {\n      // the second comparison is either always true\n      // or not executed at all\n      return x > 0 && x > 0\n    }\n\nYou can apply the **Simplify expression** quick-fix for the `x > 0 && x > 0` part. After the quick-fix\nis applied, the expression looks as follows: `x > 0`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoBoolExpressions",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoUnusedGlobalVariable",
                "shortDescription": {
                  "text": "Unused global variable"
                },
                "fullDescription": {
                  "text": "Reports global variables that are defined but are never used in code. If you have unused variables, the code will not compile. For more information about unused variables and imports, refer to Unused imports and variables at go.dev. 'func main() {\n a := 422\n}' Code in the example will not compile. Therefore, it is highlighted as an error. You can apply two quick-fixes for such cases: Delete variable and Rename to _. The first quick-fix deletes the variable, the second one will convert the variable to a blank identifier. After the Rename to _ quick-fix is applied: 'func main() {\n _ := 422\n}'",
                  "markdown": "Reports global variables that are defined but are never used in code.\n\nIf you have unused variables, the code will not compile.\nFor more information about unused variables and imports, refer to [Unused imports and\nvariables at go.dev](https://go.dev/doc/effective_go#blank_unused).\n\n    func main() {\n     a := 422\n    }\n\nCode in the example will not compile. Therefore, it is highlighted as an error. You can apply two quick-fixes for such cases:\n**Delete variable** and **Rename to _**. The first quick-fix deletes the variable, the second one will convert the variable to a blank\nidentifier.\n\nAfter the **Rename to _** quick-fix is applied:\n\n    func main() {\n     _ := 422\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoUnusedGlobalVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Declaration redundancy",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoLoopClosure",
                "shortDescription": {
                  "text": "Loop variables captured by the func literal"
                },
                "fullDescription": {
                  "text": "Reports references to loop variables from within 'func' literals in 'defer' and 'go' statements. Such variables might have unexpected values because they are not copied to 'func' literals, and the 'func' literals in 'defer' and 'go' are not executed immediately. For more information about closures and goroutines, refer to What happens with closures running as goroutines? at go.dev. Example: 'for _, v := range []string{\"a\", \"b\", \"c\"} {\n  go func() {\n    fmt.Println(v) // output will likely be `c c c`, not `a b c`\n  }()\n}' After the quick-fix is applied: 'for _, v := range []string{\"a\", \"b\", \"c\"} {\n  v := v // `v` is copied now\n  go func() {\n    fmt.Println(v)\n  }()\n}' Note the analyzer only checks 'defer' and 'go' statements when they are the last statement in the loop body. Otherwise, the analysis might produce false detections.",
                  "markdown": "Reports references to loop variables from within `func` literals in `defer` and `go` statements. Such variables might have unexpected values because they are not copied to `func` literals, and the `func` literals in `defer` and `go` are not executed immediately.\n\nFor more information about closures and goroutines, refer to [What happens\nwith closures running as goroutines? at go.dev](https://go.dev/doc/faq#closures_and_goroutines).\n\nExample:\n\n    for _, v := range []string{\"a\", \"b\", \"c\"} {\n      go func() {\n        fmt.Println(v) // output will likely be `c c c`, not `a b c`\n      }()\n    }\n\nAfter the quick-fix is applied:\n\n    for _, v := range []string{\"a\", \"b\", \"c\"} {\n      v := v // `v` is copied now\n      go func() {\n        fmt.Println(v)\n      }()\n    }\n\nNote the analyzer only checks `defer` and `go` statements when they are the last statement in the loop body.\nOtherwise, the analysis might produce false detections."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoLoopClosure",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoAssignmentToReceiver",
                "shortDescription": {
                  "text": "Assignment to a receiver"
                },
                "fullDescription": {
                  "text": "Reports assignments to method receivers. When you assign a value to the method receiver, the value will not be reflected outside of the method itself. Values will be reflected in subsequent calls from the same method. Example: 'package main\n\nimport \"fmt\"\n\ntype demo struct {\n Val int\n}\n\nfunc (d *demo) change() {\n d = nil // Assignment to the method receiver propagates only to callees but not to callers\n d.myVal()\n}\n\nfunc (d *demo) myVal() {\n fmt.Printf(\"my val: %#v\\n\", d)\n}\n\nfunc (d demo) change2() {\n d = demo{} // Assignment to the method receiver doesn't propagate to other calls\n d.myVal()\n}\n\nfunc (d *demo) change3() {\n d.Val = 3\n d.myVal()\n}\n\nfunc main() {\n d := &demo{}\n d.myVal()\n d.change()\n d.myVal()\n d.Val = 2\n d.change2()\n d.myVal()\n d.change3()\n d.myVal()\n}'",
                  "markdown": "Reports assignments to method receivers.\n\nWhen you assign a value to the method receiver, the value will not be reflected outside of the method itself.\nValues will be reflected in subsequent calls from the same method.\n\nExample:\n\n    package main\n\n    import \"fmt\"\n\n    type demo struct {\n     Val int\n    }\n\n    func (d *demo) change() {\n     d = nil // Assignment to the method receiver propagates only to callees but not to callers\n     d.myVal()\n    }\n\n    func (d *demo) myVal() {\n     fmt.Printf(\"my val: %#v\\n\", d)\n    }\n\n    func (d demo) change2() {\n     d = demo{} // Assignment to the method receiver doesn't propagate to other calls\n     d.myVal()\n    }\n\n    func (d *demo) change3() {\n     d.Val = 3\n     d.myVal()\n    }\n\n    func main() {\n     d := &demo{}\n     d.myVal()\n     d.change()\n     d.myVal()\n     d.Val = 2\n     d.change2()\n     d.myVal()\n     d.change3()\n     d.myVal()\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoAssignmentToReceiver",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Control flow issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoBuildTag",
                "shortDescription": {
                  "text": "Malformed build tag"
                },
                "fullDescription": {
                  "text": "Reports malformed build tags and build tags in the incorrect location. The 'go' tool expects build tags to be located in particular places and follow a special syntax. If these requirements are not followed, build tags could either be ignored or the files could be incorrectly excluded from the build. See Build Constraints at go.dev. Example: 'package main\n\n// +build ignore\n\nfunc main() {}' The '// +build ignore' part should be before the package declaration. To fix that, you can apply the Place build tag before package quick-fix. After the quick-fix is applied: '// +build ignore\n\npackage main\n\nimport \"fmt\"'",
                  "markdown": "Reports malformed build tags and build tags in the incorrect location. The `go` tool expects build tags to be located in particular places and follow a special syntax. If these requirements are not followed, build tags could either be ignored or the files could be incorrectly excluded from the build.\n\nSee [Build Constraints at go.dev](https://pkg.go.dev/go/build#hdr-Build_Constraints).\n\nExample:\n\n    package main\n\n    // +build ignore\n\n    func main() {}\n\nThe `// +build ignore` part should be before the package declaration. To fix that, you can apply\nthe **Place build tag before package** quick-fix. After the quick-fix is applied:\n\n    // +build ignore\n\n    package main\n\n    import \"fmt\"\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GoBuildTag",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Probable bugs",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.sh",
            "version": "242.3350",
            "rules": [
              {
                "id": "ShellCheck",
                "shortDescription": {
                  "text": "ShellCheck"
                },
                "fullDescription": {
                  "text": "Reports shell script bugs detected by the integrated ShellCheck static analysis tool.",
                  "markdown": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ShellCheck",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Shell script",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "242.3350.1153",
            "rules": [
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JsonSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaRefReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownBooleanAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file or the entire project.\n\nThe inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "DuplicatedCode",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InconsistentLineSeparators",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n  private boolean CONST = true;\n  void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n      private boolean CONST = true;\n      void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantSuppression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProblematicWhitespace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix.",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SSBasedInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "Line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the Hard wrap at parameter specified in Settings | Editor | Code Style | General.",
                  "markdown": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LongLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlWrongRootElement",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports contents of 'script' tags that are invalid XML. Example: '<script type=\"text/javascript\">\n    console.log('<');\n  </script>' After the quick-fix is applied: '<script type=\"text/javascript\">\n    console.log('&lt;');\n  </script>'",
                  "markdown": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckValidXmlInScriptTagBody",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSuspiciousBackref",
                "shortDescription": {
                  "text": "Suspicious back reference"
                },
                "fullDescription": {
                  "text": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation. Example of a group defined after its back reference: '\\1(abc)' Example of a group and a back reference in different branches: 'a(b)c|(xy)\\1z' New in 2022.1",
                  "markdown": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSuspiciousBackref",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSingleCharAlternation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports XML elements without contents. Example: '<user>\n    <name></name>\n  </user>' After the quick-fix is applied: '<user>\n    <name/>\n  </user>'",
                  "markdown": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckTagEmptyBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets '[]' of a character class. Although unescaped opening curly braces '{' outside of character classes are allowed in some dialects (JavaScript, Python, and so on), it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters. For this reason the inspection does not report escaped opening curly braces. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' The Ignore escaped closing brackets '}' and ']' option specifies whether to report '\\}' and '\\]' outside of a character class when they are allowed to be unescaped by the RegExp dialect. New in 2017.3",
                  "markdown": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantEscape",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlMissingClosingTag",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomRegExpInspection",
                "shortDescription": {
                  "text": "Custom RegExp inspection"
                },
                "fullDescription": {
                  "text": "Custom Regex Inspection",
                  "markdown": "Custom Regex Inspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CustomRegExpInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectFormatting",
                "shortDescription": {
                  "text": "Incorrect formatting"
                },
                "fullDescription": {
                  "text": "Reports formatting issues that appear if your code doesn't follow your project's code style settings. This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled.",
                  "markdown": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "IncorrectFormatting",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports redundant closing tags on empty elements, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlExtraClosingTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAnchorTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnexpectedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SpellCheckingInspection",
                    "ideaSeverity": "TYPO",
                    "qodanaSeverity": "Low"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckXmlFileWithXercesValidator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpEscapedMetaCharacter",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlHighlighting",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlDuplicatedId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateCharacterInClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlInvalidId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnboundNsPrefix",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RequiredAttributes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedToPlainText",
                "shortDescription": {
                  "text": "Reassigned to plain text"
                },
                "fullDescription": {
                  "text": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically. You can dismiss this warning by removing the file type association in Settings | Editor | File Types | Text.",
                  "markdown": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReassignedToPlainText",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnusedNamespaceDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantClassElement",
                "shortDescription": {
                  "text": "Redundant '\\d', '[:digit:]', or '\\D' class elements"
                },
                "fullDescription": {
                  "text": "Reports redundant '\\d' or '[:digit:]' that are used in one class with '\\w' or '[:word:]' ('\\D' with '\\W') and can be removed. Example: '[\\w\\d]' After the quick-fix is applied: '[\\w]' New in 2022.2",
                  "markdown": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantClassElement",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSimplifiable",
                "shortDescription": {
                  "text": "Regular expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports regular expressions that can be simplified. Example: '[a] xx* [ah-hz]' After the quick-fix is applied: 'a x+ [ahz]' New in 2022.1",
                  "markdown": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpSimplifiable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpEmptyAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection: Option \"Report syntax errors\": report parser-related issues. Option \"Report issues from language-specific annotators\": report issues found by annotators configured for the relevant language. See Custom Language Support: Annotators for details. Option \"Report other highlighting problems\": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See Custom Language Support: Highlighting for details.",
                  "markdown": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection:\n\n* Option \"**Report syntax errors**\": report parser-related issues.\n* Option \"**Report issues from language-specific annotators** \": report issues found by annotators configured for the relevant language. See [Custom Language Support: Annotators](https://plugins.jetbrains.com/docs/intellij/annotator.html) for details.\n* Option \"**Report other highlighting problems** \": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See [Custom Language Support: Highlighting](https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting) for details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Annotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlPathReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnnecessaryNonCapturingGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Enable the Only warn on TODO comments without any details option to only warn on empty TODO comments, that don't provide any description on the task that should be done. Disable to report all TODO comments.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TodoComment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Json5StandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonDuplicatePropertyKeys",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantNestedCharacterClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDeprecatedElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlWrongAttributeValue",
                "shortDescription": {
                  "text": "Wrong attribute value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect HTML attribute value.",
                  "markdown": "Reports an incorrect HTML attribute value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlWrongAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDefaultAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpOctalEscape",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedDefine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaCompliance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDirectory",
                "shortDescription": {
                  "text": "Empty directory"
                },
                "fullDescription": {
                  "text": "Reports empty directories. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Only report empty directories located under a source folder option to have only directories under source roots reported.",
                  "markdown": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyDirectory",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpAnonymousGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckDtdRefs",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that use non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myСollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonAsciiCharacters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved references in XML.",
                  "markdown": "Reports an unresolved references in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlUnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LossyEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRepeatedSpace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example: '# Output directories\n    /out/\n    /target/\n    /out/'",
                  "markdown": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n\n        # Output directories\n        /out/\n        /target/\n        /out/\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IgnoreFileDuplicateEntry",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JsonStandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports empty tags that do not work in some browsers. Example: '<html>\n    <script/>\n  </html>' After the quick-fix is applied: '<html>\n    <script></script>\n  </html>'",
                  "markdown": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckEmptyScriptTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.restClient",
            "version": "242.3350",
            "rules": [
              {
                "id": "HttpRequestRequestSeparatorJsonBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in JSON body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected JSON body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request.",
                  "markdown": "Reports possible requests in injected JSON body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorJsonBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestWhitespaceInsideRequestTargetPath",
                "shortDescription": {
                  "text": "Whitespace in URL in request"
                },
                "fullDescription": {
                  "text": "Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action.",
                  "markdown": "Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestWhitespaceInsideRequestTargetPath",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientUnresolvedAuthId",
                "shortDescription": {
                  "text": "Unresolved Auth identifier"
                },
                "fullDescription": {
                  "text": "Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment.",
                  "markdown": "Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "HttpClientUnresolvedAuthId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestEnvironmentAuthConfigurationValidationInspection",
                "shortDescription": {
                  "text": "Auth configuration validation"
                },
                "fullDescription": {
                  "text": "Reports Auth configuration the following problems in HTTP Client environment files: Missing properties in Auth configuration Auth/Security configuration placed in private environment file",
                  "markdown": "Reports Auth configuration the following problems in HTTP Client environment files:\n\n* Missing properties in Auth configuration\n* Auth/Security configuration placed in private environment file"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestEnvironmentAuthConfigurationValidationInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestContentLengthIsIgnored",
                "shortDescription": {
                  "text": "Redundant 'Content-Length'"
                },
                "fullDescription": {
                  "text": "Reports an explicitly set 'Content-Length' header. The header is redundant because HTTP Client uses the actual request body length.",
                  "markdown": "Reports an explicitly set `Content-Length` header. The header is redundant because HTTP Client uses the actual request body length."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestContentLengthIsIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorXmlBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in HTML/XML body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected XML/HTML body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request.",
                  "markdown": "Reports possible requests in injected XML/HTML body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorXmlBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectHttpHeaderInspection",
                "shortDescription": {
                  "text": "Incorrect HTTP header"
                },
                "fullDescription": {
                  "text": "Reports unknown HTTP headers that do not match any publicly known headers. The quick fix suggests adding the header to the list of custom headers when the Use custom HTTP headers option is enabled. HTTP headers from the list of custom headers will not trigger the inspection.",
                  "markdown": "Reports unknown HTTP headers that do not match any [publicly\nknown headers](https://www.iana.org/assignments/message-headers/message-headers.xml). The quick fix suggests adding the header to the list of custom headers when the **Use custom HTTP headers** option\nis enabled. HTTP headers from the list of custom headers will not trigger the inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncorrectHttpHeaderInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientInappropriateProtocolUsageInspection",
                "shortDescription": {
                  "text": "Inappropriate HTTP Protocol usage"
                },
                "fullDescription": {
                  "text": "Reports inappropriate usage of HTTP protocol keyword, e.g. 'HTTP/2', with non-HTTP method requests. Such a usage will be ignored.",
                  "markdown": "Reports inappropriate usage of HTTP protocol keyword, e.g. `HTTP/2`, with non-HTTP method requests. Such a usage will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpClientInappropriateProtocolUsageInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestPlaceholder",
                "shortDescription": {
                  "text": "'$placeholder' in HTTP Request"
                },
                "fullDescription": {
                  "text": "Reports a '$placeholder' inside a request. A '$placeholder' to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping '/aaaa/*/bbb' will be generated as 'GET localhost/aaaa/{{$placeholder}}/bbb'.",
                  "markdown": "Reports a `$placeholder` inside a request.\n\nA `$placeholder` to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping `/aaaa/*/bbb` will be generated as `GET localhost/aaaa/{{$placeholder}}/bbb`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestPlaceholder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved environment variable"
                },
                "fullDescription": {
                  "text": "Reports variables undeclared in the current environment HTTP Client. Executing requests with undeclared variables probably fail. Consider adding a variable to the environment or selecting an environment with this variable. Inspection doesn't report variables in request bodies, because it can be a valid syntax of the body. Some variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via 'client.global.set' or 'request.variables.set' functions call.",
                  "markdown": "Reports variables undeclared in the current environment HTTP Client.\n\n\nExecuting requests with undeclared variables probably fail.\nConsider adding a variable to the environment or selecting an environment with this variable.\n\nInspection doesn't report variables in request bodies, because it can be a valid syntax of the body.\n\n\nSome variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via\n`client.global.set` or `request.variables.set` functions call."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpClientUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorYamlBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in YAML body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected YAML body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request.",
                  "markdown": "Reports possible requests in injected YAML body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorYamlBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpUrlsUsage",
                "shortDescription": {
                  "text": "Link with unencrypted protocol"
                },
                "fullDescription": {
                  "text": "Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks are dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS, instead. See HTTPS: Difference from HTTP (wikipedia.org).",
                  "markdown": "Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks\nare dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS,\ninstead.\n\nSee [HTTPS: Difference from HTTP (wikipedia.org)](https://en.wikipedia.org/wiki/HTTPS#Difference_from_HTTP)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpUrlsUsage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 56,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "HtmlTools",
            "version": "242.3350",
            "rules": [
              {
                "id": "HtmlRequiredAltAttribute",
                "shortDescription": {
                  "text": "Missing required 'alt' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'alt' attribute in a 'img' or 'applet' tag or in a 'area' element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: H24, H35, H36, H37.",
                  "markdown": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredAltAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlFormInputWithoutLabel",
                "shortDescription": {
                  "text": "Missing associated label"
                },
                "fullDescription": {
                  "text": "Reports a form element ('input', 'textarea', or 'select') without an associated label. Suggests creating a new label. Based on WCAG 2.0: H44.",
                  "markdown": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlFormInputWithoutLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleAttribute",
                "shortDescription": {
                  "text": "Missing required 'title' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing title attribute 'frame', 'iframe', 'dl', and 'a' tags. Suggests adding a title attribute. Based on WCAG 2.0: H33, H40, and H64.",
                  "markdown": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredTitleAttribute",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedTag",
                "shortDescription": {
                  "text": "Obsolete tag"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.",
                  "markdown": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlDeprecatedTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckImageSize",
                "shortDescription": {
                  "text": "Mismatched image size"
                },
                "fullDescription": {
                  "text": "Reports a 'width' and 'height' attribute value of a 'img' tag that is different from the actual width and height of the referenced image.",
                  "markdown": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckImageSize",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredSummaryAttribute",
                "shortDescription": {
                  "text": "Missing required 'summary' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'summary' attribute in a 'table' tag. Suggests adding a'summary' attribute. Based on WCAG 2.0: H73.",
                  "markdown": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredSummaryAttribute",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredLangAttribute",
                "shortDescription": {
                  "text": "Missing required 'lang' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'lang' (or 'xml:lang') attribute in a 'html' tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: H57.",
                  "markdown": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredLangAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlNonExistentInternetResource",
                "shortDescription": {
                  "text": "Unresolved web link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved web link. Works by making network requests in the background.",
                  "markdown": "Reports an unresolved web link. Works by making network requests in the background."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlNonExistentInternetResource",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleElement",
                "shortDescription": {
                  "text": "Missing required 'title' element"
                },
                "fullDescription": {
                  "text": "Reports a missing 'title' element inside a 'head' section. Suggests adding a 'title' element. The title should describe the document. Based on WCAG 2.0: H25.",
                  "markdown": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredTitleElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedAttribute",
                "shortDescription": {
                  "text": "Obsolete attribute"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 attribute.",
                  "markdown": "Reports an obsolete HTML5 attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlDeprecatedAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlPresentationalElement",
                "shortDescription": {
                  "text": "Presentational tag"
                },
                "fullDescription": {
                  "text": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.",
                  "markdown": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlPresentationalElement",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.css",
            "version": "242.3350",
            "rules": [
              {
                "id": "CssInvalidHtmlTagReference",
                "shortDescription": {
                  "text": "Invalid type selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS type selector that matches an unknown HTML element.",
                  "markdown": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidHtmlTagReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCustomPropertyAtRuleDeclaration",
                "shortDescription": {
                  "text": "Invalid @property declaration"
                },
                "fullDescription": {
                  "text": "Reports a missing required syntax, inherits, or initial-value property in a declaration of a custom property.",
                  "markdown": "Reports a missing required [syntax](https://developer.mozilla.org/en-US/docs/web/css/@property/syntax), [inherits](https://developer.mozilla.org/en-US/docs/web/css/@property/inherits), or [initial-value](https://developer.mozilla.org/en-US/docs/web/css/@property/initial-value) property in a declaration of a custom property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidCustomPropertyAtRuleDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidFunction",
                "shortDescription": {
                  "text": "Invalid function"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS function or an incorrect function parameter.",
                  "markdown": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidFunction",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingSemicolon",
                "shortDescription": {
                  "text": "Missing semicolon"
                },
                "fullDescription": {
                  "text": "Reports a missing semicolon at the end of a declaration.",
                  "markdown": "Reports a missing semicolon at the end of a declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssMissingSemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssRedundantUnit",
                "shortDescription": {
                  "text": "Redundant measure unit"
                },
                "fullDescription": {
                  "text": "Reports a measure unit of a zero value where units are not required by the specification. Example: 'width: 0px'",
                  "markdown": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssRedundantUnit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingComma",
                "shortDescription": {
                  "text": "Missing comma in selector list"
                },
                "fullDescription": {
                  "text": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines. Example: 'input /* comma has probably been forgotten */\n.button {\n  margin: 1px;\n}'",
                  "markdown": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssMissingComma",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPropertyValue",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS property value.",
                  "markdown": "Reports an incorrect CSS property value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidPropertyValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssBrowserCompatibilityForProperties",
                "shortDescription": {
                  "text": "Property is incompatible with selected browsers"
                },
                "fullDescription": {
                  "text": "Reports a CSS property that is not supported by the specified browsers. Based on the MDN Compatibility Data.",
                  "markdown": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssBrowserCompatibilityForProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCustomPropertyAtRuleName",
                "shortDescription": {
                  "text": "Invalid @property name"
                },
                "fullDescription": {
                  "text": "Reports an invalid custom property name. Custom property name should be prefixed with two dashes. Example: '@property invalid-property-name {\n  ...\n}\n\n@property --valid-property-name {\n  ...\n}'",
                  "markdown": "Reports an invalid custom property name. Custom property name should be prefixed with two dashes.\n\n**Example:**\n\n\n    @property invalid-property-name {\n      ...\n    }\n\n    @property --valid-property-name {\n      ...\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidCustomPropertyAtRuleName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToHexInspection",
                "shortDescription": {
                  "text": "Color could be replaced with #-hex"
                },
                "fullDescription": {
                  "text": "Reports an 'rgb()', 'hsl()', or other color function. Suggests replacing a color function with an equivalent hexadecimal notation. Example: 'rgb(12, 15, 255)' After the quick-fix is applied: '#0c0fff'.",
                  "markdown": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssConvertColorToHexInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandUnsafely",
                "shortDescription": {
                  "text": "Properties may probably be replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case. For example, 2 properties: 'outline-color' and 'outline-style' may be replaced with a single 'outline'. Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states. In this example, switching to the 'outline' shorthand means that 'outline-width' is also set to its initial value, which is 'medium'. This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.",
                  "markdown": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssReplaceWithShorthandUnsafely",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownUnit",
                "shortDescription": {
                  "text": "Unknown unit"
                },
                "fullDescription": {
                  "text": "Reports an unknown unit.",
                  "markdown": "Reports an unknown unit."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnknownUnit",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidMediaFeature",
                "shortDescription": {
                  "text": "Invalid media feature"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS media feature or an incorrect media feature value.",
                  "markdown": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidMediaFeature",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToRgbInspection",
                "shortDescription": {
                  "text": "Color could be replaced with rgb()"
                },
                "fullDescription": {
                  "text": "Reports an 'hsl()' or 'hwb()' color function or a hexadecimal color notation. Suggests replacing such color value with an equivalent 'rgb()' or 'rgba()' color function. Example: '#0c0fff' After the quick-fix is applied: 'rgb(12, 15, 255)'.",
                  "markdown": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssConvertColorToRgbInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnusedSymbol",
                "shortDescription": {
                  "text": "Unused selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML. Note that complete inspection results are available only when running it via Code | Inspect Code or Code | Analyze Code | Run Inspection by Name. Due to performance reasons, style sheet files are not inspected on the fly.",
                  "markdown": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssUnusedSymbol",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssDeprecatedValue",
                "shortDescription": {
                  "text": "Deprecated value"
                },
                "fullDescription": {
                  "text": "Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent.",
                  "markdown": "Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssDeprecatedValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNonIntegerLengthInPixels",
                "shortDescription": {
                  "text": "Non-integer length in pixels"
                },
                "fullDescription": {
                  "text": "Reports a non-integer length in pixels. Example: 'width: 3.14px'",
                  "markdown": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssNonIntegerLengthInPixels",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidImport",
                "shortDescription": {
                  "text": "Misplaced @import"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@import' statement. According to the specification, '@import' rules must precede all other types of rules, except '@charset' rules.",
                  "markdown": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidAtRule",
                "shortDescription": {
                  "text": "Unknown at-rule"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS at-rule.",
                  "markdown": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidAtRule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedCustomProperty",
                "shortDescription": {
                  "text": "Unresolved custom property"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a custom property among the arguments of the 'var()' function.",
                  "markdown": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnresolvedCustomProperty",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssOverwrittenProperties",
                "shortDescription": {
                  "text": "Overwritten property"
                },
                "fullDescription": {
                  "text": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties. Example: '.foo {\n  margin-bottom: 1px;\n  margin-bottom: 1px; /* duplicates margin-bottom */\n  margin: 0; /* overrides margin-bottom */\n}'",
                  "markdown": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssOverwrittenProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference, for example, an incorrect path in an '@import' statement.",
                  "markdown": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnknownTarget",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNegativeValue",
                "shortDescription": {
                  "text": "Negative property value"
                },
                "fullDescription": {
                  "text": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.",
                  "markdown": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssNegativeValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNoGenericFontName",
                "shortDescription": {
                  "text": "Missing generic font family name"
                },
                "fullDescription": {
                  "text": "Verifies that the 'font-family' property contains a generic font family name as a fallback alternative. Generic font family names are: 'serif', 'sans-serif', 'cursive', 'fantasy', and 'monospace'.",
                  "markdown": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssNoGenericFontName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedClassInComposesRule",
                "shortDescription": {
                  "text": "Unresolved class in 'composes' rule"
                },
                "fullDescription": {
                  "text": "Reports a CSS class reference in the 'composes' rule that cannot be resolved to any valid target. Example: '.className {/* ... */}\n\n  .otherClassName {\n    composes: className;\n  }'",
                  "markdown": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnresolvedClassInComposesRule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCharsetRule",
                "shortDescription": {
                  "text": "Misplaced or incorrect @charset"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@charset' at-rule or an incorrect charset value.",
                  "markdown": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidCharsetRule",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandSafely",
                "shortDescription": {
                  "text": "Properties may be safely replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form. For example, 4 properties: 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' can be safely replaced with a single 'padding' property. Note that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 'padding-xxx' properties in a ruleset) because switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection.",
                  "markdown": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssReplaceWithShorthandSafely",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownProperty",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS property or a property used in a wrong context. Add the unknown property to the 'Custom CSS properties' list to skip validation.",
                  "markdown": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssUnknownProperty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPseudoSelector",
                "shortDescription": {
                  "text": "Invalid pseudo-selector"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS pseudo-class pseudo-element.",
                  "markdown": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidPseudoSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidNestedSelector",
                "shortDescription": {
                  "text": "Invalid nested selector"
                },
                "fullDescription": {
                  "text": "Reports a nested selector starting with an identifier or a functional notation.",
                  "markdown": "Reports a nested selector starting with an identifier or a functional notation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidNestedSelector",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.plugins.dependencyAnalysis",
            "version": "242.3350",
            "rules": [
              {
                "id": "CheckThirdPartySoftwareList",
                "shortDescription": {
                  "text": "Check third party software list"
                },
                "fullDescription": {
                  "text": "Check project for possible problems: user's third party software list does not match the collected project metadata",
                  "markdown": "Check project for possible problems: user's third party software list does not match the collected project metadata"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckThirdPartySoftwareList",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDependencyLicenses",
                "shortDescription": {
                  "text": "Check dependency licenses"
                },
                "fullDescription": {
                  "text": "Check dependencies licenses for possible problems: missing or prohibited licenses, or other compliance issues",
                  "markdown": "Check dependencies licenses for possible problems: missing or prohibited licenses, or other compliance issues"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckDependencyLicenses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckModuleLicenses",
                "shortDescription": {
                  "text": "Check module licenses"
                },
                "fullDescription": {
                  "text": "Check module licenses for possible problems: missing licenses or other compliance issues",
                  "markdown": "Check module licenses for possible problems: missing licenses or other compliance issues"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckModuleLicenses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dependency analysis",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.yaml",
            "version": "242.3350",
            "rules": [
              {
                "id": "YAMLSchemaValidation",
                "shortDescription": {
                  "text": "Validation by JSON Schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified. Scheme example: '{\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeNumberProperty: hello world'",
                  "markdown": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaValidation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLIncompatibleTypes",
                "shortDescription": {
                  "text": "Suspicious type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions. Example: 'myElements:\n  - value1\n  - value2\n  - false # <- reported, because it is a boolean value, while other values are strings'",
                  "markdown": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.\n\n**Example:**\n\n\n    myElements:\n      - value1\n      - value2\n      - false # <- reported, because it is a boolean value, while other values are strings\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLIncompatibleTypes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnresolvedAlias",
                "shortDescription": {
                  "text": "Unresolved alias"
                },
                "fullDescription": {
                  "text": "Reports unresolved aliases in YAML files. Example: 'some_key: *unknown_alias'",
                  "markdown": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLUnresolvedAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated YAML key"
                },
                "fullDescription": {
                  "text": "Reports deprecated keys in YAML files. Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file. Note that the deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard 'deprecationMessage' extension. Scheme deprecation example: '{\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeDeprecatedProperty: some value'",
                  "markdown": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLRecursiveAlias",
                "shortDescription": {
                  "text": "Recursive alias"
                },
                "fullDescription": {
                  "text": "Reports recursion in YAML aliases. Alias can't be recursive and be used inside the data referenced by a corresponding anchor. Example: 'some_key: &some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor'",
                  "markdown": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLRecursiveAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLDuplicatedKeys",
                "shortDescription": {
                  "text": "Duplicated YAML keys"
                },
                "fullDescription": {
                  "text": "Reports duplicated keys in YAML files. Example: 'same_key: some value\n  same_key: another value'",
                  "markdown": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLDuplicatedKeys",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnusedAnchor",
                "shortDescription": {
                  "text": "Unused anchor"
                },
                "fullDescription": {
                  "text": "Reports unused anchors. Example: 'some_key: &some_anchor\n    key1: value1'",
                  "markdown": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLUnusedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.security.package-checker",
            "version": "242.3350",
            "rules": [
              {
                "id": "GoVulnerableCodeUsages",
                "shortDescription": {
                  "text": "Vulnerable API usage"
                },
                "fullDescription": {
                  "text": "Reports usages of Vulnerable APIs of imported dependencies. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. Vulnerability data provided by Checkmarx (c).",
                  "markdown": "Reports usages of Vulnerable APIs of imported dependencies.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nVulnerability data provided by [Checkmarx](https://checkmarx.com/) (c)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoVulnerableCodeUsages",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go/Security",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VulnerableLibrariesLocal",
                "shortDescription": {
                  "text": "Vulnerable declared dependency"
                },
                "fullDescription": {
                  "text": "Reports vulnerabilities in Gradle, Maven, NPM and PyPI dependencies declared in your project. A full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. The quick-fixes available may suggest updating to a safe version or visiting the Checkmarx website to learn more about a particular vulnerability. Vulnerability data provided by Checkmarx (c).",
                  "markdown": "Reports vulnerabilities in Gradle, Maven, NPM and PyPI dependencies declared in your project.\nA full list of Gradle and Maven dependencies is shown in the Project tool window under External Libraries.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nThe quick-fixes available may suggest updating to a safe version or visiting the Checkmarx website to learn more about a particular vulnerability.\n\nVulnerability data provided by [Checkmarx](https://checkmarx.com/) (c)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VulnerableLibrariesLocal",
                    "cweIds": [
                      1395
                    ],
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 56,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NpmVulnerableApiCode",
                "shortDescription": {
                  "text": "Vulnerable API usage"
                },
                "fullDescription": {
                  "text": "Reports usages of Vulnerable APIs of imported dependencies. Fixing the reported problems helps prevent your software from being compromised by an attacker. To solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability. Vulnerability data provided by Checkmarx (c).",
                  "markdown": "Reports usages of Vulnerable APIs of imported dependencies.\n\nFixing the reported problems helps prevent your software from being compromised by an attacker.\n\nTo solve a problem, you can update to a version where the vulnerability is fixed (if available) or switch to a dependency that doesn't have the vulnerability.\n\nVulnerability data provided by [Checkmarx](https://checkmarx.com/) (c)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NpmVulnerableApiCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Security",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "242.3350",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example: '@Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist'",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n\n        @Language(\"file-reference\")\n        String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "InjectedReferences",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.go-template",
            "version": "242.3350",
            "rules": [
              {
                "id": "GoTemplateUnknownVariable",
                "shortDescription": {
                  "text": "Unknown variable"
                },
                "fullDescription": {
                  "text": "Reports usages of unknown variables in Go Templates. Parsing of such templates will cause panic because variables must be declared before usage. Example: '{{$v}} is zero. {{/* bad, $v is unknown */}}\n{{$v := 0}}{{$v}} is zero. {{/* good */}}'",
                  "markdown": "Reports usages of unknown variables in Go Templates.\n\nParsing of such templates will cause panic because variables must be declared before usage.\n\nExample:\n\n    {{$v}} is zero. {{/* bad, $v is unknown */}}\n    {{$v := 0}}{{$v}} is zero. {{/* good */}}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "GoTemplateUnknownVariable",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go Template/General",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GoTemplateDuplicateVariable",
                "shortDescription": {
                  "text": "Duplicate variable"
                },
                "fullDescription": {
                  "text": "Reports duplicate Go Template variables that are declared in the same scope. Duplicating a variable reassigns the existing variable with the same name. This operation might lead to different unpredicatable issues. Example: '{{$v := 0}}{{$v := 1}}{{$v}} is 0. {{/* evaluates to '1 is 0' */}}\n{{$v := 0}}{{$w := 1}}{{$v}} is 0. {{/* works as expected */}}'",
                  "markdown": "Reports duplicate Go Template variables that are declared in the same scope.\n\nDuplicating a variable reassigns the existing variable with the same name. This operation might lead to different\nunpredicatable issues.\n\nExample:\n\n    {{$v := 0}}{{$v := 1}}{{$v}} is 0. {{/* evaluates to '1 is 0' */}}\n    {{$v := 0}}{{$w := 1}}{{$v}} is 0. {{/* works as expected */}}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "GoTemplateDuplicateVariable",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Go Template/General",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.qodana",
            "version": "242.3350",
            "rules": [
              {
                "id": "GoCoverageInspection",
                "shortDescription": {
                  "text": "Check GO source code coverage"
                },
                "fullDescription": {
                  "text": "Reports methods and files whose coverage is below a certain threshold.",
                  "markdown": "Reports methods and files whose coverage is below a certain threshold."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GoCoverageInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Coverage",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "QodanaSanity",
                "shortDescription": {
                  "text": "Sanity"
                },
                "fullDescription": {
                  "text": "Reports issues essential to this file like syntax errors, unresolved methods and variables, etc...",
                  "markdown": "Reports issues essential to this file like syntax errors, unresolved methods and variables, etc..."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "QodanaSanity",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Qodana",
                      "index": 59,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tanvd.grazi",
            "version": "242.3350",
            "rules": [
              {
                "id": "LanguageDetectionInspection",
                "shortDescription": {
                  "text": "Natural language detection"
                },
                "fullDescription": {
                  "text": "Detects natural languages and suggests enabling corresponding grammar and spelling checks.",
                  "markdown": "Detects natural languages and suggests enabling corresponding grammar and spelling checks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LanguageDetectionInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GrazieInspection",
                "shortDescription": {
                  "text": "Grammar"
                },
                "fullDescription": {
                  "text": "Reports grammar mistakes in your text. You can configure the inspection in Settings | Editor | Natural Languages | Grammar.",
                  "markdown": "Reports grammar mistakes in your text. You can configure the inspection in [Settings \\| Editor \\| Natural Languages \\| Grammar](settings://reference.settingsdialog.project.grazie)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GrazieInspection",
                    "ideaSeverity": "GRAMMAR_ERROR",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDGO"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "startTimeUtc": "2024-03-18T11:26:23.476180789Z",
          "exitCode": 0,
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "https://github.com/JetBrains/qodana-cli.git",
          "revisionId": "94e97e52d2d0e375ed4cbefea1e87aa64beeec29",
          "branch": "refs/heads/main",
          "properties": {
            "repoUrl": "https://github.com/JetBrains/qodana-cli",
            "lastAuthorName": "Johannes Koenen",
            "vcsType": "Git",
            "lastAuthorEmail": "johannes.koenen@jetbrains.com"
          }
        }
      ],
      "results": [
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in noCache)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in noCache)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 8,
                  "charOffset": 8367,
                  "charLength": 46,
                  "snippet": {
                    "text": "func(w http.ResponseWriter, r *http.Request) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 288,
                  "startColumn": 1,
                  "charOffset": 8331,
                  "charLength": 146,
                  "snippet": {
                    "text": "\t\t\"X-Accel-Expires\": \"0\",\n\t}\n\tfn := func(w http.ResponseWriter, r *http.Request) {\n\t\tfor _, x := range etagHeaders {\n\t\t\tif r.Header.Get(x) != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2c09321597260491",
            "equalIndicator/v1": "01f2febf4eb03f1773b3369b930070089266c0255e188ab6365acb632dfb2fa2"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'QodanaLogo' coverage is below the threshold 50%",
            "markdown": "Method `QodanaLogo` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 6,
                  "charOffset": 1809,
                  "charLength": 10,
                  "snippet": {
                    "text": "QodanaLogo"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1750,
                  "charLength": 160,
                  "snippet": {
                    "text": "\n// QodanaLogo prepares the info message for the tool\nfunc QodanaLogo(toolDesc string, version string) string {\n\treturn fmt.Sprintf(`\n          _              _"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c8b3948b378a8e0a",
            "equalIndicator/v1": "01f7e2b8f66172a3af70b42bd5ed2997270c2f7a4aaa76476d56bc0846238c06"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'token.go' coverage is below the threshold 50%",
            "markdown": "File `token.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d8f71feb9308c521",
            "equalIndicator/v1": "02102ce73db79e3ad848368b4b3087beb085d286a0ef8455f96c11c6a39d50cf"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'JobUrl' coverage is below the threshold 50%",
            "markdown": "Method `JobUrl` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 6,
                  "charOffset": 7266,
                  "charLength": 6,
                  "snippet": {
                    "text": "JobUrl"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 263,
                  "startColumn": 1,
                  "charOffset": 7258,
                  "charLength": 63,
                  "snippet": {
                    "text": "}\n\nfunc JobUrl() string {\n\treturn os.Getenv(\"QODANA_JOB_URL\")\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bc58bff87217b35d",
            "equalIndicator/v1": "0412d9ee88745c84aabd431f5116ea987ac1b179d89b17efeb5b9e5fd58f7a88"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Decompress' coverage is below the threshold 50%",
            "markdown": "Method `Decompress` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 6,
                  "charOffset": 3245,
                  "charLength": 10,
                  "snippet": {
                    "text": "Decompress"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 3237,
                  "charLength": 156,
                  "snippet": {
                    "text": "}\n\nfunc Decompress(archivePath string, destPath string) error {\n\tisZip := strings.HasSuffix(archivePath, \".zip\")\n\tif //goland:noinspection GoBoolExpressions"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "94dfad99e36caa8e",
            "equalIndicator/v1": "055df052dfa458ccba69ce386af0753e593986bc929d48cad88b85344dceb1e5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'IsEmpty for receiver with type DotNet' coverage is below the threshold 50%",
            "markdown": "Method `IsEmpty for receiver with type DotNet` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 17,
                  "charOffset": 11843,
                  "charLength": 7,
                  "snippet": {
                    "text": "IsEmpty"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 337,
                  "startColumn": 1,
                  "charOffset": 11760,
                  "charLength": 145,
                  "snippet": {
                    "text": "\n// IsEmpty checks whether the .NET configuration is empty or not.\nfunc (d DotNet) IsEmpty() bool {\n\treturn d.Solution == \"\" && d.Project == \"\"\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "22a123d789a5e625",
            "equalIndicator/v1": "06158b87fcd6809472ee96ac4ca1f532edea9f801d82433e89a099e933dc7234"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetDeviceIdSalt' coverage is below the threshold 50%",
            "markdown": "Method `GetDeviceIdSalt` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 6,
                  "charOffset": 3046,
                  "charLength": 15,
                  "snippet": {
                    "text": "GetDeviceIdSalt"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 2958,
                  "charLength": 178,
                  "snippet": {
                    "text": "\n// GetDeviceIdSalt set consistent device.id based on given repo upstream #SA-391.\nfunc GetDeviceIdSalt() []string {\n\tsalt := os.Getenv(\"SALT\")\n\tdeviceId := os.Getenv(\"DEVICEID\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "98d9614939a4a668",
            "equalIndicator/v1": "0701c22cabe0568fa1f8db6abdcd6ae4537eb0c44a20d8f1bf209abec6cba5e0"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Sort)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Sort)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 35,
                  "charOffset": 13850,
                  "charLength": 21,
                  "snippet": {
                    "text": "func(i, j int) bool {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 400,
                  "startColumn": 1,
                  "charOffset": 13727,
                  "charLength": 231,
                  "snippet": {
                    "text": "\t\treturn Lower(q.DependencyOverrides[i].Name) < Lower(q.DependencyOverrides[j].Name)\n\t})\n\tsort.Slice(q.CustomDependencies, func(i, j int) bool {\n\t\treturn Lower(q.CustomDependencies[i].Name) < Lower(q.CustomDependencies[j].Name)\n\t})"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "56f4c7f0add8290d",
            "equalIndicator/v1": "08899429443c8e069f975226211d6075fb7c0a7abbcc15e9fda29a35698cb751"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'InfoString' coverage is below the threshold 50%",
            "markdown": "Method `InfoString` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 6,
                  "charOffset": 1171,
                  "charLength": 10,
                  "snippet": {
                    "text": "InfoString"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1078,
                  "charLength": 160,
                  "snippet": {
                    "text": "\n// InfoString Two newlines at the start are important to lay the output nicely in CLI.\nfunc InfoString(version string) string {\n\treturn fmt.Sprintf(`\n  %s (%s)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "798d14aa63ef46e5",
            "equalIndicator/v1": "0af649020bf12ef0d688ebc511def27fe47d891d9fc8e0917d214987b4cd0efa"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'SetQodanaLinter' coverage is below the threshold 50%",
            "markdown": "Method `SetQodanaLinter` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 6,
                  "charOffset": 14305,
                  "charLength": 15,
                  "snippet": {
                    "text": "SetQodanaLinter"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 414,
                  "startColumn": 1,
                  "charOffset": 14239,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n// SetQodanaLinter adds the linter to the qodana.yaml file.\nfunc SetQodanaLinter(path string, linter string, filename string) {\n\tq := LoadQodanaYaml(path, filename)\n\tif q.Version == \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0776f21cc9324155",
            "equalIndicator/v1": "0b4936c68f73c977b520aaccd6eb5a63e8793eb088f3d3530cd38d3c01b3cb15"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'printHeader' coverage is below the threshold 50%",
            "markdown": "Method `printHeader` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 6,
                  "charOffset": 6464,
                  "charLength": 11,
                  "snippet": {
                    "text": "printHeader"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 198,
                  "startColumn": 1,
                  "charOffset": 6404,
                  "charLength": 221,
                  "snippet": {
                    "text": "\n// printHeader prints the header of the problem/file.\nfunc printHeader(level string, ruleId string, file string) {\n\twidth := getTerminalWidth()\n\tfmt.Printf(\"%s %s\\n\", PrimaryBold(strings.ToUpper(level)), Primary(ruleId))"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0c3ba7398a0dc16e",
            "equalIndicator/v1": "0c52abb131580051a606a5f22ba68d5e5b4b5490a577f02d5745534bc7f26e95"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getTempDir' coverage is below the threshold 50%",
            "markdown": "Method `getTempDir` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 6,
                  "charOffset": 3097,
                  "charLength": 10,
                  "snippet": {
                    "text": "getTempDir"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 3089,
                  "charLength": 107,
                  "snippet": {
                    "text": "}\n\nfunc getTempDir() (string, error) {\n\ttmpDir, err := os.MkdirTemp(\"\", \"qodana-platform\")\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "22b41780a1a0ae48",
            "equalIndicator/v1": "0e912d6226ee02c8e83c0ae324c794fb9f26ef888a4dce2ddc993fce58444675"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'AppendToFile' coverage is below the threshold 50%",
            "markdown": "Method `AppendToFile` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/fileops.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 6,
                  "charOffset": 969,
                  "charLength": 12,
                  "snippet": {
                    "text": "AppendToFile"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 923,
                  "charLength": 190,
                  "snippet": {
                    "text": "\n// AppendToFile appends text to a file.\nfunc AppendToFile(filename string, text string) error {\n\tf, err := os.OpenFile(filename, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0o644)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b0c7c8592959d115",
            "equalIndicator/v1": "0f55e19dfc44f2aa26c83774a9dc961e9c0cfc4fc46d8ff2d8b05c5815e8aec0"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'IsContainer' coverage is below the threshold 50%",
            "markdown": "Method `IsContainer` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 6,
                  "charOffset": 3676,
                  "charLength": 11,
                  "snippet": {
                    "text": "IsContainer"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 148,
                  "startColumn": 1,
                  "charOffset": 3611,
                  "charLength": 128,
                  "snippet": {
                    "text": "\n// IsContainer checks if Qodana is running in a container.\nfunc IsContainer() bool {\n\treturn os.Getenv(QodanaDockerEnv) != \"\"\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ade2ce3d4b728675",
            "equalIndicator/v1": "0f75574b73e488feab850c565032d95062bef7d0ef6ca8272a322ab28dce4fe6"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'AskUserConfirm' coverage is below the threshold 50%",
            "markdown": "Method `AskUserConfirm` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/cli.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "charOffset": 1041,
                  "charLength": 14,
                  "snippet": {
                    "text": "AskUserConfirm"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 973,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n// AskUserConfirm asks the user for confirmation with yes/no.\nfunc AskUserConfirm(what string) bool {\n\tif !IsInteractive() {\n\t\treturn false"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a8ed6d0a95525781",
            "equalIndicator/v1": "0ffd59a905970428c27583905b95dd1157e26b0c45caadafa242e127740ee9b4"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Sort)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Sort)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 379,
                  "startColumn": 25,
                  "charOffset": 12950,
                  "charLength": 21,
                  "snippet": {
                    "text": "func(i, j int) bool {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 377,
                  "startColumn": 1,
                  "charOffset": 12849,
                  "charLength": 189,
                  "snippet": {
                    "text": "// Sort makes QodanaYaml prettier.\nfunc (q *QodanaYaml) Sort() *QodanaYaml {\n\tsort.Slice(q.Includes, func(i, j int) bool {\n\t\treturn Lower(q.Includes[i].Name) < Lower(q.Includes[j].Name)\n\t})"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f7536b9151081d67",
            "equalIndicator/v1": "102563d458bd46759bbd59738cd152413cf945338095849c345da14908a78039"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetVersionDetails' coverage is below the threshold 50%",
            "markdown": "Method `GetVersionDetails` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarifVersioning.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "charOffset": 838,
                  "charLength": 17,
                  "snippet": {
                    "text": "GetVersionDetails"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 747,
                  "charLength": 240,
                  "snippet": {
                    "text": "\n// GetVersionDetails returns the version control details for the current repository.\nfunc GetVersionDetails(pwd string) (sarif.VersionControlDetails, error) {\n\tret := sarif.VersionControlDetails{}\n\tif os.Getenv(\"QODANA_REMOTE_URL\") != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e0bb7540a7f034fa",
            "equalIndicator/v1": "10cc75fe3468aadf34b1ffdfdc3b3e4bd0f4c48a59d87b4f3de8f4ba6d6f7697"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'send.go' coverage is below the threshold 50%",
            "markdown": "File `send.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/send.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9b674d43b478dd7e",
            "equalIndicator/v1": "12a758986ab13c95f908265283637e5328b4ca0b86947de13ab4d08da262729f"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'ide.go' coverage is below the threshold 50%",
            "markdown": "File `ide.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "450dfa18390575b9",
            "equalIndicator/v1": "134585f1d168da8f07cebf31858640476b07d885c87f6d10a30e280763dc3415"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getLastAuthorName' coverage is below the threshold 50%",
            "markdown": "Method `getLastAuthorName` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarifVersioning.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 6,
                  "charOffset": 2813,
                  "charLength": 17,
                  "snippet": {
                    "text": "getLastAuthorName"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 2805,
                  "charLength": 166,
                  "snippet": {
                    "text": "}\n\nfunc getLastAuthorName(pwd string) string {\n\tname, _, ret, err := RunCmdRedirectOutput(pwd, \"git\", \"log\", \"-1\", \"--pretty=format:%an\")\n\tif err != nil || ret != 0 {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4b930c93853abd4c",
            "equalIndicator/v1": "15195e79d500565fc7961469d9d0ca7c058eeabe1ac143a2d01b0808d1ec9235"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'PrintFile' coverage is below the threshold 50%",
            "markdown": "Method `PrintFile` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 6,
                  "charOffset": 5700,
                  "charLength": 9,
                  "snippet": {
                    "text": "PrintFile"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 171,
                  "startColumn": 1,
                  "charOffset": 5621,
                  "charLength": 165,
                  "snippet": {
                    "text": "\n// PrintFile prints the given file content with lines like printProblem.\nfunc PrintFile(file string) {\n\tprintHeader(\"\", \"\", file)\n\tcontent, err := os.ReadFile(file)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "74377d4e9a9f0bb1",
            "equalIndicator/v1": "15a3fe73022cc1a57004dfa5534204ac1fdeaceee2f37811b2067b64a8151fdd"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'WriteReport' coverage is below the threshold 50%",
            "markdown": "Method `WriteReport` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 6,
                  "charOffset": 2253,
                  "charLength": 11,
                  "snippet": {
                    "text": "WriteReport"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2245,
                  "charLength": 169,
                  "snippet": {
                    "text": "}\n\nfunc WriteReport(path string, finalReport *sarif.Report) error {\n\t// serialize object skipping empty fields\n\tfatBytes, err := json.MarshalIndent(finalReport, \"\", \" \")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1e09e403835c30a0",
            "equalIndicator/v1": "162c3f5c5553dc371f0fd5a19de3e2720f6e9ccc15554ee2f3a9b569128a346b"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'unpackZip' coverage is below the threshold 50%",
            "markdown": "Method `unpackZip` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 6,
                  "charOffset": 3682,
                  "charLength": 9,
                  "snippet": {
                    "text": "unpackZip"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 134,
                  "startColumn": 1,
                  "charOffset": 3619,
                  "charLength": 189,
                  "snippet": {
                    "text": "\n// unpackZip unpacks zip archive to the destination path\nfunc unpackZip(archivePath string, destPath string) (error, bool) {\n\tzipReader, err := zip.OpenReader(archivePath)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "63d60abe19f7238b",
            "equalIndicator/v1": "184cee8c909b68e9c313247c2310797ddcb9b10740f8993203dd7d656fbe9ab9"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'utils.go' coverage is below the threshold 50%",
            "markdown": "File `utils.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3dffba3ff6c2915d",
            "equalIndicator/v1": "19f76947a9d3264c37d00a32e0b4095a69d8836ec19fa80eba156b793542c418"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'spin' coverage is below the threshold 50%",
            "markdown": "Method `spin` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 6,
                  "charOffset": 4812,
                  "charLength": 4,
                  "snippet": {
                    "text": "spin"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 4720,
                  "charLength": 225,
                  "snippet": {
                    "text": "\n// spin creates spinner and runs the given function. Also, spin is a spider in Dutch.\nfunc spin(fun func(spinner *pterm.SpinnerPrinter), message string) error {\n\tspinner, _ := StartQodanaSpinner(message)\n\tif spinner == nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d06f8b24ef37712",
            "equalIndicator/v1": "1ae8f0d8c685e200af15d8d7536841a7be8f977335fa913dbbc2487940dea471"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'isInstalled' coverage is below the threshold 50%",
            "markdown": "Method `isInstalled` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 6,
                  "charOffset": 1576,
                  "charLength": 11,
                  "snippet": {
                    "text": "isInstalled"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1527,
                  "charLength": 112,
                  "snippet": {
                    "text": "\n// isInstalled checks if git is installed.\nfunc isInstalled(what string) bool {\n\thelp := \"\"\n\tif what == \"git\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "81c51bbe9d9b2bd6",
            "equalIndicator/v1": "1dd8f8b71e94e53edc8f6e756bcc2bac60c38f4a9f6b3456dcd6d9388427b534"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'git.go' coverage is below the threshold 50%",
            "markdown": "File `git.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0690b0d230f18109",
            "equalIndicator/v1": "1feb9ce7ee91c00e259addd63aa52c78c096265277a25e56a27a35e40208bbbe"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Sort)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Sort)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 25,
                  "charOffset": 13063,
                  "charLength": 21,
                  "snippet": {
                    "text": "func(i, j int) bool {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 380,
                  "startColumn": 1,
                  "charOffset": 12972,
                  "charLength": 179,
                  "snippet": {
                    "text": "\t\treturn Lower(q.Includes[i].Name) < Lower(q.Includes[j].Name)\n\t})\n\tsort.Slice(q.Excludes, func(i, j int) bool {\n\t\treturn Lower(q.Excludes[i].Name) < Lower(q.Excludes[j].Name)\n\t})"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "84427bb65a44c0b5",
            "equalIndicator/v1": "21da1a5f79b1e65d4a3d3aac88d4191ef143f6618a73b5f8c4a007a5c5c6eed4"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in sendFuserEvents)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in sendFuserEvents)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/statistics.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 8,
                  "charOffset": 1970,
                  "charLength": 18,
                  "snippet": {
                    "text": "func(f *os.File) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 74,
                  "startColumn": 1,
                  "charOffset": 1959,
                  "charLength": 66,
                  "snippet": {
                    "text": "\t}\n\n\tdefer func(f *os.File) {\n\t\terr := f.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4807f3021a0c7008",
            "equalIndicator/v1": "230022b7e1e9ea1d1aef93c8b24dc920c04761a3b01dcc391bc6f53ac48b6921"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'InitWithCustomCommands' coverage is below the threshold 50%",
            "markdown": "Method `InitWithCustomCommands` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/root.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 6,
                  "charOffset": 3614,
                  "charLength": 22,
                  "snippet": {
                    "text": "InitWithCustomCommands"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 123,
                  "startColumn": 1,
                  "charOffset": 3540,
                  "charLength": 164,
                  "snippet": {
                    "text": "\n// InitWithCustomCommands adds custom commands to the root command.\nfunc InitWithCustomCommands(commands []*cobra.Command) {\n\trootCommand.AddCommand(commands...)\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9a7931088ed84ef1",
            "equalIndicator/v1": "234f2dbb86b63e073ed739b804a102c429c6e5fddcd9a7d8a67ebe3a2ec2171a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'FindFiles' coverage is below the threshold 50%",
            "markdown": "Method `FindFiles` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 6,
                  "charOffset": 1830,
                  "charLength": 9,
                  "snippet": {
                    "text": "FindFiles"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 76,
                  "startColumn": 1,
                  "charOffset": 1727,
                  "charLength": 260,
                  "snippet": {
                    "text": "\n// FindFiles returns a slice of files with the given extensions from the given root (recursive).\nfunc FindFiles(root string, extensions []string) []string {\n\tvar files []string\n\terr := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c7b65659a1d5312a",
            "equalIndicator/v1": "2359ddbacc4820273ace0ced9221b62f62e7ae7a581e841c29ea37ded5a72a08"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetLinterInfo' coverage is below the threshold 50%",
            "markdown": "Method `GetLinterInfo` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/clioptions.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 25,
                  "charOffset": 1943,
                  "charLength": 13,
                  "snippet": {
                    "text": "GetLinterInfo"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 1916,
                  "charLength": 124,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) GetLinterInfo() *LinterInfo {\n\tlinterOpts := o.GetLinterSpecificOptions()\n\tif linterOpts != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1e7524c9ef1192aa",
            "equalIndicator/v1": "23997685c71b8a4782dbe503afe695ac3733e947ed8ab8d6470203d6250d7b2f"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'fileops.go' coverage is below the threshold 50%",
            "markdown": "File `fileops.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/fileops.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dbbad00def4dfb2f",
            "equalIndicator/v1": "23bce5756a7781a0d7e9c0b962d93355304ed44ddc09317c489e81006cd8f469"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getPlanMessage' coverage is below the threshold 50%",
            "markdown": "Method `getPlanMessage` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 6,
                  "charOffset": 2253,
                  "charLength": 14,
                  "snippet": {
                    "text": "getPlanMessage"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 73,
                  "startColumn": 1,
                  "charOffset": 2184,
                  "charLength": 173,
                  "snippet": {
                    "text": "\n// getPlanMessage returns a message with the cost of the plan.\nfunc getPlanMessage(plan string, cost int, contributors int) string {\n\tvar costMessage string\n\tif cost == 0 {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a62328fa2b199ede",
            "equalIndicator/v1": "24132f2c2302c6b755295eb95eeb0d5a0c351e4f9995fa2272e0b2b375ed6ad7"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Sort)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Sort)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 34,
                  "charOffset": 13563,
                  "charLength": 21,
                  "snippet": {
                    "text": "func(i, j int) bool {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 394,
                  "startColumn": 1,
                  "charOffset": 13522,
                  "charLength": 147,
                  "snippet": {
                    "text": "\t\t})\n\t}\n\tsort.Slice(q.DependencyIgnores, func(i, j int) bool {\n\t\treturn Lower(q.DependencyIgnores[i].Name) < Lower(q.DependencyIgnores[j].Name)\n\t})"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b3a2527304be510d",
            "equalIndicator/v1": "2448c283a3335cd7a65bac6c74660de8917eeae961351b45fa0844b695f6f605"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ReadReport' coverage is below the threshold 50%",
            "markdown": "Method `ReadReport` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 6,
                  "charOffset": 5524,
                  "charLength": 10,
                  "snippet": {
                    "text": "ReadReport"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "charOffset": 5516,
                  "charLength": 98,
                  "snippet": {
                    "text": "}\n\nfunc ReadReport(file string) (*sarif.Report, error) {\n\tf, err := os.Open(file)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6cf4fd138311377c",
            "equalIndicator/v1": "257480353ebc06f411ef44a931485b474372cb2a2861138b601e22d2a219c2f5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in GetAnalyzer)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in GetAnalyzer)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 15,
                  "charOffset": 2655,
                  "charLength": 31,
                  "snippet": {
                    "text": "func(_ *pterm.SpinnerPrinter) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 84,
                  "startColumn": 1,
                  "charOffset": 2561,
                  "charLength": 185,
                  "snippet": {
                    "text": "func GetAnalyzer(path string, yamlName string) string {\n\tvar analyzers []string\n\tPrintProcess(func(_ *pterm.SpinnerPrinter) {\n\t\tlanguages := readIdeaDir(path)\n\t\tif len(languages) == 0 {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "720f2c1483216791",
            "equalIndicator/v1": "26d795562d4613f85aeeb61364156f2e41119e70bfcd6ac65dff2dcb02699aed"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'newSendCommand' coverage is below the threshold 50%",
            "markdown": "Method `newSendCommand` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/send.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "charOffset": 888,
                  "charLength": 14,
                  "snippet": {
                    "text": "newSendCommand"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 820,
                  "charLength": 163,
                  "snippet": {
                    "text": "\n// newShowCommand returns a new instance of the show command.\nfunc newSendCommand() *cobra.Command {\n\toptions := &platform.QodanaOptions{}\n\tcmd := &cobra.Command{"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "325a1414eb63a253",
            "equalIndicator/v1": "26e0e2c3d2909bf5e812ec4b8ed9adad7d2d7707243b07d53fb99945bdd52e5c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'mount.go' coverage is below the threshold 50%",
            "markdown": "File `mount.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/mount.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6278a6b616afcc44",
            "equalIndicator/v1": "287885de4c49497f85e077f6f5e8fd6b8b71643b9f549701758ac977196045e9"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetAnalyzer' coverage is below the threshold 50%",
            "markdown": "Method `GetAnalyzer` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 6,
                  "charOffset": 2566,
                  "charLength": 11,
                  "snippet": {
                    "text": "GetAnalyzer"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2493,
                  "charLength": 193,
                  "snippet": {
                    "text": "\n// GetAnalyzer gets linter for the given path and saves configName\nfunc GetAnalyzer(path string, yamlName string) string {\n\tvar analyzers []string\n\tPrintProcess(func(_ *pterm.SpinnerPrinter) {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5d43f7f845919567",
            "equalIndicator/v1": "28c00f2bbec646ad4736c987b4fddf4255aeee12cbfb0b302dcdf96b655c68ff"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Lower' coverage is below the threshold 50%",
            "markdown": "Method `Lower` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 6,
                  "charOffset": 878,
                  "charLength": 5,
                  "snippet": {
                    "text": "Lower"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 832,
                  "charLength": 99,
                  "snippet": {
                    "text": "\n// Lower a shortcut to strings.ToLower.\nfunc Lower(s string) string {\n\treturn strings.ToLower(s)\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "44a35398ebf3f9ac",
            "equalIndicator/v1": "292d43081d3b5b8b0aeb68712c7f7359bcc48ba93dc1a974079eea5fadaac024"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in getLatestVersion)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in getLatestVersion)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 8,
                  "charOffset": 1924,
                  "charLength": 26,
                  "snippet": {
                    "text": "func(Body io.ReadCloser) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "charOffset": 1902,
                  "charLength": 88,
                  "snippet": {
                    "text": "\t\treturn \"\"\n\t}\n\tdefer func(Body io.ReadCloser) {\n\t\terr := Body.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "46800852dceed71e",
            "equalIndicator/v1": "29d2e8b106bd23ad0c5a0dd3dbcc1f8c153b2539324903f16511ee6dd0563c52"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in unpackZip)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in unpackZip)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 8,
                  "charOffset": 3838,
                  "charLength": 33,
                  "snippet": {
                    "text": "func(zipReader *zip.ReadCloser) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 139,
                  "startColumn": 1,
                  "charOffset": 3809,
                  "charLength": 106,
                  "snippet": {
                    "text": "\t\treturn err, true\n\t}\n\tdefer func(zipReader *zip.ReadCloser) {\n\t\terr = zipReader.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2841380118907825",
            "equalIndicator/v1": "2ac36ac9be81b81dc51bd564122ca8bde04bf2b0d1a6e75f186c52f7ed03c6af"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'FindQodanaYaml' coverage is below the threshold 50%",
            "markdown": "Method `FindQodanaYaml` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 6,
                  "charOffset": 12148,
                  "charLength": 14,
                  "snippet": {
                    "text": "FindQodanaYaml"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 348,
                  "startColumn": 1,
                  "charOffset": 12083,
                  "charLength": 209,
                  "snippet": {
                    "text": "\n// FindQodanaYaml checks whether qodana.yaml exists or not\nfunc FindQodanaYaml(project string) string {\n\tfilename := configName + \".yml\"\n\tif info, _ := os.Stat(filepath.Join(project, filename)); info != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9388e802bb294c66",
            "equalIndicator/v1": "2bdac567261042893e6952312d88f651b65357baad490a57a5bbc03669e58997"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Sort)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Sort)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 24,
                  "charOffset": 13982,
                  "charLength": 21,
                  "snippet": {
                    "text": "func(i, j int) bool {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 403,
                  "startColumn": 1,
                  "charOffset": 13872,
                  "charLength": 192,
                  "snippet": {
                    "text": "\t\treturn Lower(q.CustomDependencies[i].Name) < Lower(q.CustomDependencies[j].Name)\n\t})\n\tsort.Slice(q.Plugins, func(i, j int) bool {\n\t\treturn Lower(q.Plugins[i].Id) < Lower(q.Plugins[j].Id)\n\t})"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9981cfa8021bad6b",
            "equalIndicator/v1": "2c93dd9a69746620e7cfd9a6c2c72b5d077b194da9c373271d64c4239338f5cc"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Primary' coverage is below the threshold 50%",
            "markdown": "Method `Primary` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 6,
                  "charOffset": 2938,
                  "charLength": 7,
                  "snippet": {
                    "text": "Primary"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2882,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n// Primary prints a message in the Primary style.\nfunc Primary(text string, a ...interface{}) string {\n\ttext = fmt.Sprintf(text, a...)\n\treturn PrimaryStyle.Sprint(text)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "76709c89429bdb20",
            "equalIndicator/v1": "2d35a599d65f2d981f672ebfb58cac998797da5e5eb252427f779a99f5fe748b"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'eap.go' coverage is below the threshold 50%",
            "markdown": "File `eap.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/eap.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "74458718fc581b58",
            "equalIndicator/v1": "2efc6cd09e88860381cabbe2f67870400da48e9e0cbafe41c94f6226c5b1682d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'collectReports' coverage is below the threshold 50%",
            "markdown": "Method `collectReports` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 6,
                  "charOffset": 5284,
                  "charLength": 14,
                  "snippet": {
                    "text": "collectReports"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 178,
                  "startColumn": 1,
                  "charOffset": 5276,
                  "charLength": 124,
                  "snippet": {
                    "text": "}\n\nfunc collectReports(files []string, ch chan<- *sarif.Report) {\n\tfor _, file := range files {\n\t\tr, err := ReadReport(file)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0c42e92172060c0e",
            "equalIndicator/v1": "2f68faa510fd1988979cb8e5cb9f1b33dcc3f6769bb6c1cd1be86b9a77e2dc71"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getTokenFromEnv' coverage is below the threshold 50%",
            "markdown": "Method `getTokenFromEnv` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 25,
                  "charOffset": 1532,
                  "charLength": 15,
                  "snippet": {
                    "text": "getTokenFromEnv"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1505,
                  "charLength": 118,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) getTokenFromEnv() string {\n\ttokenFromEnv := os.Getenv(QodanaToken)\n\tif tokenFromEnv != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f7409018dab1e1a6",
            "equalIndicator/v1": "31a04f59d9b4306499be2cb1af30661c28ec99f636b1e4a648dbfa18733fab7e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'installIdeMacOS' coverage is below the threshold 50%",
            "markdown": "Method `installIdeMacOS` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/installers.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 6,
                  "charOffset": 6217,
                  "charLength": 15,
                  "snippet": {
                    "text": "installIdeMacOS"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 226,
                  "startColumn": 1,
                  "charOffset": 6209,
                  "charLength": 243,
                  "snippet": {
                    "text": "}\n\nfunc installIdeMacOS(archivePath string, targetDir string) error {\n\tmountDir := fmt.Sprintf(\"/Volumes/MyTempMount%d\", rand.Intn(10000))\n\t_, err := exec.Command(\"hdiutil\", \"attach\", \"-nobrowse\", \"-mountpoint\", mountDir, archivePath).Output()"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9a44237152f7b5ba",
            "equalIndicator/v1": "32d79b042ada25faa41e6433b451ba300420e5954bfc90ec3a5590a2c4137be8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in LoadToken)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in LoadToken)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 3,
                  "charOffset": 1082,
                  "charLength": 69,
                  "snippet": {
                    "text": "func(_ bool) string { return o.getTokenFromUserInput(requiresToken) }"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1000,
                  "charLength": 156,
                  "snippet": {
                    "text": "\t\tfunc(_ bool) string { return o.getTokenFromEnv() },\n\t\to.getTokenFromKeychain,\n\t\tfunc(_ bool) string { return o.getTokenFromUserInput(requiresToken) },\n\t}\n"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2d74c72dc5d9cd0a",
            "equalIndicator/v1": "334c61ef220d4d96affd637b0f51b800fc850b47e479f1956b72e0d5799f45ba"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Execute' coverage is below the threshold 50%",
            "markdown": "Method `Execute` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/root.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 6,
                  "charOffset": 1652,
                  "charLength": 7,
                  "snippet": {
                    "text": "Execute"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1554,
                  "charLength": 260,
                  "snippet": {
                    "text": "\n// Execute is a main CLI entrypoint: handles user interrupt, CLI start and everything else.\nfunc Execute() {\n\tif !platform.IsContainer() && os.Geteuid() == 0 {\n\t\tplatform.WarningMessage(\"Running the tool as root is dangerous: please run it as a regular user\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d5d128b52ae22828",
            "equalIndicator/v1": "35adbf840b11f292d858ac81b79d2c1d143ea4265fce325b9895478c2e5c29fc"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'LoadToken' coverage is below the threshold 50%",
            "markdown": "Method `LoadToken` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 25,
                  "charOffset": 847,
                  "charLength": 9,
                  "snippet": {
                    "text": "LoadToken"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 786,
                  "charLength": 213,
                  "snippet": {
                    "text": "const defaultService = \"qodana-cli\"\n\nfunc (o *QodanaOptions) LoadToken(refresh bool, requiresToken bool) string {\n\ttokenFetchers := []func(bool) string{\n\t\tfunc(_ bool) string { return o.getTokenFromDockerArgs() },"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f39788176624b229",
            "equalIndicator/v1": "375d7cae571f5f468f30bdafe8cd30640872223b1e7f69669cff67a63e3f118e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Sort)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Sort)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 36,
                  "charOffset": 13705,
                  "charLength": 21,
                  "snippet": {
                    "text": "func(i, j int) bool {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 397,
                  "startColumn": 1,
                  "charOffset": 13585,
                  "charLength": 230,
                  "snippet": {
                    "text": "\t\treturn Lower(q.DependencyIgnores[i].Name) < Lower(q.DependencyIgnores[j].Name)\n\t})\n\tsort.Slice(q.DependencyOverrides, func(i, j int) bool {\n\t\treturn Lower(q.DependencyOverrides[i].Name) < Lower(q.DependencyOverrides[j].Name)\n\t})"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c87fd740bb2b631d",
            "equalIndicator/v1": "37965501ca1a50af2ffeaa859bfb52bc232e92e5126f7139c6b19e6ea83dba1a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in LoadToken)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in LoadToken)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 3,
                  "charOffset": 941,
                  "charLength": 57,
                  "snippet": {
                    "text": "func(_ bool) string { return o.getTokenFromDockerArgs() }"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 823,
                  "charLength": 256,
                  "snippet": {
                    "text": "func (o *QodanaOptions) LoadToken(refresh bool, requiresToken bool) string {\n\ttokenFetchers := []func(bool) string{\n\t\tfunc(_ bool) string { return o.getTokenFromDockerArgs() },\n\t\tfunc(_ bool) string { return o.getTokenFromEnv() },\n\t\to.getTokenFromKeychain,"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c702348333ee9daf",
            "equalIndicator/v1": "38ad9f76b04c4690c7c9b1ea787beddaf899a436b743469d26b45cd50c78a1ef"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in GetAnalyzer)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in GetAnalyzer)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 14,
                  "charOffset": 3271,
                  "charLength": 31,
                  "snippet": {
                    "text": "func(choices []string) string {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 106,
                  "startColumn": 1,
                  "charOffset": 3229,
                  "charLength": 160,
                  "snippet": {
                    "text": "\t}, \"Scanning project\", \"\")\n\n\tselector := func(choices []string) string {\n\t\tchoice, err := qodanaInteractiveSelect.WithOptions(choices).Show()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ca488d6cc110ac14",
            "equalIndicator/v1": "38b83302cb7666a2d5a03d5f3e8ea8a76c4ad6fe8b649c5c10ce33f9e4d67957"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitRemoteUrl' coverage is below the threshold 50%",
            "markdown": "Method `GitRemoteUrl` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 6,
                  "charOffset": 2506,
                  "charLength": 12,
                  "snippet": {
                    "text": "GitRemoteUrl"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2438,
                  "charLength": 170,
                  "snippet": {
                    "text": "\n// GitRemoteUrl returns the remote url of the git repository.\nfunc GitRemoteUrl(cwd string) string {\n\treturn gitOutput(cwd, []string{\"remote\", \"get-url\", \"origin\"})[0]\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "923d9d3a1b354a96",
            "equalIndicator/v1": "3970dd32617bb65b37997c097deca84b027b895400d0610ce3b8b74a1f8d0c2d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'vmOptionsPath' coverage is below the threshold 50%",
            "markdown": "Method `vmOptionsPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 25,
                  "charOffset": 1339,
                  "charLength": 13,
                  "snippet": {
                    "text": "vmOptionsPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1312,
                  "charLength": 109,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) vmOptionsPath() string {\n\treturn filepath.Join(o.ConfDirPath(), \"ide.vmoptions\")\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2f0dd919f78aff26",
            "equalIndicator/v1": "3a310183c61eecb907221c0ebfb63b1ade03163557655c7a4d2489526003c3c3"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'prepareWinCmd' coverage is below the threshold 50%",
            "markdown": "Method `prepareWinCmd` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/cmd_others.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 6,
                  "charOffset": 717,
                  "charLength": 13,
                  "snippet": {
                    "text": "prepareWinCmd"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 671,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n//goland:noinspection GoUnusedParameter\nfunc prepareWinCmd(args ...string) *exec.Cmd {\n\tlog.Fatal(\"Function should not be called on non-windows platforms\")\n\treturn nil"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4d216a67b14fc0f3",
            "equalIndicator/v1": "3bbfdd05aeb8078d899fab812099a932a924973f35a40eb8e9f68b5c4de85332"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in FindFiles)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in FindFiles)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 29,
                  "charOffset": 1933,
                  "charLength": 54,
                  "snippet": {
                    "text": "func(path string, info os.FileInfo, err error) error {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 78,
                  "startColumn": 1,
                  "charOffset": 1825,
                  "charLength": 194,
                  "snippet": {
                    "text": "func FindFiles(root string, extensions []string) []string {\n\tvar files []string\n\terr := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7231238fdcc0cbf5",
            "equalIndicator/v1": "3f31aa28d52c2fc6acd0930da7400c99c0e04f7ee65b264a10026227f29ed293"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'container.go' coverage is below the threshold 50%",
            "markdown": "File `container.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "65a60faf712fce23",
            "equalIndicator/v1": "404103b59ff8924a0c514c833c3d2fc5181b750789e1c3af8d8058d184ecdceb"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'prepareHost' coverage is below the threshold 50%",
            "markdown": "Method `prepareHost` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 6,
                  "charOffset": 2765,
                  "charLength": 11,
                  "snippet": {
                    "text": "prepareHost"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 107,
                  "startColumn": 1,
                  "charOffset": 2673,
                  "charLength": 185,
                  "snippet": {
                    "text": "\n// prepareHost gets the current user, creates the necessary folders for the analysis.\nfunc prepareHost(opts *QodanaOptions) {\n\tif opts.ClearCache {\n\t\terr := os.RemoveAll(opts.CacheDir)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "611b402aef9d5a12",
            "equalIndicator/v1": "421a146a5f0f27323c518c52fd206a2c1fc8f4e856548df04ba54b34cabb6b4d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'StartQodanaSpinner' coverage is below the threshold 50%",
            "markdown": "Method `StartQodanaSpinner` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 6,
                  "charOffset": 5134,
                  "charLength": 18,
                  "snippet": {
                    "text": "StartQodanaSpinner"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 154,
                  "startColumn": 1,
                  "charOffset": 5061,
                  "charLength": 205,
                  "snippet": {
                    "text": "\n// StartQodanaSpinner starts a new spinner with the given message.\nfunc StartQodanaSpinner(message string) (*pterm.SpinnerPrinter, error) {\n\tif IsInteractive() {\n\t\tQodanaSpinner.Sequence = spinnerSequence"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "53016f3fa728e625",
            "equalIndicator/v1": "434da6898711b33255a231034452c35c097860c3d11288653519bcacac229435"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'PrintProblem' coverage is below the threshold 50%",
            "markdown": "Method `PrintProblem` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 6,
                  "charOffset": 5973,
                  "charLength": 12,
                  "snippet": {
                    "text": "PrintProblem"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 181,
                  "startColumn": 1,
                  "charOffset": 5904,
                  "charLength": 259,
                  "snippet": {
                    "text": "\n// PrintProblem prints problem with source code or without it.\nfunc PrintProblem(ruleId string, level string, message string, path string, line int, column int, contextLine int, context string) {\n\tprintHeader(level, ruleId, \"\")\n\tprintPath(path, line, column)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a0f42502cdcac3cc",
            "equalIndicator/v1": "449f85f2dca357b4a79a9553277c267838e7214c07fab4b8d2aec405198f34cc"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'init.go' coverage is below the threshold 50%",
            "markdown": "File `init.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/init.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dcc5e852f9fa02c2",
            "equalIndicator/v1": "45599e29bb154722919c0cfe609352343a91f09e5dac9a371c2c58c9a1876f07"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitBranch' coverage is below the threshold 50%",
            "markdown": "Method `GitBranch` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 6,
                  "charOffset": 2678,
                  "charLength": 9,
                  "snippet": {
                    "text": "GitBranch"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2609,
                  "charLength": 174,
                  "snippet": {
                    "text": "\n// GitBranch returns the current branch of the git repository.\nfunc GitBranch(cwd string) string {\n\treturn gitOutput(cwd, []string{\"rev-parse\", \"--abbrev-ref\", \"HEAD\"})[0]\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6a31a276c0bc8974",
            "equalIndicator/v1": "464b30187589308c715bcfbca0918bbee536b840491204401a9075e583750b39"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'scan.go' coverage is below the threshold 50%",
            "markdown": "File `scan.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/scan.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "85a3582b9c7cfb16",
            "equalIndicator/v1": "4677f05bc4015c83179bd134d47a9494f86dd10962383ec5ce3070b15691bac0"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ReadSarif' coverage is below the threshold 50%",
            "markdown": "Method `ReadSarif` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "charOffset": 1066,
                  "charLength": 9,
                  "snippet": {
                    "text": "ReadSarif"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1009,
                  "charLength": 157,
                  "snippet": {
                    "text": "\n// ReadSarif prints Qodana Scan result into stdout\nfunc ReadSarif(sarifPath string, printProblems bool) {\n\tnewProblems := 0\n\ts, err := sarif.Open(sarifPath)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0c1e471096abbc60",
            "equalIndicator/v1": "46cc98d9b14163585b9fdac73f634b8edca3602e5c0e65b567e6c4f72866e2a1"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'WarningMessage' coverage is below the threshold 50%",
            "markdown": "Method `WarningMessage` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 6,
                  "charOffset": 3646,
                  "charLength": 14,
                  "snippet": {
                    "text": "WarningMessage"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 3582,
                  "charLength": 189,
                  "snippet": {
                    "text": "\n// WarningMessage prints a warning message with the icon.\nfunc WarningMessage(message string, a ...interface{}) {\n\tmessage = fmt.Sprintf(message, a...)\n\ticon := warningStyle.Sprint(\"\\n! \")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dec0f0cb146631ed",
            "equalIndicator/v1": "46d235baedd8677537ada34d58327524d9b4448d5841c72a02991c9ca6117704"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getPluginIds' coverage is below the threshold 50%",
            "markdown": "Method `getPluginIds` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 6,
                  "charOffset": 2657,
                  "charLength": 12,
                  "snippet": {
                    "text": "getPluginIds"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 2649,
                  "charLength": 129,
                  "snippet": {
                    "text": "}\n\nfunc getPluginIds(plugins []platform.Plugin) []string {\n\tids := make([]string, len(plugins))\n\tfor i, plugin := range plugins {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "52728d1c286e20a8",
            "equalIndicator/v1": "47db46fbceec23fcdeadabd7cfc18a9e7cf389c3dd0ecf9d53b8e214a3a3d288"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetQodanaYamlOrDefault' coverage is below the threshold 50%",
            "markdown": "Method `GetQodanaYamlOrDefault` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 6,
                  "charOffset": 1882,
                  "charLength": 22,
                  "snippet": {
                    "text": "GetQodanaYamlOrDefault"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 1766,
                  "charLength": 218,
                  "snippet": {
                    "text": "\n// GetQodanaYamlOrDefault reads qodana.yaml or qodana.yml and returns an empty config if not found or invalid\nfunc GetQodanaYamlOrDefault(project string) QodanaYaml {\n\tq, err := GetQodanaYaml(project)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9def25231617ca25",
            "equalIndicator/v1": "4939e717879e9b73536d15e21c05ed348cf0110ba18b06f298825c0917ea66bd"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'IsCommunity' coverage is below the threshold 50%",
            "markdown": "Method `IsCommunity` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 19,
                  "charOffset": 3071,
                  "charLength": 11,
                  "snippet": {
                    "text": "IsCommunity"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 136,
                  "startColumn": 1,
                  "charOffset": 3050,
                  "charLength": 74,
                  "snippet": {
                    "text": "}\n\nfunc (p *product) IsCommunity() bool {\n\tif p.Code == \"\" {\n\t\treturn true"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "070a7cd507843e46",
            "equalIndicator/v1": "49bc76355c1b1861c2a31c4d76ab65fbd976c5c7fd0a70d7401342e31422737c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'mount' coverage is below the threshold 50%",
            "markdown": "Method `mount` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 6,
                  "charOffset": 1076,
                  "charLength": 5,
                  "snippet": {
                    "text": "mount"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1012,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n// mount mounts the helper tools to the temporary folder.\nfunc mount(options *QodanaOptions) {\n\tpath, err := getTempDir()\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a228ba158543b9f4",
            "equalIndicator/v1": "4a8bce891ae12f5a9402297b51c87e1fcf05bfa3c2afd92766523aea71c9996a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'openReport' coverage is below the threshold 50%",
            "markdown": "Method `openReport` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 6,
                  "charOffset": 6793,
                  "charLength": 10,
                  "snippet": {
                    "text": "openReport"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 222,
                  "startColumn": 1,
                  "charOffset": 6714,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n// openReport serves the report on the given port and opens the browser.\nfunc openReport(cloudUrl string, path string, port int) {\n\tif cloudUrl != \"\" {\n\t\tresp, err := http.Get(cloudUrl)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "901d4a3c5cb68b24",
            "equalIndicator/v1": "4c5ce407d44478208544e445cf3ca5e980232bb2cf8f4154123e2eb5205fae16"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in extractTarGz)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in extractTarGz)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 8,
                  "charOffset": 5279,
                  "charLength": 31,
                  "snippet": {
                    "text": "func(gzipReader *gzip.Reader) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 210,
                  "startColumn": 1,
                  "charOffset": 5250,
                  "charLength": 106,
                  "snippet": {
                    "text": "\t\treturn err, true\n\t}\n\tdefer func(gzipReader *gzip.Reader) {\n\t\terr := gzipReader.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "795c980159498fe0",
            "equalIndicator/v1": "4e3605f0ef4940b481107feb442055bafd5080f5ff171e0a17c281d66dc82686"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'printLines' coverage is below the threshold 50%",
            "markdown": "Method `printLines` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 6,
                  "charOffset": 7215,
                  "charLength": 10,
                  "snippet": {
                    "text": "printLines"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 7162,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n// printLines prints the lines of the problem.\nfunc printLines(content string, contextLine int, line int, skipHighlight bool) {\n\tlines := strings.Split(content, \"\\n\")\n\tlineCount := len(lines)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6b455f9d744dd739",
            "equalIndicator/v1": "503da5d9c9915e878af44fd4fef6c049c0fb5ff185852a797fd7d1374f0fb204"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'mergeReports' coverage is below the threshold 50%",
            "markdown": "Method `mergeReports` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 6,
                  "charOffset": 5905,
                  "charLength": 12,
                  "snippet": {
                    "text": "mergeReports"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 211,
                  "startColumn": 1,
                  "charOffset": 5897,
                  "charLength": 102,
                  "snippet": {
                    "text": "}\n\nfunc mergeReports(ch <-chan *sarif.Report) (*sarif.Report, error) {\n\tvar finalReport *sarif.Report\n"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "84b111d8014ef7ab",
            "equalIndicator/v1": "5063067948df888787c0cb110b2a420dfe8775c15d50cd8192e94b839acf6493"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'output.go' coverage is below the threshold 50%",
            "markdown": "File `output.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cf301a65eb2d63a2",
            "equalIndicator/v1": "552a4ca93805ee965d0a6a1e144077a1d15b18286910fb7b6d39e9ce555ebca1"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'RunAnalysis' coverage is below the threshold 50%",
            "markdown": "Method `RunAnalysis` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 6,
                  "charOffset": 4542,
                  "charLength": 11,
                  "snippet": {
                    "text": "RunAnalysis"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 162,
                  "startColumn": 1,
                  "charOffset": 4481,
                  "charLength": 189,
                  "snippet": {
                    "text": "\n// RunAnalysis runs the linter with the given options.\nfunc RunAnalysis(ctx context.Context, options *QodanaOptions) int {\n\tlog.Debug(\"Running analysis with options\")\n\toptions.LogOptions()"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "edbb21b957a5a0b9",
            "equalIndicator/v1": "5581eb75a89ede6f178706c8c8ab6cae50f8bfaffe54f45e1fe32a55baad5424"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'createFuserEventChannel' coverage is below the threshold 50%",
            "markdown": "Method `createFuserEventChannel` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/statistics.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "charOffset": 844,
                  "charLength": 23,
                  "snippet": {
                    "text": "createFuserEventChannel"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "charOffset": 816,
                  "charLength": 173,
                  "snippet": {
                    "text": "var wg sync.WaitGroup\n\nfunc createFuserEventChannel(events *[]tooling.FuserEvent) chan tooling.FuserEvent {\n\tch := make(chan tooling.FuserEvent)\n\tguid := uuid.New().String()"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c959e78cf76b219b",
            "equalIndicator/v1": "56001500d9a89d03cf7f5d5f40f940ae974082d7467445dd650c39f6bae70644"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'setup' coverage is below the threshold 50%",
            "markdown": "Method `setup` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 6,
                  "charOffset": 843,
                  "charLength": 5,
                  "snippet": {
                    "text": "setup"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 801,
                  "charLength": 159,
                  "snippet": {
                    "text": "// it's a 3rd party linter executor\n\nfunc setup(options *QodanaOptions) error {\n\tlinterOptions := options.GetLinterSpecificOptions()\n\tif linterOptions == nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ddb97858d95aefea",
            "equalIndicator/v1": "566bd1b0bd9875b800152d25c57f9ac1ad600ea38250d3f05899c545a7176d0c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'computeBaselinePrintResults' coverage is below the threshold 50%",
            "markdown": "Method `computeBaselinePrintResults` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/baseline.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 6,
                  "charOffset": 744,
                  "charLength": 27,
                  "snippet": {
                    "text": "computeBaselinePrintResults"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 639,
                  "charLength": 377,
                  "snippet": {
                    "text": "\n// computeBaselinePrintResults runs SARIF analysis (compares with baseline and prints the result)=\nfunc computeBaselinePrintResults(options *QodanaOptions, mountInfo *MountInfo) (int, error) {\n\targs := []string{QuoteForWindows(mountInfo.JavaPath), \"-jar\", QuoteForWindows(mountInfo.BaselineCli), \"-r\", QuoteForWindows(options.GetSarifPath())}\n\tif options.FailThreshold != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b1795742fc3ca8e9",
            "equalIndicator/v1": "57375d5e6a1d6884707e1775c3a0fd1aa9bdaaf3ecd570035ad523bc48f36028"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'MakeShortSarif' coverage is below the threshold 50%",
            "markdown": "Method `MakeShortSarif` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 6,
                  "charOffset": 2887,
                  "charLength": 14,
                  "snippet": {
                    "text": "MakeShortSarif"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 101,
                  "startColumn": 1,
                  "charOffset": 2879,
                  "charLength": 126,
                  "snippet": {
                    "text": "}\n\nfunc MakeShortSarif(sarifPath string, shortSarifPath string) error {\n\treport, err := ReadReport(sarifPath)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b1733491c4acafb7",
            "equalIndicator/v1": "58baeec470d0da950a3e525c3d54c5c65f6dfdaa4d4ca4f139030ae67921a638"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitRevisions' coverage is below the threshold 50%",
            "markdown": "Method `GitRevisions` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 6,
                  "charOffset": 2362,
                  "charLength": 12,
                  "snippet": {
                    "text": "GitRevisions"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 2266,
                  "charLength": 171,
                  "snippet": {
                    "text": "\n// GitRevisions returns the list of commits of the git repository in chronological order.\nfunc GitRevisions(cwd string) []string {\n\treturn reverse(GitLog(cwd, \"%H\", 0))\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f52ec83ec3bbc204",
            "equalIndicator/v1": "59bb3b5beee9eed4e261e1c81ee3472f9b4f1691d001014ed2abe3e7018af691"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'root.go' coverage is below the threshold 50%",
            "markdown": "File `root.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/root.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "071d00a41b968fc6",
            "equalIndicator/v1": "5a564632c33edd1e1a3eb53c0dc0fe86b6628c962df7652b785711d2b0abf800"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'gitOutput' coverage is below the threshold 50%",
            "markdown": "Method `gitOutput` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 6,
                  "charOffset": 1645,
                  "charLength": 9,
                  "snippet": {
                    "text": "gitOutput"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 56,
                  "startColumn": 1,
                  "charOffset": 1558,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n// gitOutput runs the git command in the given directory and returns the output.\nfunc gitOutput(cwd string, args []string) []string {\n\tcmd := exec.Command(\"git\", args...)\n\tcmd.Dir = cwd"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9f93c2e86b1a4e7b",
            "equalIndicator/v1": "5c10684a360e983db43e61e7606d5defff928d8d13b50c16ad88bbcf545f49db"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Sort)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Sort)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 386,
                  "startColumn": 25,
                  "charOffset": 13215,
                  "charLength": 21,
                  "snippet": {
                    "text": "func(i, j int) bool {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 384,
                  "startColumn": 1,
                  "charOffset": 13148,
                  "charLength": 145,
                  "snippet": {
                    "text": "\t})\n\tfor _, rule := range q.LicenseRules {\n\t\tsort.Slice(rule.Keys, func(i, j int) bool {\n\t\t\treturn Lower(rule.Keys[i]) < Lower(rule.Keys[j])\n\t\t})"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cf140df9233b144a",
            "equalIndicator/v1": "5e23391aedd91c44a5a2dab7f05f39f19d6601eae3b5921d96cf60c3c77de214"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getHash' coverage is below the threshold 50%",
            "markdown": "Method `getHash` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 6,
                  "charOffset": 1165,
                  "charLength": 7,
                  "snippet": {
                    "text": "getHash"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1107,
                  "charLength": 164,
                  "snippet": {
                    "text": "\n// getHash returns a SHA256 hash of a given string.\nfunc getHash(s string) string {\n\tsha256sum := sha256.Sum256([]byte(s))\n\treturn hex.EncodeToString(sha256sum[:])"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e384c12383082e1b",
            "equalIndicator/v1": "5e5b972967d42be7551938b56c90ce2a1cea17de618fa44727ddc6131a0ad311"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'CopyDir' coverage is below the threshold 50%",
            "markdown": "Method `CopyDir` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/fileops.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 6,
                  "charOffset": 1353,
                  "charLength": 7,
                  "snippet": {
                    "text": "CopyDir"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1300,
                  "charLength": 139,
                  "snippet": {
                    "text": "\n// CopyDir copies a directory from src to dst.\nfunc CopyDir(src string, dst string) error {\n\tsrcInfo, err := os.Stat(src)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4f7639bb25b4f698",
            "equalIndicator/v1": "6095907e9659668524e97a5bc0bb94e14e55156d5325ceadd1e517f16e01e345"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getRemoteUrl' coverage is below the threshold 50%",
            "markdown": "Method `getRemoteUrl` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 6,
                  "charOffset": 2718,
                  "charLength": 12,
                  "snippet": {
                    "text": "getRemoteUrl"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 115,
                  "startColumn": 1,
                  "charOffset": 2646,
                  "charLength": 146,
                  "snippet": {
                    "text": "\n// getRemoteUrl returns remote url of the current git repository.\nfunc getRemoteUrl() string {\n\turl := os.Getenv(QodanaRemoteUrl)\n\tif url == \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "27ef10dde84f942e",
            "equalIndicator/v1": "62bd5787fa8313db15ae0fc14c8cd868a3c1ab154955e505b9645cdce94f87a3"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'options.go' coverage is below the threshold 50%",
            "markdown": "File `options.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "71661f93b9c16a47",
            "equalIndicator/v1": "6455ae908fd37366fc40769ebb2a5852fa2a57c54391553b4da5551c29f6559e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'baseline.go' coverage is below the threshold 50%",
            "markdown": "File `baseline.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/baseline.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5317d481e87cc51b",
            "equalIndicator/v1": "675fbd7a120ab249187d42778fd076c79809c9dabc0765ff793c63b7eb7f005b"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'SetVersionControlParams' coverage is below the threshold 50%",
            "markdown": "Method `SetVersionControlParams` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 6,
                  "charOffset": 3457,
                  "charLength": 23,
                  "snippet": {
                    "text": "SetVersionControlParams"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 118,
                  "startColumn": 1,
                  "charOffset": 3449,
                  "charLength": 181,
                  "snippet": {
                    "text": "}\n\nfunc SetVersionControlParams(options *QodanaOptions, deviceId string, finalReport *sarif.Report) {\n\tlinterOptions := options.GetLinterSpecificOptions()\n\tif linterOptions == nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8add307ad6859a0c",
            "equalIndicator/v1": "67df5eb7a01294e58e677aeb3b4960dee9018d867480cb1fa9d7c7d2fe9e46c8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Execute)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Execute)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/init.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 36,
                  "charOffset": 1002,
                  "charLength": 35,
                  "snippet": {
                    "text": "func() platform.ThirdPartyOptions {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 818,
                  "charLength": 278,
                  "snippet": {
                    "text": "func Execute(productCode string, linterName string, linterVersion string, buildDateStr string, isEap bool) {\n\tplatform.CheckEAP(buildDateStr, isEap)\n\toptions := platform.DefineOptions(func() platform.ThirdPartyOptions {\n\t\treturn &CltOptions{\n\t\t\tLinterInfo: &platform.LinterInfo{"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6e3b4abfc3ab843f",
            "equalIndicator/v1": "6a422990ba0736c54ad57fc5549e4ac0c1843b2420d9f3c66b66e42a4935abe9"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'logProjectClose' coverage is below the threshold 50%",
            "markdown": "Method `logProjectClose` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/statistics.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 6,
                  "charOffset": 2927,
                  "charLength": 15,
                  "snippet": {
                    "text": "logProjectClose"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "charOffset": 2919,
                  "charLength": 91,
                  "snippet": {
                    "text": "}\n\nfunc logProjectClose(ch chan tooling.FuserEvent) {\n\twg.Add(1)\n\tch <- tooling.FuserEvent{"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b52d5f0acc6f575e",
            "equalIndicator/v1": "6adc03c99d6900afda790a75354b2a92aae4f69abda87d88e1ef21f1c56240b8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'UnsetNugetVariables' coverage is below the threshold 50%",
            "markdown": "Method `UnsetNugetVariables` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/nuget.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 6,
                  "charOffset": 878,
                  "charLength": 19,
                  "snippet": {
                    "text": "UnsetNugetVariables"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 870,
                  "charLength": 163,
                  "snippet": {
                    "text": ")\n\nfunc UnsetNugetVariables() {\n\tvariables := []string{qodanaNugetUser, qodanaNugetPassword, qodanaNugetName, qodanaNugetUrl}\n\tfor _, variable := range variables {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "461df7d14b3e5cd8",
            "equalIndicator/v1": "6b3420a78d6993d3981a5f301e56d960a430b3ba0868c915ddbf3112c63d5f70"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getAuthorEmail' coverage is below the threshold 50%",
            "markdown": "Method `getAuthorEmail` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarifVersioning.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 6,
                  "charOffset": 3027,
                  "charLength": 14,
                  "snippet": {
                    "text": "getAuthorEmail"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3019,
                  "charLength": 164,
                  "snippet": {
                    "text": "}\n\nfunc getAuthorEmail(pwd string) string {\n\temail, _, ret, err := RunCmdRedirectOutput(pwd, \"git\", \"log\", \"-1\", \"--pretty=format:%ae\")\n\tif err != nil || ret != 0 {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "89c500c49e334f17",
            "equalIndicator/v1": "6fa14f1acd57c0cc790e1960485cd92e639a7b9c674d4b4a425e3271df7d936c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in openReport)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in openReport)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 6,
                  "charOffset": 7089,
                  "charLength": 8,
                  "snippet": {
                    "text": "func() {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 234,
                  "startColumn": 1,
                  "charOffset": 7024,
                  "charLength": 148,
                  "snippet": {
                    "text": "\t} else {\n\t\turl := fmt.Sprintf(\"http://localhost:%d\", port)\n\t\tgo func() {\n\t\t\tresp, err := http.Get(url)\n\t\t\tif err == nil && resp.StatusCode == 200 {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1e4ac13b8ed7436a",
            "equalIndicator/v1": "707adbef08c1b1734f6775209e6330bbad0b5c9937420c0d64355276c45802f5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'parentPrefix' coverage is below the threshold 50%",
            "markdown": "Method `parentPrefix` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 19,
                  "charOffset": 2653,
                  "charLength": 12,
                  "snippet": {
                    "text": "parentPrefix"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 113,
                  "startColumn": 1,
                  "charOffset": 2632,
                  "charLength": 83,
                  "snippet": {
                    "text": "}\n\nfunc (p *product) parentPrefix() string {\n\tswitch p.Code {\n\tcase platform.QDPHP:"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d11e25bed1770bcb",
            "equalIndicator/v1": "715d593a917572b464bce2411ad7f1715e43841d2b60f3e2ba0e317174731bef"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'xml.go' coverage is below the threshold 50%",
            "markdown": "File `xml.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/xml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d3bab73b8e0376ee",
            "equalIndicator/v1": "71c8813a82c87f677335170203d9735a73bc46e456a3e98201b65f9d43ab7c5a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'cli.go' coverage is below the threshold 50%",
            "markdown": "File `cli.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/cli.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ac4be9c14790ecb3",
            "equalIndicator/v1": "72058d909b06f831a05e89f8fbb4f8407afb9faf7d7385db621a858c5124ab72"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'checkExitCode' coverage is below the threshold 50%",
            "markdown": "Method `checkExitCode` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/scan.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 6,
                  "charOffset": 3467,
                  "charLength": 13,
                  "snippet": {
                    "text": "checkExitCode"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 102,
                  "startColumn": 1,
                  "charOffset": 3459,
                  "charLength": 198,
                  "snippet": {
                    "text": "}\n\nfunc checkExitCode(exitCode int, resultsDir string, options *core.QodanaOptions) {\n\tif exitCode == platform.QodanaEapLicenseExpiredExitCode && platform.IsInteractive() {\n\t\tplatform.EmptyMessage()"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7db8d718d46aa9b6",
            "equalIndicator/v1": "72a5213ae2d1d9e907b02ea085314e51d1ce2b3e7ca96c664c0647628aa35e0c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in newShowCommand)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in newShowCommand)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/show.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 8,
                  "charOffset": 1397,
                  "charLength": 41,
                  "snippet": {
                    "text": "func(cmd *cobra.Command, args []string) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1260,
                  "charLength": 229,
                  "snippet": {
                    "text": "https://www.jetbrains.com/help/qodana/html-report.html\nThis command serves the Qodana report locally and opens a browser to it.`,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\toptions.FetchAnalyzerSettings()\n\t\t\tif openDir {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f8322ba9b3c58587",
            "equalIndicator/v1": "7475982bb0074f20ccc02bd8a72fcb65c0c11ef11006826dec1b8cafa6b85e5d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'extractTarGz' coverage is below the threshold 50%",
            "markdown": "Method `extractTarGz` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 6,
                  "charOffset": 4916,
                  "charLength": 12,
                  "snippet": {
                    "text": "extractTarGz"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 194,
                  "startColumn": 1,
                  "charOffset": 4846,
                  "charLength": 194,
                  "snippet": {
                    "text": "\n// extractTarGz extracts tar.gz archive to the destination path\nfunc extractTarGz(archivePath string, destPath string) (error, bool) {\n\tarchiveFile, err := os.Open(archivePath)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "60ed871a27def09e",
            "equalIndicator/v1": "748699da3897fd1a668d7cbd2509512cc2a3d6c90b20279115d421e4d4176b30"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in AppendToFile)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in AppendToFile)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/fileops.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 8,
                  "charOffset": 1137,
                  "charLength": 18,
                  "snippet": {
                    "text": "func(f *os.File) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1114,
                  "charLength": 78,
                  "snippet": {
                    "text": "\t\treturn err\n\t}\n\tdefer func(f *os.File) {\n\t\terr := f.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "980120b7787f952d",
            "equalIndicator/v1": "74e343e882d606c368773e85ae2a602487cd81d0f7e2f38e7eb2e4ffd0f1e458"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'WriteConfig' coverage is below the threshold 50%",
            "markdown": "Method `WriteConfig` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 22,
                  "charOffset": 5983,
                  "charLength": 11,
                  "snippet": {
                    "text": "WriteConfig"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 159,
                  "startColumn": 1,
                  "charOffset": 5909,
                  "charLength": 162,
                  "snippet": {
                    "text": "\n// WriteConfig writes QodanaYaml to the given path.\nfunc (q *QodanaYaml) WriteConfig(path string) error {\n\tvar b bytes.Buffer\n\tyamlEncoder := yaml.NewEncoder(&b)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a18759385331e7cc",
            "equalIndicator/v1": "75273c98b6964a7daa4970594c3e44d9af7c9adee00998936a84729d0e0670b5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'license.go' coverage is below the threshold 50%",
            "markdown": "File `license.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/license.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b75af5e20b33f1d3",
            "equalIndicator/v1": "75dfd605aecd1a6f99872f0d783eb1ea6d5f8c3666e1b48c8bb81951aaf0f874"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ComputeFlags' coverage is below the threshold 50%",
            "markdown": "Method `ComputeFlags` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/argflags.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 6,
                  "charOffset": 714,
                  "charLength": 12,
                  "snippet": {
                    "text": "ComputeFlags"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 706,
                  "charLength": 119,
                  "snippet": {
                    "text": ")\n\nfunc ComputeFlags(cmd *cobra.Command, options *QodanaOptions) error {\n\tflags := cmd.Flags()\n\tflags.SortFlags = false"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bc89fe086ce2ae6d",
            "equalIndicator/v1": "75efd8aa8b2f42fc2e373abbc109d289017998c41e1dbe61d32cba2d8a40f796"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in patchReport)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in patchReport)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 8,
                  "charOffset": 3845,
                  "charLength": 18,
                  "snippet": {
                    "text": "func(f *os.File) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 124,
                  "startColumn": 1,
                  "charOffset": 3834,
                  "charLength": 66,
                  "snippet": {
                    "text": "\t}\n\n\tdefer func(f *os.File) {\n\t\terr := f.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "43228472a8009ce4",
            "equalIndicator/v1": "768f10e2b97af525a1fc2489ad103906bb653c053a75ce0a8ba1b0989cb63e37"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'argflags.go' coverage is below the threshold 50%",
            "markdown": "File `argflags.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/argflags.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1b89a4e00849a153",
            "equalIndicator/v1": "76b8bbf810ba9d352106e099592b523031f3d53d7559d62ea039bd28fa8aeea3"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Execute' coverage is below the threshold 50%",
            "markdown": "Method `Execute` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/init.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "charOffset": 823,
                  "charLength": 7,
                  "snippet": {
                    "text": "Execute"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 815,
                  "charLength": 222,
                  "snippet": {
                    "text": ")\n\nfunc Execute(productCode string, linterName string, linterVersion string, buildDateStr string, isEap bool) {\n\tplatform.CheckEAP(buildDateStr, isEap)\n\toptions := platform.DefineOptions(func() platform.ThirdPartyOptions {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4ab188ed4848970f",
            "equalIndicator/v1": "7b8322f12b514c3afd8988af4fda5f326895a11e3cb51f9936ed6f21d60b18cb"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'sendFuserEvents' coverage is below the threshold 50%",
            "markdown": "Method `sendFuserEvents` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/statistics.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 6,
                  "charOffset": 1132,
                  "charLength": 15,
                  "snippet": {
                    "text": "sendFuserEvents"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1124,
                  "charLength": 143,
                  "snippet": {
                    "text": "}\n\nfunc sendFuserEvents(ch chan tooling.FuserEvent, events *[]tooling.FuserEvent, opts *QodanaOptions, deviceId string) {\n\twg.Wait()\n\tclose(ch)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7055976d076073c8",
            "equalIndicator/v1": "7bbb486e756de9fd7f41116d8447a21d34be7ed2b4c9d7522025f1b329300861"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Sort)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Sort)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 392,
                  "startColumn": 31,
                  "charOffset": 13436,
                  "charLength": 21,
                  "snippet": {
                    "text": "func(i, j int) bool {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 390,
                  "startColumn": 1,
                  "charOffset": 13343,
                  "charLength": 183,
                  "snippet": {
                    "text": "\t\t\treturn Lower(rule.Allowed[i]) < Lower(rule.Allowed[j])\n\t\t})\n\t\tsort.Slice(rule.Prohibited, func(i, j int) bool {\n\t\t\treturn Lower(rule.Prohibited[i]) < Lower(rule.Prohibited[j])\n\t\t})"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "44f5be8ef1e0b027",
            "equalIndicator/v1": "812a271c77d7693f8597f251efd91f0eb8eb0f615aa6c021ab32918fe6076f46"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in extractTarGz)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in extractTarGz)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 8,
                  "charOffset": 5070,
                  "charLength": 28,
                  "snippet": {
                    "text": "func(archiveFile *os.File) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 199,
                  "startColumn": 1,
                  "charOffset": 5041,
                  "charLength": 104,
                  "snippet": {
                    "text": "\t\treturn err, true\n\t}\n\tdefer func(archiveFile *os.File) {\n\t\terr := archiveFile.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "27578c7cf8297e1b",
            "equalIndicator/v1": "8158a4b9309fafd00cb1962631e724cc44066ef38b4f45eb176e61d632b5a964"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'yaml.go' coverage is below the threshold 50%",
            "markdown": "File `yaml.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "11bed71193d276e7",
            "equalIndicator/v1": "81b59fb2b55efb52ec60dbbffdee08fef0ea03fb9b3fa600ef010ae043beda13"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'sarifVersioning.go' coverage is below the threshold 50%",
            "markdown": "File `sarifVersioning.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarifVersioning.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "187a1e4da9fe7994",
            "equalIndicator/v1": "81cff3e15b767b208ed6c73be972088fec9d83a1c8cb48e02c3a66dc45f7aeab"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getTokenFromDockerArgs' coverage is below the threshold 50%",
            "markdown": "Method `getTokenFromDockerArgs` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 25,
                  "charOffset": 1305,
                  "charLength": 22,
                  "snippet": {
                    "text": "getTokenFromDockerArgs"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1278,
                  "charLength": 132,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) getTokenFromDockerArgs() string {\n\ttokenFromCliArgs := o.Getenv(QodanaToken)\n\tif tokenFromCliArgs != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "afe48d9370679c83",
            "equalIndicator/v1": "83a2952e60e656fa3216f7ca5bef8a0bdc20dc1df37edd7e181bd0fb828cbcfe"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'embed.go' coverage is below the threshold 50%",
            "markdown": "File `embed.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aab4150421b5aa4b",
            "equalIndicator/v1": "846ac65acf02c0cd57573c9a4408cbf5cb8803149386667b0757287fd013b66f"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ToJSON' coverage is below the threshold 50%",
            "markdown": "Method `ToJSON` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/contributors.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 6,
                  "charOffset": 2264,
                  "charLength": 6,
                  "snippet": {
                    "text": "ToJSON"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 2187,
                  "charLength": 201,
                  "snippet": {
                    "text": "\n// ToJSON returns the JSON representation of the list of contributors.\nfunc ToJSON(contributors []contributor) (string, error) {\n\toutput := map[string]interface{}{\n\t\t\"total\":        len(contributors),"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "75781cca2f8aef12",
            "equalIndicator/v1": "87cf6b1cc8cadda27e4f8197111ec410e587a3c73315ac812a876027f056715e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in prepareHost)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in prepareHost)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 26,
                  "charOffset": 3546,
                  "charLength": 37,
                  "snippet": {
                    "text": "func(spinner *pterm.SpinnerPrinter) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 3409,
                  "charLength": 267,
                  "snippet": {
                    "text": "\tif opts.Ide != \"\" {\n\t\tif platform.Contains(platform.AllNativeCodes, strings.TrimSuffix(opts.Ide, EapSuffix)) {\n\t\t\tplatform.PrintProcess(func(spinner *pterm.SpinnerPrinter) {\n\t\t\t\tif spinner != nil {\n\t\t\t\t\tspinner.ShowTimer = false // We will update interactive spinner"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d5c5ff138d7bd2c",
            "equalIndicator/v1": "889a8b948d3875cb2f968d5f8d4404686ba8376f68fa9d0329cf05f031a04fb1"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'cmd_others.go' coverage is below the threshold 50%",
            "markdown": "File `cmd_others.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/cmd_others.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 19,
                  "snippet": {
                    "text": "//go:build !windows"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 23,
                  "snippet": {
                    "text": "//go:build !windows\n\n/*"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "34311db1e8d6c1b1",
            "equalIndicator/v1": "8a121bfab3ec48c79886113bcc7886b3a05175a9e0a7fd42e947d1a4a8e8f7ff"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getProductNameFromCode' coverage is below the threshold 50%",
            "markdown": "Method `getProductNameFromCode` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 6,
                  "charOffset": 3325,
                  "charLength": 22,
                  "snippet": {
                    "text": "getProductNameFromCode"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 150,
                  "startColumn": 1,
                  "charOffset": 3317,
                  "charLength": 90,
                  "snippet": {
                    "text": "}\n\nfunc getProductNameFromCode(code string) string {\n\tswitch code {\n\tcase platform.QDJVMC:"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7fa0837492ad4e93",
            "equalIndicator/v1": "8a66f044f4ab24f4a472ba6cd01b068ab20f6d39ac6c1b42ca82bce8dad24427"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'logOs' coverage is below the threshold 50%",
            "markdown": "Method `logOs` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/statistics.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 6,
                  "charOffset": 3172,
                  "charLength": 5,
                  "snippet": {
                    "text": "logOs"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 3164,
                  "charLength": 81,
                  "snippet": {
                    "text": "}\n\nfunc logOs(ch chan tooling.FuserEvent) {\n\twg.Add(1)\n\tch <- tooling.FuserEvent{"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3f1f2230f7eb9e43",
            "equalIndicator/v1": "8b89bca1f9bfe00a0d62c8efc3a747d2859fde20bdb88a08b2146229b114ce91"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'writeFileIfNew' coverage is below the threshold 50%",
            "markdown": "Method `writeFileIfNew` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 6,
                  "charOffset": 2447,
                  "charLength": 14,
                  "snippet": {
                    "text": "writeFileIfNew"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 105,
                  "startColumn": 1,
                  "charOffset": 2439,
                  "charLength": 184,
                  "snippet": {
                    "text": "}\n\nfunc writeFileIfNew(filepath string, content string) {\n\tif _, err := os.Stat(filepath); os.IsNotExist(err) {\n\t\tif err := os.WriteFile(filepath, []byte(content), 0o755); err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2930e292f280efb4",
            "equalIndicator/v1": "8c3024561b565fdf06d1775baa7fdad48f4a297e57e1edad8740633043449278"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getTerminalWidth' coverage is below the threshold 50%",
            "markdown": "Method `getTerminalWidth` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 6,
                  "charOffset": 6301,
                  "charLength": 16,
                  "snippet": {
                    "text": "getTerminalWidth"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 189,
                  "startColumn": 1,
                  "charOffset": 6240,
                  "charLength": 131,
                  "snippet": {
                    "text": "\n// getTerminalWidth returns the width of the terminal.\nfunc getTerminalWidth() int {\n\twidth, _ := terminal.Size()\n\tif width <= 0 {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a78118975472ac3a",
            "equalIndicator/v1": "8c4d326fa3fdc75dfffda15acc44257aceac700b742318e31d5e878d0db4ac2e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'reverse' coverage is below the threshold 50%",
            "markdown": "Method `reverse` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 6,
                  "charOffset": 6908,
                  "charLength": 7,
                  "snippet": {
                    "text": "reverse"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 274,
                  "startColumn": 1,
                  "charOffset": 6858,
                  "charLength": 157,
                  "snippet": {
                    "text": "\n// reverse reverses the given string slice.\nfunc reverse(s []string) []string {\n\tfor i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n\t\ts[i], s[j] = s[j], s[i]"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ee0e2b832ced4302",
            "equalIndicator/v1": "8c98041929290fc4e72f5504bb47892aa20c4256f5232125e6ce783e38bac6ce"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'DefineOptions' coverage is below the threshold 50%",
            "markdown": "Method `DefineOptions` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/clioptions.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 6,
                  "charOffset": 1512,
                  "charLength": 13,
                  "snippet": {
                    "text": "DefineOptions"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 1450,
                  "charLength": 185,
                  "snippet": {
                    "text": "type LinterSpecificInitializer func() ThirdPartyOptions\n\nfunc DefineOptions(initializer LinterSpecificInitializer) *QodanaOptions {\n\toptions := &QodanaOptions{}\n\tif initializer != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "64b1153ee3616a17",
            "equalIndicator/v1": "8cbe9e83d7bbce29af4b29e558639a223032d5b08001cff48a7e4023baa24301"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in ShowReport)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in ShowReport)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 4,
                  "charOffset": 6382,
                  "charLength": 31,
                  "snippet": {
                    "text": "func(_ *pterm.SpinnerPrinter) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 6301,
                  "charLength": 255,
                  "snippet": {
                    "text": "\t\tWarningMessage(\"Press Ctrl+C to stop serving the report\\n\")\n\t\tPrintProcess(\n\t\t\tfunc(_ *pterm.SpinnerPrinter) {\n\t\t\t\tif _, err := os.Stat(reportPath); os.IsNotExist(err) {\n\t\t\t\t\tlogrus.Fatal(\"Qodana report not found. Get a report by running `qodana scan`\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "451f56f01de4527b",
            "equalIndicator/v1": "8da32310658de6ad7b219fa38a2b94f2d2856fa9ea33b29a6c13d42db7f131f6"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'IsDotNet' coverage is below the threshold 50%",
            "markdown": "Method `IsDotNet` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 411,
                  "startColumn": 22,
                  "charOffset": 14099,
                  "charLength": 8,
                  "snippet": {
                    "text": "IsDotNet"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 409,
                  "startColumn": 1,
                  "charOffset": 14075,
                  "charLength": 163,
                  "snippet": {
                    "text": "}\n\nfunc (q *QodanaYaml) IsDotNet() bool {\n\treturn strings.Contains(q.Linter, \"dotnet\") || strings.Contains(q.Linter, \"cdnet\") || strings.Contains(q.Ide, \"QDNET\")\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1e0ddee818607a5b",
            "equalIndicator/v1": "8e7c093b6ab54aa412ad2e8418856c148b6309c4871bd6adeeffd65c45bc1e60"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'printPath' coverage is below the threshold 50%",
            "markdown": "Method `printPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 6,
                  "charOffset": 6857,
                  "charLength": 9,
                  "snippet": {
                    "text": "printPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 209,
                  "startColumn": 1,
                  "charOffset": 6806,
                  "charLength": 188,
                  "snippet": {
                    "text": "\n// printPath prints the path of the problem.\nfunc printPath(path string, line int, column int) {\n\tif path != \"\" && line > 0 && column > 0 {\n\t\tfmt.Printf(\" %s:%d:%d\\n\", path, line, column)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "102e3731e39ea3e5",
            "equalIndicator/v1": "8f23f43332a6a98c6c2a3e10d7c2aa021a30109776e7257117aa3f5c4788baf9"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'installIdeWindowsExe' coverage is below the threshold 50%",
            "markdown": "Method `installIdeWindowsExe` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/installers.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 6,
                  "charOffset": 5168,
                  "charLength": 20,
                  "snippet": {
                    "text": "installIdeWindowsExe"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 196,
                  "startColumn": 1,
                  "charOffset": 5052,
                  "charLength": 310,
                  "snippet": {
                    "text": "\n// installIdeWindowsExe is used as a fallback, since it needs installation privileges and alters the registry\nfunc installIdeWindowsExe(archivePath string, targetDir string) error {\n\t_, err := exec.Command(archivePath, \"/S\", fmt.Sprintf(\"/D=%s\", platform.QuoteForWindows(targetDir))).Output()\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c0c50e10bc1c2b55",
            "equalIndicator/v1": "90efd60b5f7ffe359ae7a7cbf674952882f6e0cf328753a04774e31b76c6eb2d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'statistics.go' coverage is below the threshold 50%",
            "markdown": "File `statistics.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/statistics.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c7c4a5188d045ae9",
            "equalIndicator/v1": "9148d598779a40034f3fc7d49fc2a6238cdb7e2c9262d20c557161340140b5da"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'product_info.go' coverage is below the threshold 50%",
            "markdown": "File `product_info.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f7ef13dc4adeefeb",
            "equalIndicator/v1": "91dfe45e87df5d639f03bf8d94aa81c43f1b852f52bbcc84aed9fa89d31c64e3"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'setDefaultCommandIfNeeded' coverage is below the threshold 50%",
            "markdown": "Method `setDefaultCommandIfNeeded` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/root.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 6,
                  "charOffset": 1324,
                  "charLength": 25,
                  "snippet": {
                    "text": "setDefaultCommandIfNeeded"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1229,
                  "charLength": 292,
                  "snippet": {
                    "text": "\n// setDefaultCommandIfNeeded sets default scan command if no other command is requested.\nfunc setDefaultCommandIfNeeded(rootCmd *cobra.Command, args []string) {\n\tif !(isHelp(args) || isCommandRequested(rootCmd.Commands(), args[1:]) != \"\") {\n\t\tnewArgs := append([]string{\"scan\"}, args[1:]...)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "72fa706839ac6dbc",
            "equalIndicator/v1": "950fe38492432c603daa7a11165d7dd95fce7a0d8ac607620e316690e83f242b"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'CheckEAP' coverage is below the threshold 50%",
            "markdown": "Method `CheckEAP` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/eap.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "charOffset": 687,
                  "charLength": 8,
                  "snippet": {
                    "text": "CheckEAP"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 679,
                  "charLength": 73,
                  "snippet": {
                    "text": ")\n\nfunc CheckEAP(buildDateStr string, isEap bool) {\n\tif !isEap {\n\t\treturn"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3b357ff3dbf3517d",
            "equalIndicator/v1": "96239d39fb2bdb1bf33a09aafe2ee1b10ca8c8b7a7c3836a23a7d885f3d8f3eb"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitDiffNameOnly' coverage is below the threshold 50%",
            "markdown": "Method `GitDiffNameOnly` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 6,
                  "charOffset": 2790,
                  "charLength": 15,
                  "snippet": {
                    "text": "GitDiffNameOnly"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2782,
                  "charLength": 158,
                  "snippet": {
                    "text": "}\n\nfunc GitDiffNameOnly(cwd string, diffStart string, diffEnd string) []string {\n\treturn gitOutput(cwd, []string{\"diff\", \"--name-only\", diffStart, diffEnd})\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "91bbcdc0bfadd6b9",
            "equalIndicator/v1": "9ad0f656107e3252b6ed6164179867aa3a06dad97c25d9cec42fc080231655b8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitLog' coverage is below the threshold 50%",
            "markdown": "Method `GitLog` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 6,
                  "charOffset": 1980,
                  "charLength": 6,
                  "snippet": {
                    "text": "GitLog"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 68,
                  "startColumn": 1,
                  "charOffset": 1899,
                  "charLength": 203,
                  "snippet": {
                    "text": "\n// GitLog returns the git log of the given repository in the given format.\nfunc GitLog(cwd string, format string, since int) []string {\n\targs := []string{\"--no-pager\", \"log\", \"--all\"}\n\tif format != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d68e03f34e8af718",
            "equalIndicator/v1": "9df15cc06c740c66db1c51c2eba7e4b1f58b6fb7006490d07e944deb81e1b3f8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getBranchName' coverage is below the threshold 50%",
            "markdown": "Method `getBranchName` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarifVersioning.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 6,
                  "charOffset": 2507,
                  "charLength": 13,
                  "snippet": {
                    "text": "getBranchName"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2499,
                  "charLength": 162,
                  "snippet": {
                    "text": "}\n\nfunc getBranchName(pwd string) (string, error) {\n\tbranch, _, ret, err := RunCmdRedirectOutput(pwd, \"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\")\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "746dbb0fcfcfaab3",
            "equalIndicator/v1": "9e19019a64489cdbe95e9e19642a05de9b2da94684f33d1693736ecee5c34c37"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'isHelp' coverage is below the threshold 50%",
            "markdown": "Method `isHelp` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/root.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 6,
                  "charOffset": 873,
                  "charLength": 6,
                  "snippet": {
                    "text": "isHelp"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 822,
                  "charLength": 148,
                  "snippet": {
                    "text": "\n// isHelp checks if only help was requested.\nfunc isHelp(args []string) bool {\n\treturn len(args) == 2 && (args[1] == \"--help\" || args[1] == \"-h\")\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c2ba48bcee44a8a2",
            "equalIndicator/v1": "9e2123216f28f7070b179e85897e930da1f81ceffb09660927b219bda1703526"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'SuccessMessage' coverage is below the threshold 50%",
            "markdown": "Method `SuccessMessage` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 6,
                  "charOffset": 3425,
                  "charLength": 14,
                  "snippet": {
                    "text": "SuccessMessage"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "charOffset": 3361,
                  "charLength": 179,
                  "snippet": {
                    "text": "\n// SuccessMessage prints a success message with the icon.\nfunc SuccessMessage(message string, a ...interface{}) {\n\tmessage = fmt.Sprintf(message, a...)\n\ticon := pterm.Green(\"✓ \")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c5f4036318ce1892",
            "equalIndicator/v1": "9f6b771bcd40131127904da214e96d025a2d64eabfb66f84b200954107130a71"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'findSarifFiles' coverage is below the threshold 50%",
            "markdown": "Method `findSarifFiles` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 6,
                  "charOffset": 4897,
                  "charLength": 14,
                  "snippet": {
                    "text": "findSarifFiles"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 161,
                  "startColumn": 1,
                  "charOffset": 4889,
                  "charLength": 158,
                  "snippet": {
                    "text": "}\n\nfunc findSarifFiles(root string) ([]string, error) {\n\tvar files []string\n\terr := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0ad4677f167c46db",
            "equalIndicator/v1": "a019763cc909a3cd56dae7a675b4d6a9837bd782bae00ddf16f6ae340f86d2b1"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'gitRun' coverage is below the threshold 50%",
            "markdown": "Method `gitRun` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "charOffset": 791,
                  "charLength": 6,
                  "snippet": {
                    "text": "gitRun"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 702,
                  "charLength": 188,
                  "snippet": {
                    "text": "\n// gitRun runs the git command in the given directory and returns an error if any.\nfunc gitRun(cwd string, command []string) error {\n\tcmd := exec.Command(\"git\", command...)\n\tcmd.Dir = cwd"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1071b703f153b6d8",
            "equalIndicator/v1": "a141609b3c8992575a3854551e86c9f4d2223f3e54bc0d55aa19bd7addc60b57"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetLinterSpecificOptions' coverage is below the threshold 50%",
            "markdown": "Method `GetLinterSpecificOptions` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/clioptions.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 25,
                  "charOffset": 1723,
                  "charLength": 24,
                  "snippet": {
                    "text": "GetLinterSpecificOptions"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 58,
                  "startColumn": 1,
                  "charOffset": 1696,
                  "charLength": 174,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) GetLinterSpecificOptions() *ThirdPartyOptions {\n\tif o.LinterSpecific != nil {\n\t\tif linterSpecific, ok := o.LinterSpecific.(ThirdPartyOptions); ok {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6632240d037f9b97",
            "equalIndicator/v1": "a19f408280a7ab11dce17e896a6998ea01bbfb7c3afcf93ed849812a182211c1"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetQodanaYaml' coverage is below the threshold 50%",
            "markdown": "Method `GetQodanaYaml` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 6,
                  "charOffset": 1390,
                  "charLength": 13,
                  "snippet": {
                    "text": "GetQodanaYaml"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1294,
                  "charLength": 218,
                  "snippet": {
                    "text": "\n// GetQodanaYaml returns a parsed qodana.yaml or qodana.yml or error if not found/invalid\nfunc GetQodanaYaml(project string) (QodanaYaml, error) {\n\tq := &QodanaYaml{}\n\tqodanaYamlPath, err := GetQodanaYamlPath(project)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3e7e2e60bfedef92",
            "equalIndicator/v1": "a2056096226b0e8282f712ff731be7c5ea3b125819d8326fc85ff35c6f18f167"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getRepositoryUri' coverage is below the threshold 50%",
            "markdown": "Method `getRepositoryUri` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarifVersioning.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 6,
                  "charOffset": 1858,
                  "charLength": 16,
                  "snippet": {
                    "text": "getRepositoryUri"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 1850,
                  "charLength": 151,
                  "snippet": {
                    "text": "}\n\nfunc getRepositoryUri(pwd string) (string, error) {\n\turi, _, ret, err := RunCmdRedirectOutput(pwd, \"git\", \"ls-remote\", \"--get-url\")\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "edcb9fb2823d1bc0",
            "equalIndicator/v1": "a34ed3aa5a95eb91017e9813c36d80b12f8e9dcf9a9a4a501df6cb5f5bc8ef8e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'isCommandRequested' coverage is below the threshold 50%",
            "markdown": "Method `isCommandRequested` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/root.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 6,
                  "charOffset": 1035,
                  "charLength": 18,
                  "snippet": {
                    "text": "isCommandRequested"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 971,
                  "charLength": 190,
                  "snippet": {
                    "text": "\n// isCommandRequested checks if any command is requested.\nfunc isCommandRequested(commands []*cobra.Command, args []string) string {\n\tfor _, c := range commands {\n\t\tfor _, a := range args {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e11978e0590e79a9",
            "equalIndicator/v1": "a424cddc9b91bd789d696151e53a8165622bfddeeb15305dbe332b48f528165d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'patchIdeScript' coverage is below the threshold 50%",
            "markdown": "Method `patchIdeScript` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 6,
                  "charOffset": 7518,
                  "charLength": 14,
                  "snippet": {
                    "text": "patchIdeScript"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 298,
                  "startColumn": 1,
                  "charOffset": 7459,
                  "charLength": 272,
                  "snippet": {
                    "text": "\n// temporary solution to fix runs in the native mode\nfunc patchIdeScript(product product, strToRemove string, confDirPath string) string {\n\text := filepath.Ext(product.IdeScript)\n\tnewFilePath := filepath.Join(confDirPath, fmt.Sprintf(\"%s%s\", product.BaseScriptName, ext))"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f3d7ab8d6711a26f",
            "equalIndicator/v1": "a47641d194b0a4abc9c62f46361c6614dd9450003a6f7b17387d69e4350c03ff"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'MountTools' coverage is below the threshold 50%",
            "markdown": "Method `MountTools` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/mount.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 22,
                  "charOffset": 796,
                  "charLength": 10,
                  "snippet": {
                    "text": "MountTools"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 772,
                  "charLength": 260,
                  "snippet": {
                    "text": ")\n\nfunc (o *CltOptions) MountTools(_ string, mountPath string, _ *platform.QodanaOptions) (map[string]string, error) {\n\tval := make(map[string]string)\n\tval[\"clt\"] = filepath.Join(mountPath, \"tools\", \"netcoreapp3.1\", \"any\", \"JetBrains.CommandLine.Products.dll\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2c2e10f66124bd43",
            "equalIndicator/v1": "a48f0e6780776256ef81a81913932d4157373bbce0b44ecc1f2ec297d49e1331"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'OpenDir' coverage is below the threshold 50%",
            "markdown": "Method `OpenDir` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 6,
                  "charOffset": 2371,
                  "charLength": 7,
                  "snippet": {
                    "text": "OpenDir"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 90,
                  "startColumn": 1,
                  "charOffset": 2310,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n// OpenDir opens directory in the default file manager\nfunc OpenDir(path string) error {\n\tvar cmd string\n\tvar args []string"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "90490bcd5a89e108",
            "equalIndicator/v1": "a54b3900b91bd7e19f19216bba6eae277c1b68ff95cd4065e8fea82a408cec39"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'SendReport' coverage is below the threshold 50%",
            "markdown": "Method `SendReport` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/publisher.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 6,
                  "charOffset": 1283,
                  "charLength": 10,
                  "snippet": {
                    "text": "SendReport"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1233,
                  "charLength": 258,
                  "snippet": {
                    "text": "\n// SendReport sends report to Qodana Cloud.\nfunc SendReport(opts *QodanaOptions, token string, publisherPath string, javaPath string) {\n\tif _, err := os.Stat(publisherPath); os.IsNotExist(err) {\n\t\terr := os.MkdirAll(filepath.Dir(publisherPath), os.ModePerm)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bd6ee23f692ab06b",
            "equalIndicator/v1": "a58e841b4da9a5747fba5f9066ce48f743b6511e7b31589c2e9ddda3944a272d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitResetBack' coverage is below the threshold 50%",
            "markdown": "Method `GitResetBack` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 6,
                  "charOffset": 1191,
                  "charLength": 12,
                  "snippet": {
                    "text": "GitResetBack"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1147,
                  "charLength": 131,
                  "snippet": {
                    "text": "\n// GitResetBack aborts the git reset.\nfunc GitResetBack(cwd string) error {\n\treturn gitRun(cwd, []string{\"reset\", \"'HEAD@{1}'\"})\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8321d109a9f8fb9a",
            "equalIndicator/v1": "a6e0d9d56dc258e9e41415c8127564c83600ef5c889ca9519eebe99fc750debe"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in createFuserEventChannel)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in createFuserEventChannel)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/statistics.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 5,
                  "charOffset": 994,
                  "charLength": 8,
                  "snippet": {
                    "text": "func() {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 924,
                  "charLength": 130,
                  "snippet": {
                    "text": "\tch := make(chan tooling.FuserEvent)\n\tguid := uuid.New().String()\n\tgo func() {\n\t\tfor event := range ch {\n\t\t\tevent.SessionId = guid"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b18785928c39ab7f",
            "equalIndicator/v1": "a718b9c0df293f14482200d5fd9302c64426ac8c406692a1cf9baf0ce674c9bd"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'UpdateText' coverage is below the threshold 50%",
            "markdown": "Method `UpdateText` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 6,
                  "charOffset": 5497,
                  "charLength": 10,
                  "snippet": {
                    "text": "UpdateText"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 164,
                  "startColumn": 1,
                  "charOffset": 5444,
                  "charLength": 171,
                  "snippet": {
                    "text": "\n// UpdateText updates the text of the spinner.\nfunc UpdateText(spinner *pterm.SpinnerPrinter, message string) {\n\tif spinner != nil {\n\t\tspinner.UpdateText(message + \"...\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "08293adb0602cb0a",
            "equalIndicator/v1": "a73652586b26e153b5305f4267942de56e6da4d88ba4bea0323df6f44079538d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'PrintProcess' coverage is below the threshold 50%",
            "markdown": "Method `PrintProcess` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 6,
                  "charOffset": 4476,
                  "charLength": 12,
                  "snippet": {
                    "text": "PrintProcess"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 131,
                  "startColumn": 1,
                  "charOffset": 4376,
                  "charLength": 272,
                  "snippet": {
                    "text": "\n// PrintProcess prints the message for processing phase. TODO: Add ETA based on previous runs\nfunc PrintProcess(f func(spinner *pterm.SpinnerPrinter), start string, finished string) {\n\tif err := spin(f, start); err != nil {\n\t\tlog.Fatal(\"\\nProblem occurred:\", err.Error())"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "67e4f4398cd8b837",
            "equalIndicator/v1": "a8d270593e0d93260e2acb08be08ec3cee975a66482370506c8cc7cd18f4ef5a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitReset' coverage is below the threshold 50%",
            "markdown": "Method `GitReset` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 6,
                  "charOffset": 1024,
                  "charLength": 8,
                  "snippet": {
                    "text": "GitReset"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 959,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n// GitReset resets the git repository to the given commit.\nfunc GitReset(cwd string, sha string) error {\n\treturn gitRun(cwd, []string{\"reset\", \"--soft\", strings.TrimPrefix(sha, \"CI\")})\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "df30bb12dfbba15a",
            "equalIndicator/v1": "aafda242347555a78052c46ff59976f421f45d183893d86b7297dd90a95409bc"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ProcessAuxiliaryTool' coverage is below the threshold 50%",
            "markdown": "Method `ProcessAuxiliaryTool` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 6,
                  "charOffset": 2652,
                  "charLength": 20,
                  "snippet": {
                    "text": "ProcessAuxiliaryTool"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2644,
                  "charLength": 182,
                  "snippet": {
                    "text": "}\n\nfunc ProcessAuxiliaryTool(toolName, moniker, mountPath string, bytes []byte) string {\n\ttoolPath := filepath.Join(mountPath, toolName)\n\tif _, err := os.Stat(toolPath); err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ecb9ee8434c2dea3",
            "equalIndicator/v1": "ad334b98186dd6893a83e7d537a16c5ec447e9f3545a3410044ed0f7f0af97c5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'PrintLinterLog' coverage is below the threshold 50%",
            "markdown": "Method `PrintLinterLog` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 6,
                  "charOffset": 4117,
                  "charLength": 14,
                  "snippet": {
                    "text": "PrintLinterLog"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 119,
                  "startColumn": 1,
                  "charOffset": 4045,
                  "charLength": 187,
                  "snippet": {
                    "text": "\n// PrintLinterLog prints the linter logs with color, when needed.\nfunc PrintLinterLog(line string) {\n\tif strings.Contains(line, \" / /\") ||\n\t\tstrings.Contains(line, \"_              _\") ||"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5d981b44d6aaf452",
            "equalIndicator/v1": "ae0366e91dd02d5268d41ad9d490da08dc1316f7a76ffa76279960bd5e32544a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getToolsMountPath' coverage is below the threshold 50%",
            "markdown": "Method `getToolsMountPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 6,
                  "charOffset": 1917,
                  "charLength": 17,
                  "snippet": {
                    "text": "getToolsMountPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1909,
                  "charLength": 121,
                  "snippet": {
                    "text": "}\n\nfunc getToolsMountPath(options *QodanaOptions) string {\n\tlinterInfo := options.GetLinterInfo()\n\tif linterInfo == nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f0b6e04953f1804c",
            "equalIndicator/v1": "b05d64c7a10964dcc1bd8b0ab6c598ec8e9830f60a699ab98c9bb1dc0c93c9d5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'CopyFile' coverage is below the threshold 50%",
            "markdown": "Method `CopyFile` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/fileops.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "charOffset": 738,
                  "charLength": 8,
                  "snippet": {
                    "text": "CopyFile"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 689,
                  "charLength": 131,
                  "snippet": {
                    "text": "\n// CopyFile copies a file from src to dst.\nfunc CopyFile(src, dst string) error {\n\tinput, err := os.ReadFile(src)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d3aea770eeda2165",
            "equalIndicator/v1": "b393bcaebdfaaf201b8afa6fb4f953b5dd17e5b11e87b568805087ecd330a205"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'utils.go' coverage is below the threshold 50%",
            "markdown": "File `utils.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e24ba66e5a41bc21",
            "equalIndicator/v1": "b5a27262dd390ee2cb66c0053133b55d26909325706b4201bc2c3a24beffd801"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'openBrowser' coverage is below the threshold 50%",
            "markdown": "Method `openBrowser` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 6,
                  "charOffset": 7554,
                  "charLength": 11,
                  "snippet": {
                    "text": "openBrowser"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 254,
                  "startColumn": 1,
                  "charOffset": 7490,
                  "charLength": 130,
                  "snippet": {
                    "text": "\n// openBrowser opens the default browser to the given url\nfunc openBrowser(url string) error {\n\tvar cmd string\n\tvar args []string"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fe166c5b38634b73",
            "equalIndicator/v1": "b6fa66e2cae944bb7ef3e97e23da610f02b98d8edbf48c3f38831e867d96e2b5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'umount' coverage is below the threshold 50%",
            "markdown": "Method `umount` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 6,
                  "charOffset": 2433,
                  "charLength": 6,
                  "snippet": {
                    "text": "umount"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2359,
                  "charLength": 161,
                  "snippet": {
                    "text": "\n// umount removes the temporary folder with extracted helper tools.\nfunc umount() {\n\tif _, err := os.Stat(tempMountPath); err != nil {\n\t\tif os.IsNotExist(err) {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d86c74e5893658eb",
            "equalIndicator/v1": "b8d3b376a1582651ff19b6ec561a9315639d90185ef7b2c7536954a89b5c8292"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'logProjectOpen' coverage is below the threshold 50%",
            "markdown": "Method `logProjectOpen` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/statistics.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 6,
                  "charOffset": 2646,
                  "charLength": 14,
                  "snippet": {
                    "text": "logProjectOpen"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "charOffset": 2638,
                  "charLength": 100,
                  "snippet": {
                    "text": "}\n\nfunc logProjectOpen(ch chan tooling.FuserEvent) {\n\twg.Add(1)\n\t// get current time in milliseconds"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1e0eed11d635cc6d",
            "equalIndicator/v1": "b8ff428ef4027e88698f4ebd0317e446ff08b137426ed9f2aa1a31644d8edab2"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetDotNetConfig' coverage is below the threshold 50%",
            "markdown": "Method `GetDotNetConfig` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 6,
                  "charOffset": 3959,
                  "charLength": 15,
                  "snippet": {
                    "text": "GetDotNetConfig"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 3877,
                  "charLength": 265,
                  "snippet": {
                    "text": "\n// GetDotNetConfig gets .NET config for the given path and saves configName\nfunc GetDotNetConfig(projectDir string, yamlName string) bool {\n\tpossibleOptions := FindFiles(projectDir, []string{\".sln\", \".csproj\", \".vbproj\", \".fsproj\"})\n\tif len(possibleOptions) <= 1 {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1346f794d840307e",
            "equalIndicator/v1": "babdb365396a96e6e42a7e4ba4d7905145ffdb0ec8b11959e23b24f2a92535f7"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetQodanaYamlPath' coverage is below the threshold 50%",
            "markdown": "Method `GetQodanaYamlPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "charOffset": 886,
                  "charLength": 17,
                  "snippet": {
                    "text": "GetQodanaYamlPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "charOffset": 813,
                  "charLength": 253,
                  "snippet": {
                    "text": "\n// GetQodanaYamlPath returns the path to qodana.yaml or qodana.yml\nfunc GetQodanaYamlPath(project string) (string, error) {\n\tqodanaYamlPath := filepath.Join(project, \"qodana.yaml\")\n\tif _, err := os.Stat(qodanaYamlPath); errors.Is(err, os.ErrNotExist) {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a8f42ed863643697",
            "equalIndicator/v1": "bb476020b7c5381cc035c7988bc2f33eff92518ec7e0c9e87b693a27f93d7df8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'run.go' coverage is below the threshold 50%",
            "markdown": "File `run.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "52c0226a8e0085cc",
            "equalIndicator/v1": "bb70f3046e2996a8db1c03ee5a2b8402b6ff94855b679871443550006a184bee"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'output.go' coverage is below the threshold 50%",
            "markdown": "File `output.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a21037d3e75820a9",
            "equalIndicator/v1": "bd568480da34034da64d45438d41e0f24cbc40e57052caa3cd326f8089674e1a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'clioptions.go' coverage is below the threshold 50%",
            "markdown": "File `clioptions.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/clioptions.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c10928db34704e42",
            "equalIndicator/v1": "be01e3663028f301ef058a9b2004853f67ef7d86ba0618f4c5722692205cdc75"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'system.go' coverage is below the threshold 50%",
            "markdown": "File `system.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "07c845f8cebfb8ed",
            "equalIndicator/v1": "c302f27c0d95f394a8048d038ce9284e74fed6d2a3789d4bccd919389eefb268"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'noCache' coverage is below the threshold 50%",
            "markdown": "Method `noCache` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 6,
                  "charOffset": 7959,
                  "charLength": 7,
                  "snippet": {
                    "text": "noCache"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 272,
                  "startColumn": 1,
                  "charOffset": 7886,
                  "charLength": 147,
                  "snippet": {
                    "text": "\n// noCache handles serving the static files with no cache headers.\nfunc noCache(h http.Handler) http.Handler {\n\tetagHeaders := []string{\n\t\t\"ETag\","
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "add4ce76a80ff6c8",
            "equalIndicator/v1": "c3059ed2a6f93ae49667a03a7dfb9c2a037d01360a639afb86e3491f7eb80605"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in Sort)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in Sort)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 28,
                  "charOffset": 13321,
                  "charLength": 21,
                  "snippet": {
                    "text": "func(i, j int) bool {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 387,
                  "startColumn": 1,
                  "charOffset": 13237,
                  "charLength": 168,
                  "snippet": {
                    "text": "\t\t\treturn Lower(rule.Keys[i]) < Lower(rule.Keys[j])\n\t\t})\n\t\tsort.Slice(rule.Allowed, func(i, j int) bool {\n\t\t\treturn Lower(rule.Allowed[i]) < Lower(rule.Allowed[j])\n\t\t})"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "952d1e92f636ebdb",
            "equalIndicator/v1": "c36e8fc5b90baa02a10b6cc3ab923ecdad709a72d82097a8d394df0d4f9fdad6"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in WriteReport)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in WriteReport)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 8,
                  "charOffset": 2620,
                  "charLength": 18,
                  "snippet": {
                    "text": "func(f *os.File) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 2609,
                  "charLength": 66,
                  "snippet": {
                    "text": "\t}\n\n\tdefer func(f *os.File) {\n\t\terr := f.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "091ebd30470c723c",
            "equalIndicator/v1": "c4719465f5d0ceac81cba7f2b4b55f775b9742b58b11fabcd6a165513bd44697"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'guessProduct' coverage is below the threshold 50%",
            "markdown": "Method `guessProduct` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 6,
                  "charOffset": 4693,
                  "charLength": 12,
                  "snippet": {
                    "text": "guessProduct"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 203,
                  "startColumn": 1,
                  "charOffset": 4645,
                  "charLength": 149,
                  "snippet": {
                    "text": "\n// guessProduct fills all product fields.\nfunc guessProduct(opts *QodanaOptions) {\n\tProd.Home = opts.Ide\n\tif //goland:noinspection GoBoolExpressions"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f8480e3cd431f103",
            "equalIndicator/v1": "c49e24fb0416786aecde9bd44dd814e4093aea60dd0181101b820b34fdf78f1a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getRevisionId' coverage is below the threshold 50%",
            "markdown": "Method `getRevisionId` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarifVersioning.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 6,
                  "charOffset": 2236,
                  "charLength": 13,
                  "snippet": {
                    "text": "getRevisionId"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 82,
                  "startColumn": 1,
                  "charOffset": 2228,
                  "charLength": 143,
                  "snippet": {
                    "text": "}\n\nfunc getRevisionId(pwd string) (string, error) {\n\trev, _, ret, err := RunCmdRedirectOutput(pwd, \"git\", \"rev-parse\", \"HEAD\")\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6975a8acaba0471a",
            "equalIndicator/v1": "c58df4e645e88be176de445f91ddcdc833a29bf820cb57bff8e85b1db61aed0d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getLatestVersion' coverage is below the threshold 50%",
            "markdown": "Method `getLatestVersion` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 6,
                  "charOffset": 1822,
                  "charLength": 16,
                  "snippet": {
                    "text": "getLatestVersion"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 63,
                  "startColumn": 1,
                  "charOffset": 1747,
                  "charLength": 154,
                  "snippet": {
                    "text": "\n// getLatestVersion returns the latest published version of the CLI.\nfunc getLatestVersion() string {\n\tresp, err := http.Get(releaseUrl)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2310a6ab8d45ce24",
            "equalIndicator/v1": "c86dfa2b3ddc5a0f1c0078db9f109849b22491d00e4229ebafd568d20ddfb9e7"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'RunAnalysis' coverage is below the threshold 50%",
            "markdown": "Method `RunAnalysis` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 22,
                  "charOffset": 901,
                  "charLength": 11,
                  "snippet": {
                    "text": "RunAnalysis"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 877,
                  "charLength": 166,
                  "snippet": {
                    "text": "}\n\nfunc (o *CltOptions) RunAnalysis(opts *platform.QodanaOptions) error {\n\toptions := &LocalOptions{opts}\n\tyaml := platform.GetQodanaYamlOrDefault(options.ProjectDir)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "548236662bc8ef99",
            "equalIndicator/v1": "c9822875af499cfc14737db21c27160198031691da6d0a2de652532443aaf7d8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'IsInteractive' coverage is below the threshold 50%",
            "markdown": "Method `IsInteractive` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 6,
                  "charOffset": 1598,
                  "charLength": 13,
                  "snippet": {
                    "text": "IsInteractive"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 52,
                  "startColumn": 1,
                  "charOffset": 1471,
                  "charLength": 293,
                  "snippet": {
                    "text": "\n// IsInteractive returns true if the current execution environment is interactive (useful for colors/animations toggle).\nfunc IsInteractive() bool {\n\treturn !IsContainer() && os.Getenv(\"NONINTERACTIVE\") == \"\" && (isatty.IsTerminal(os.Stdout.Fd()) || isatty.IsCygwinTerminal(os.Stdout.Fd()))\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bcd988673391ee09",
            "equalIndicator/v1": "cbefd0b63dd849a734c64971d533b95662b0396b95b02a5c027592bead2cc141"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getTokenFromKeychain' coverage is below the threshold 50%",
            "markdown": "Method `getTokenFromKeychain` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 25,
                  "charOffset": 1745,
                  "charLength": 20,
                  "snippet": {
                    "text": "getTokenFromKeychain"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 62,
                  "startColumn": 1,
                  "charOffset": 1718,
                  "charLength": 161,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) getTokenFromKeychain(refresh bool) string {\n\tlog.Debugf(\"project id: %s\", o.Id())\n\tif refresh || os.Getenv(qodanaClearKeyring) != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f64eb718af90100d",
            "equalIndicator/v1": "cc0edefcc1f4aee1a75fe2b01858d85f37a5693f8e3a8a0dce9ce112731c519e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'PrintContributorsTable' coverage is below the threshold 50%",
            "markdown": "Method `PrintContributorsTable` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "charOffset": 864,
                  "charLength": 22,
                  "snippet": {
                    "text": "PrintContributorsTable"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 780,
                  "charLength": 227,
                  "snippet": {
                    "text": "\n// PrintContributorsTable prints the contributors table and helpful messages.\nfunc PrintContributorsTable(contributors []contributor, days int, dirs int) {\n\tcount := len(contributors)\n\tcontributorsTableData := pterm.TableData{"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1cfba62ca7374491",
            "equalIndicator/v1": "cd0f457ee499ebd87424957dce0f8031848d2d72c38269e5ca5585fd5ac14dfd"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'currentTimestamp' coverage is below the threshold 50%",
            "markdown": "Method `currentTimestamp` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/statistics.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 6,
                  "charOffset": 2555,
                  "charLength": 16,
                  "snippet": {
                    "text": "currentTimestamp"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 94,
                  "startColumn": 1,
                  "charOffset": 2547,
                  "charLength": 92,
                  "snippet": {
                    "text": "}\n\nfunc currentTimestamp() int64 {\n\treturn time.Now().UnixNano() / int64(time.Millisecond)\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7b7b7b9dbf8add5d",
            "equalIndicator/v1": "cddd8e0095ce7b8e463ca6afa4c0851774cbf212810d18003fb73838c9cb5330"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'EmptyMessage' coverage is below the threshold 50%",
            "markdown": "Method `EmptyMessage` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 6,
                  "charOffset": 3325,
                  "charLength": 12,
                  "snippet": {
                    "text": "EmptyMessage"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 3243,
                  "charLength": 117,
                  "snippet": {
                    "text": "\n// EmptyMessage is a message that is used when there is no message to show.\nfunc EmptyMessage() {\n\tpterm.Println()\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6dc0c334b0099f83",
            "equalIndicator/v1": "ce4c852f29250e9a532db614c85703986dc4d287cbe1efe084f3c840611d65c5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in ReadReport)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in ReadReport)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 8,
                  "charOffset": 5643,
                  "charLength": 18,
                  "snippet": {
                    "text": "func(f *os.File) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 195,
                  "startColumn": 1,
                  "charOffset": 5615,
                  "charLength": 83,
                  "snippet": {
                    "text": "\t\treturn nil, err\n\t}\n\tdefer func(f *os.File) {\n\t\terr := f.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a0a901dc0711cefb",
            "equalIndicator/v1": "d061c051a3259faf0a2c76e6efd0cfa3548d74a7f5b0852cb5e7cd2e28a49e47"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'findProcess' coverage is below the threshold 50%",
            "markdown": "Method `findProcess` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 6,
                  "charOffset": 849,
                  "charLength": 11,
                  "snippet": {
                    "text": "findProcess"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 788,
                  "charLength": 160,
                  "snippet": {
                    "text": "\n// findProcess using gopsutil to find process by name.\nfunc findProcess(processName string) bool {\n\tif platform.IsContainer() {\n\t\treturn isProcess(processName)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5cd431bf8cc33cc7",
            "equalIndicator/v1": "d1537ff14f871a23a207005890d6de6f74ebdcfd22e0f172423e75d1d1bdc4d3"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'WarnIfPrivateFeedDetected' coverage is below the threshold 50%",
            "markdown": "Method `WarnIfPrivateFeedDetected` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/nuget.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 6,
                  "charOffset": 1155,
                  "charLength": 25,
                  "snippet": {
                    "text": "WarnIfPrivateFeedDetected"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1147,
                  "charLength": 151,
                  "snippet": {
                    "text": "}\n\nfunc WarnIfPrivateFeedDetected(prodCode string, projectPath string) {\n\tif prodCode != QDNET && prodCode != QDNETC || qodanaNugetVarsSet() {\n\t\treturn"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a216bcb70b41e7a1",
            "equalIndicator/v1": "d1f6ded5d41a32281a2815ff7d629b43ffd4e4719e04a8db47a5dafedf003219"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in findSarifFiles)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in findSarifFiles)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 29,
                  "charOffset": 4993,
                  "charLength": 54,
                  "snippet": {
                    "text": "func(path string, info os.FileInfo, err error) error {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 163,
                  "startColumn": 1,
                  "charOffset": 4892,
                  "charLength": 187,
                  "snippet": {
                    "text": "func findSarifFiles(root string) ([]string, error) {\n\tvar files []string\n\terr := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn err"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0c7507f9b71084ef",
            "equalIndicator/v1": "d3b5cba361eb7f0bde10a563a527add4934f42338fc7f792a457219271e2d048"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitCheckout' coverage is below the threshold 50%",
            "markdown": "Method `GitCheckout` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 6,
                  "charOffset": 1338,
                  "charLength": 11,
                  "snippet": {
                    "text": "GitCheckout"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 1279,
                  "charLength": 155,
                  "snippet": {
                    "text": "\n// GitCheckout checks out the given commit / branch.\nfunc GitCheckout(cwd string, where string) error {\n\treturn gitRun(cwd, []string{\"checkout\", where})\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a1580084c329b0da",
            "equalIndicator/v1": "d619dd63879a88889a34ba39a66659fac87e90c20d6fea258d7493caf2d60343"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'CheckForUpdates' coverage is below the threshold 50%",
            "markdown": "Method `CheckForUpdates` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 6,
                  "charOffset": 1269,
                  "charLength": 15,
                  "snippet": {
                    "text": "CheckForUpdates"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 47,
                  "startColumn": 1,
                  "charOffset": 1151,
                  "charLength": 292,
                  "snippet": {
                    "text": "\n// CheckForUpdates check GitHub https://github.com/JetBrains/qodana-cli/ for the latest version of CLI release.\nfunc CheckForUpdates(currentVersion string) {\n\tif currentVersion == \"dev\" || platform.IsContainer() || cienvironment.DetectCIEnvironment() != nil || DisableCheckUpdates {\n\t\treturn"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dbd1ddbb9aef040c",
            "equalIndicator/v1": "d8b3b42e620f2aa1b2156deeb27a4cf6a097e6d49d3475b25cac149d7fc2f6b8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'androidProjectDefaultXml' coverage is below the threshold 50%",
            "markdown": "Method `androidProjectDefaultXml` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/xml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 6,
                  "charOffset": 5564,
                  "charLength": 24,
                  "snippet": {
                    "text": "androidProjectDefaultXml"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 110,
                  "startColumn": 1,
                  "charOffset": 5556,
                  "charLength": 135,
                  "snippet": {
                    "text": "}\n\nfunc androidProjectDefaultXml(androidSdkPath string) string {\n\treturn fmt.Sprintf(`<application>\n  <component name=\"ProjectManager\">"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f418836da1aabb3f",
            "equalIndicator/v1": "d8bac12e3a479a0cc3c58c5fbe606efd31c98d977517e52261742c9753dae209"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'qodanaNugetVarsSet' coverage is below the threshold 50%",
            "markdown": "Method `qodanaNugetVarsSet` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/nuget.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 6,
                  "charOffset": 2438,
                  "charLength": 18,
                  "snippet": {
                    "text": "qodanaNugetVarsSet"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 85,
                  "startColumn": 1,
                  "charOffset": 2430,
                  "charLength": 153,
                  "snippet": {
                    "text": "}\n\nfunc qodanaNugetVarsSet() bool {\n\treturn os.Getenv(qodanaNugetUrl) != \"\" && os.Getenv(qodanaNugetUser) != \"\" && os.Getenv(qodanaNugetPassword) != \"\"\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f9c5e6675599d628",
            "equalIndicator/v1": "d9c2708c2f860c93cbef79f68608defc1d31d969600f44bec4731e788ed250ae"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'setQodanaDotNet' coverage is below the threshold 50%",
            "markdown": "Method `setQodanaDotNet` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 434,
                  "startColumn": 6,
                  "charOffset": 14733,
                  "charLength": 15,
                  "snippet": {
                    "text": "setQodanaDotNet"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 432,
                  "startColumn": 1,
                  "charOffset": 14655,
                  "charLength": 203,
                  "snippet": {
                    "text": "\n// setQodanaDotNet adds the .NET configuration to the qodana.yaml file.\nfunc setQodanaDotNet(path string, dotNet *DotNet, filename string) bool {\n\tq := LoadQodanaYaml(path, filename)\n\tq.DotNet = *dotNet"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "55bf71cdccb89fc9",
            "equalIndicator/v1": "dc120deec5d044fc626affd8baf229a2dc8168ac0b5e933f6732fcdd15055c9c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'LaunchAndLog' coverage is below the threshold 50%",
            "markdown": "Method `LaunchAndLog` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 6,
                  "charOffset": 4891,
                  "charLength": 12,
                  "snippet": {
                    "text": "LaunchAndLog"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 4829,
                  "charLength": 225,
                  "snippet": {
                    "text": "\n// LaunchAndLog launches a process and logs its output.\nfunc LaunchAndLog(opts *QodanaOptions, executable string, args ...string) (int, error) {\n\tstdout, stderr, ret, err := RunCmdRedirectOutput(\"\", args...)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "49ce84ecd9f270bd",
            "equalIndicator/v1": "dc54882b89cf0a5831e956256596451be15685c943ef84fd395043816cc66ca7"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ErrorMessage' coverage is below the threshold 50%",
            "markdown": "Method `ErrorMessage` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 6,
                  "charOffset": 3874,
                  "charLength": 12,
                  "snippet": {
                    "text": "ErrorMessage"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 112,
                  "startColumn": 1,
                  "charOffset": 3813,
                  "charLength": 180,
                  "snippet": {
                    "text": "\n// ErrorMessage prints an error message with the icon.\nfunc ErrorMessage(message string, a ...interface{}) {\n\tmessage = fmt.Sprintf(message, a...)\n\ticon := errorStyle.Sprint(\"✗ \")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b59bf569d5046f5e",
            "equalIndicator/v1": "dc5b421d17026b38b17ec9da7430e5558c444479dd5ac11938f5fe700819e6fa"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'RunGUID' coverage is below the threshold 50%",
            "markdown": "Method `RunGUID` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 6,
                  "charOffset": 6787,
                  "charLength": 7,
                  "snippet": {
                    "text": "RunGUID"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 238,
                  "startColumn": 1,
                  "charOffset": 6779,
                  "charLength": 94,
                  "snippet": {
                    "text": "}\n\nfunc RunGUID() string {\n\trunGUID := os.Getenv(\"QODANA_AUTOMATION_GUID\")\n\tif runGUID == \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5e8d7b0542a8cbb2",
            "equalIndicator/v1": "dcd26304fe78000614fed405f4766383dc78463c4d62621e362a80c8a00ebe40"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'InitCli' coverage is below the threshold 50%",
            "markdown": "Method `InitCli` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/root.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 6,
                  "charOffset": 3330,
                  "charLength": 7,
                  "snippet": {
                    "text": "InitCli"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 109,
                  "startColumn": 1,
                  "charOffset": 3268,
                  "charLength": 118,
                  "snippet": {
                    "text": "\n// InitCli adds all child commands to the root command.\nfunc InitCli() {\n\trootCommand.AddCommand(\n\t\tnewInitCommand(),"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "591b075e2dbda6d1",
            "equalIndicator/v1": "dd525d4f66501b7d84a51fe5c80f1f960067f4debb57110a9b2db9451d8f8324"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in installIdeMacOS)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in installIdeMacOS)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/installers.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 8,
                  "charOffset": 6527,
                  "charLength": 25,
                  "snippet": {
                    "text": "func(command *exec.Cmd) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 232,
                  "startColumn": 1,
                  "charOffset": 6470,
                  "charLength": 123,
                  "snippet": {
                    "text": "\t\treturn fmt.Errorf(\"hdiutil attach: %s\", err)\n\t}\n\tdefer func(command *exec.Cmd) {\n\t\terr := command.Run()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "915bb9ca2b3e373e",
            "equalIndicator/v1": "dd76a09e63a1e6d212897d47be57d68bc71d926e6e099556ab2aa42778232912"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetInfo' coverage is below the threshold 50%",
            "markdown": "Method `GetInfo` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 22,
                  "charOffset": 1100,
                  "charLength": 7,
                  "snippet": {
                    "text": "GetInfo"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 1076,
                  "charLength": 128,
                  "snippet": {
                    "text": "}\n\nfunc (o *CltOptions) GetInfo(_ *platform.QodanaOptions) *platform.LinterInfo {\n\t// todo: vary by release\n\treturn o.LinterInfo"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5164b96d4748bf8e",
            "equalIndicator/v1": "dd796dc12b7e3d83717921f1df1e888c193cdb27dc167b7fa68e19326074cf4e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'checkProjectDir' coverage is below the threshold 50%",
            "markdown": "Method `checkProjectDir` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/scan.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 6,
                  "charOffset": 3027,
                  "charLength": 15,
                  "snippet": {
                    "text": "checkProjectDir"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 3019,
                  "charLength": 138,
                  "snippet": {
                    "text": "}\n\nfunc checkProjectDir(projectDir string) {\n\tif platform.IsInteractive() && core.IsHomeDirectory(projectDir) {\n\t\tplatform.WarningMessage("
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "533c19ed47088f78",
            "equalIndicator/v1": "dddc94e687a41f0459cf1dfd911b224bb1ed699e388e6b29e12dc0ad78e29b53"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'jdkTableXml' coverage is below the threshold 50%",
            "markdown": "Method `jdkTableXml` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/xml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 6,
                  "charOffset": 641,
                  "charLength": 11,
                  "snippet": {
                    "text": "jdkTableXml"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 633,
                  "charLength": 116,
                  "snippet": {
                    "text": ")\n\nfunc jdkTableXml(jdkPath string) string {\n\treturn fmt.Sprintf(`<application>\n  <component name=\"ProjectJdkTable\">"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "12b2c02138dc1710",
            "equalIndicator/v1": "de378277fba57f95cf9282e03b1c746d1c8fec5d6a35c17ef145622a8f11b3e3"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'common.go' coverage is below the threshold 50%",
            "markdown": "File `common.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "772bd99fdc67fc16",
            "equalIndicator/v1": "df47268092026e8eeaa5c28e7eeb1636da261fe265ce93031da5d99570fe123a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'sarif.go' coverage is below the threshold 50%",
            "markdown": "File `sarif.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bc714c538c6e050e",
            "equalIndicator/v1": "e0d22d6d38a2bc219ffe040c0426bc1e7e8eeeefd87beacf7b4349e7d18ecdce"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'vmOptionsEnv' coverage is below the threshold 50%",
            "markdown": "Method `vmOptionsEnv` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 19,
                  "charOffset": 2224,
                  "charLength": 12,
                  "snippet": {
                    "text": "vmOptionsEnv"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 2203,
                  "charLength": 87,
                  "snippet": {
                    "text": "}\n\nfunc (p *product) vmOptionsEnv() string {\n\tswitch p.BaseScriptName {\n\tcase phpStorm:"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e71bfa3c13ecf558",
            "equalIndicator/v1": "e14263bff1ef851c6237ea28d3741e92de282e0993838aea9acd1403d67ff1ba"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'IsNugetConfigNeeded' coverage is below the threshold 50%",
            "markdown": "Method `IsNugetConfigNeeded` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/nuget.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 6,
                  "charOffset": 2355,
                  "charLength": 19,
                  "snippet": {
                    "text": "IsNugetConfigNeeded"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 81,
                  "startColumn": 1,
                  "charOffset": 2347,
                  "charLength": 84,
                  "snippet": {
                    "text": "}\n\nfunc IsNugetConfigNeeded() bool {\n\treturn IsContainer() && qodanaNugetVarsSet()\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c69a8f8dcc820dbf",
            "equalIndicator/v1": "e2f8ec79d1490ff94e340dc9490cff46de727bc7b9466c0263bc019fd066f7b3"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ShowReport' coverage is below the threshold 50%",
            "markdown": "Method `ShowReport` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/common.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 6,
                  "charOffset": 6124,
                  "charLength": 10,
                  "snippet": {
                    "text": "ShowReport"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 202,
                  "startColumn": 1,
                  "charOffset": 6079,
                  "charLength": 170,
                  "snippet": {
                    "text": "\n// ShowReport serves the Qodana report\nfunc ShowReport(resultsDir string, reportPath string, port int) {\n\tcloudUrl := cloud.GetReportUrl(resultsDir)\n\tif cloudUrl != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "80d8b4e691c4346f",
            "equalIndicator/v1": "e40672f574c410e74c30a46a7ea005cf1e9699a07b4a52bcbe4061580f166486"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'MergeSarifReports' coverage is below the threshold 50%",
            "markdown": "Method `MergeSarifReports` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 6,
                  "charOffset": 873,
                  "charLength": 17,
                  "snippet": {
                    "text": "MergeSarifReports"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 835,
                  "charLength": 186,
                  "snippet": {
                    "text": "const extension = \".sarif.json\"\n\nfunc MergeSarifReports(options *QodanaOptions, deviceId string) (int, error) {\n\tfiles, err := findSarifFiles(options.GetTmpResultsDir())\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "57c2fc94a1e31bd6",
            "equalIndicator/v1": "e5425864e7eb5af95a0df639f05df9e70f6f85f33b88a8860c13b5d7f3b3c0ed"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetDefaultUser' coverage is below the threshold 50%",
            "markdown": "Method `GetDefaultUser` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 6,
                  "charOffset": 7037,
                  "charLength": 14,
                  "snippet": {
                    "text": "GetDefaultUser"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "charOffset": 7029,
                  "charLength": 73,
                  "snippet": {
                    "text": "}\n\nfunc GetDefaultUser() string {\n\tswitch runtime.GOOS {\n\tcase \"windows\":"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "06d7ebcd57feb825",
            "equalIndicator/v1": "e5dcaf4950a6e790a4e4208c1ce34a655d34ff8debd1eb4b7b63c8ee6ccbeeac"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Sort' coverage is below the threshold 50%",
            "markdown": "Method `Sort` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 378,
                  "startColumn": 22,
                  "charOffset": 12905,
                  "charLength": 4,
                  "snippet": {
                    "text": "Sort"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 376,
                  "startColumn": 1,
                  "charOffset": 12848,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n// Sort makes QodanaYaml prettier.\nfunc (q *QodanaYaml) Sort() *QodanaYaml {\n\tsort.Slice(q.Includes, func(i, j int) bool {\n\t\treturn Lower(q.Includes[i].Name) < Lower(q.Includes[j].Name)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f359d8f7e8664dbe",
            "equalIndicator/v1": "e64d3f9ae278598b9701ad9ff3d8d08ef78be5162c877f75135586b9898af703"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'DisableColor' coverage is below the threshold 50%",
            "markdown": "Method `DisableColor` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 6,
                  "charOffset": 1818,
                  "charLength": 12,
                  "snippet": {
                    "text": "DisableColor"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1765,
                  "charLength": 93,
                  "snippet": {
                    "text": "\n// DisableColor disables colors in the output.\nfunc DisableColor() {\n\tpterm.DisableColor()\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a82df08b849af3d9",
            "equalIndicator/v1": "e8be3dceed9956693e819e427d909e2857e3518e42c5ff607aaf6524cf72748a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'CheckDirFiles' coverage is below the threshold 50%",
            "markdown": "Method `CheckDirFiles` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 6,
                  "charOffset": 1603,
                  "charLength": 13,
                  "snippet": {
                    "text": "CheckDirFiles"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 1542,
                  "charLength": 141,
                  "snippet": {
                    "text": "\n// CheckDirFiles checks if a directory contains files.\nfunc CheckDirFiles(dir string) bool {\n\tfiles, err := os.ReadDir(dir)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b08a3bc60f8c724c",
            "equalIndicator/v1": "ed4cc9efe5cfcf73b4f5db48193b448076050e48c74c34cf45f8edf608292807"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'run.go' coverage is below the threshold 50%",
            "markdown": "File `run.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5dae30a71fa82175",
            "equalIndicator/v1": "ed68faabae0807121705dfac295296e1b57765f5a13a41cb1c8eebfa4472fed3"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'PrimaryBold' coverage is below the threshold 50%",
            "markdown": "Method `PrimaryBold` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/output.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 6,
                  "charOffset": 3119,
                  "charLength": 11,
                  "snippet": {
                    "text": "PrimaryBold"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 87,
                  "startColumn": 1,
                  "charOffset": 3054,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n// PrimaryBold prints a message in the primary bold style.\nfunc PrimaryBold(text string, a ...interface{}) string {\n\ttext = fmt.Sprintf(text, a...)\n\treturn primaryBoldStyle.Sprint(text)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "655f8481c0cf2577",
            "equalIndicator/v1": "ee1a293cf57465ecfc7daf6086e057cda2f0d0f3c698693b5979e7d145b0c876"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Setup' coverage is below the threshold 50%",
            "markdown": "Method `Setup` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 22,
                  "charOffset": 824,
                  "charLength": 5,
                  "snippet": {
                    "text": "Setup"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 800,
                  "charLength": 78,
                  "snippet": {
                    "text": ")\n\nfunc (o *CltOptions) Setup(_ *platform.QodanaOptions) error {\n\treturn nil\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8ab1b068c493ea29",
            "equalIndicator/v1": "ee4d5ed1cfe83ad62d47a89d589bba108c5c6d70b1fb188396aaa7ed6092e8b1"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ReportId' coverage is below the threshold 50%",
            "markdown": "Method `ReportId` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 6,
                  "charOffset": 6933,
                  "charLength": 8,
                  "snippet": {
                    "text": "ReportId"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 246,
                  "startColumn": 1,
                  "charOffset": 6925,
                  "charLength": 109,
                  "snippet": {
                    "text": "}\n\nfunc ReportId(projectName string) string {\n\treportId := os.Getenv(\"QODANA_REPORT_ID\")\n\tif reportId != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2c4fc09e9faffa47",
            "equalIndicator/v1": "eea62207e932aed837913dbf7e218b6990fe5152f5705c2ed72ca93e1bb5b888"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in LoadToken)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in LoadToken)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "charOffset": 1002,
                  "charLength": 50,
                  "snippet": {
                    "text": "func(_ bool) string { return o.getTokenFromEnv() }"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 900,
                  "charLength": 252,
                  "snippet": {
                    "text": "\ttokenFetchers := []func(bool) string{\n\t\tfunc(_ bool) string { return o.getTokenFromDockerArgs() },\n\t\tfunc(_ bool) string { return o.getTokenFromEnv() },\n\t\to.getTokenFromKeychain,\n\t\tfunc(_ bool) string { return o.getTokenFromUserInput(requiresToken) },"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fef26dc305cc7bbb",
            "equalIndicator/v1": "ef1d03ee9076dc24889014f0819f94ce71ce60144806626375e4ffa9ae0edb76"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'AddFlags' coverage is below the threshold 50%",
            "markdown": "Method `AddFlags` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 22,
                  "charOffset": 1229,
                  "charLength": 8,
                  "snippet": {
                    "text": "AddFlags"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 48,
                  "startColumn": 1,
                  "charOffset": 1205,
                  "charLength": 213,
                  "snippet": {
                    "text": "}\n\nfunc (o *CltOptions) AddFlags(flags *pflag.FlagSet) {\n\tflags.StringVar(&o.Solution, \"solution\", \"\", \"Relative path to solution file\")\n\tflags.StringVar(&o.Project, \"project\", \"\", \"Relative path to project file\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ed1842fe5a00510a",
            "equalIndicator/v1": "ef2c1ed24968322f548aa7efa6d52a2f87c1edb839a34886a11b5eb9ca20573a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'JbrJava' coverage is below the threshold 50%",
            "markdown": "Method `JbrJava` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 19,
                  "charOffset": 1810,
                  "charLength": 7,
                  "snippet": {
                    "text": "JbrJava"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 1789,
                  "charLength": 82,
                  "snippet": {
                    "text": "}\n\nfunc (p *product) JbrJava() string {\n\tif p.Home != \"\" {\n\t\tswitch runtime.GOOS {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "28a049c42b3b99e4",
            "equalIndicator/v1": "f0abb930c5d188db83666203ba7e7e18242357d67490d13c02a82d0f5bbb66ad"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'QuoteIfSpace' coverage is below the threshold 50%",
            "markdown": "Method `QuoteIfSpace` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/utils.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 6,
                  "charOffset": 2271,
                  "charLength": 12,
                  "snippet": {
                    "text": "QuoteIfSpace"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2211,
                  "charLength": 147,
                  "snippet": {
                    "text": "\n// QuoteIfSpace wraps in '\"' if '`s`' Contains space.\nfunc QuoteIfSpace(s string) string {\n\tif strings.Contains(s, \" \") {\n\t\treturn \"\\\"\" + s + \"\\\"\""
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9026d7ade196f7ea",
            "equalIndicator/v1": "f0dbfe60c2d8c962279437993005362ad3cc0e6717b338a7206a48b410d2109f"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'LoadQodanaYaml' coverage is below the threshold 50%",
            "markdown": "Method `LoadQodanaYaml` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/yaml.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 6,
                  "charOffset": 12415,
                  "charLength": 14,
                  "snippet": {
                    "text": "LoadQodanaYaml"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 358,
                  "startColumn": 1,
                  "charOffset": 12356,
                  "charLength": 192,
                  "snippet": {
                    "text": "\n// LoadQodanaYaml gets Qodana YAML from the project.\nfunc LoadQodanaYaml(project string, filename string) *QodanaYaml {\n\tq := &QodanaYaml{}\n\tqodanaYamlPath := filepath.Join(project, filename)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "354c9e64c2dd14f6",
            "equalIndicator/v1": "f20fabea6b638c8a70e167dfcd511809fd2ae918a663531a90f3b55057bd49fc"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitClean' coverage is below the threshold 50%",
            "markdown": "Method `GitClean` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 6,
                  "charOffset": 1480,
                  "charLength": 8,
                  "snippet": {
                    "text": "GitClean"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1435,
                  "charLength": 122,
                  "snippet": {
                    "text": "\n// GitClean cleans the git repository.\nfunc GitClean(cwd string) error {\n\treturn gitRun(cwd, []string{\"clean\", \"-fdx\"})\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "952369ab5149dda3",
            "equalIndicator/v1": "f40c1a7f1853c45025b05d79666d1a972c646cbf38caaca85f6710c24109f3cb"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'isInDirectory' coverage is below the threshold 50%",
            "markdown": "Method `isInDirectory` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/embed.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 6,
                  "charOffset": 6370,
                  "charLength": 13,
                  "snippet": {
                    "text": "isInDirectory"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 261,
                  "startColumn": 1,
                  "charOffset": 6284,
                  "charLength": 204,
                  "snippet": {
                    "text": "\n// isInDirectory checks if the target file is within the destination directory.\nfunc isInDirectory(destPath string, target string) bool {\n\trelative, err := filepath.Rel(destPath, target)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ff059dcf22308820",
            "equalIndicator/v1": "f84a41a101b3de8ce57da2b865ee6fb444c0226cbcf55018f657bef38f8c06d8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getProductNameFromCode' coverage is below the threshold 50%",
            "markdown": "Method `getProductNameFromCode` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 19,
                  "charOffset": 3244,
                  "charLength": 22,
                  "snippet": {
                    "text": "getProductNameFromCode"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 146,
                  "startColumn": 1,
                  "charOffset": 3223,
                  "charLength": 95,
                  "snippet": {
                    "text": "}\n\nfunc (p *product) getProductNameFromCode() string {\n\treturn getProductNameFromCode(p.Code)\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "de47985a84274113",
            "equalIndicator/v1": "f9cc05764d78de8577f745fdf0cf5bf01b44ac208e5dabe4b668c6c70856c81d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'patchReport' coverage is below the threshold 50%",
            "markdown": "Method `patchReport` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 6,
                  "charOffset": 1557,
                  "charLength": 11,
                  "snippet": {
                    "text": "patchReport"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1549,
                  "charLength": 132,
                  "snippet": {
                    "text": "}\n\nfunc patchReport(options *LocalOptions) error {\n\tfinalReport, err := platform.ReadReport(options.GetSarifPath())\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7e32c76785ffea45",
            "equalIndicator/v1": "fad27b2355d044475dc450f27c9ac960b8417542d0be74e161478903c7b15b63"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'IsHomeDirectory' coverage is below the threshold 50%",
            "markdown": "Method `IsHomeDirectory` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 6,
                  "charOffset": 4282,
                  "charLength": 15,
                  "snippet": {
                    "text": "IsHomeDirectory"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 149,
                  "startColumn": 1,
                  "charOffset": 4196,
                  "charLength": 174,
                  "snippet": {
                    "text": "\n// IsHomeDirectory returns true if the given path is the user's home directory.\nfunc IsHomeDirectory(path string) bool {\n\tabsPath, err := filepath.Abs(path)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0de71c04ea8f1102",
            "equalIndicator/v1": "faf8913800dc67ee9e673a83370436935e63e948a0d47758f1c4858b5dc81819"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'javaHome' coverage is below the threshold 50%",
            "markdown": "Method `javaHome` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/product_info.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 19,
                  "charOffset": 1732,
                  "charLength": 8,
                  "snippet": {
                    "text": "javaHome"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "charOffset": 1711,
                  "charLength": 79,
                  "snippet": {
                    "text": "}\n\nfunc (p *product) javaHome() string {\n\treturn filepath.Join(p.Home, \"jbr\")\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e427ff6b1ceff674",
            "equalIndicator/v1": "fdc47dba96dff57fe55bcbea730580a0ae239533cd6eed811713d55df27f1489"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'installers.go' coverage is below the threshold 50%",
            "markdown": "File `installers.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/installers.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6defcd2e1248967c",
            "equalIndicator/v1": "fdd43246fe1f872d3b467af745f38b7c7028fff3cb799714d1fb45eb307bc382"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'sarif.go' coverage is below the threshold 50%",
            "markdown": "File `sarif.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/sarif.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6df0f153768550ed",
            "equalIndicator/v1": "ff1d8b83e2da397a0c7cec0cc75bf9ab4098a3f4113f78bc429531a9da7cdb64"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "VulnerableLibrariesLocal",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable CVE-2023-42818 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found Results powered by Checkmarx(c)",
            "markdown": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable\n\n* [CVE-2023-42818](https://devhub.checkmarx.com/cve-details/CVE-2023-42818?utm_source=jetbrains&utm_medium=referral) 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found\n\nResults powered by [Checkmarx](https://checkmarx.com)(c)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/go.mod",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 2,
                  "charOffset": 2159,
                  "charLength": 39,
                  "snippet": {
                    "text": "golang.org/x/crypto v0.20.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                },
                "contextRegion": {
                  "startLine": 54,
                  "startColumn": 1,
                  "charOffset": 2044,
                  "charLength": 230,
                  "snippet": {
                    "text": "\tgithub.com/rivo/uniseg v0.4.4 // indirect\n\tgithub.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e // indirect\n\tgolang.org/x/crypto v0.20.0 // indirect\n\tgolang.org/x/sync v0.5.0 // indirect\n\tgolang.org/x/sys v0.17.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "20dc130534dafd51",
            "equalIndicator/v1": "58306cc52271a21a3502e9490bed747a29c6ec875a8c2ed6d68e1f16959974a1"
          },
          "relatedLocations": [],
          "baselineState": "unchanged",
          "properties": {
            "relatedProblemsRootHash": "73d587882a9186702ae37be981c5cc8f453df66a5f0226857b9a6924fe6cb4d3",
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "equalIndicator/2/additionalData": {
              "sourcePackage": "go:golang.org/x/crypto:v0.20.0",
              "vulnerabilityIds": "87b9d9b9-b672-4fbd-82a2-8a117c0dac05"
            },
            "tags": [
              "vgo"
            ]
          }
        },
        {
          "ruleId": "VulnerableLibrariesLocal",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable CVE-2023-42818 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found Results powered by Checkmarx(c)",
            "markdown": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable\n\n* [CVE-2023-42818](https://devhub.checkmarx.com/cve-details/CVE-2023-42818?utm_source=jetbrains&utm_medium=referral) 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found\n\nResults powered by [Checkmarx](https://checkmarx.com)(c)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/go.mod",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 2,
                  "charOffset": 4368,
                  "charLength": 39,
                  "snippet": {
                    "text": "golang.org/x/crypto v0.20.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                },
                "contextRegion": {
                  "startLine": 89,
                  "startColumn": 1,
                  "charOffset": 4287,
                  "charLength": 223,
                  "snippet": {
                    "text": "\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.9.0 // indirect\n\tgolang.org/x/crypto v0.20.0 // indirect\n\tgolang.org/x/exp v0.0.0-20230905200255-921286631fa9 // indirect\n\tgolang.org/x/mod v0.12.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "57ca910e76c6ea60",
            "equalIndicator/v1": "ba57d79a9387a858e5bf5d9cf799ef70362251b78430e55dd249c2a4bf9e2c9f"
          },
          "relatedLocations": [],
          "baselineState": "unchanged",
          "properties": {
            "relatedProblemsRootHash": "7ed948429eaca7a058254685593f05582b4ae9fe30afe1771396c6c0a00adebb",
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "equalIndicator/2/additionalData": {
              "sourcePackage": "go:golang.org/x/crypto:v0.20.0",
              "vulnerabilityIds": "87b9d9b9-b672-4fbd-82a2-8a117c0dac05"
            },
            "tags": [
              "vgo"
            ]
          }
        },
        {
          "ruleId": "VulnerableLibrariesLocal",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable CVE-2023-42818 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found Results powered by Checkmarx(c)",
            "markdown": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable\n\n* [CVE-2023-42818](https://devhub.checkmarx.com/cve-details/CVE-2023-42818?utm_source=jetbrains&utm_medium=referral) 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found\n\nResults powered by [Checkmarx](https://checkmarx.com)(c)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "linter/go.mod",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 2,
                  "charOffset": 4195,
                  "charLength": 39,
                  "snippet": {
                    "text": "golang.org/x/crypto v0.20.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 4114,
                  "charLength": 223,
                  "snippet": {
                    "text": "\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.9.0 // indirect\n\tgolang.org/x/crypto v0.20.0 // indirect\n\tgolang.org/x/exp v0.0.0-20230905200255-921286631fa9 // indirect\n\tgolang.org/x/mod v0.12.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ac345bde007a4eb7",
            "equalIndicator/v1": "c55b3f32af39c0688ca672c3fdbe337e98d9ce0941ea17fb67658cc2eaa6caa4"
          },
          "relatedLocations": [],
          "baselineState": "unchanged",
          "properties": {
            "relatedProblemsRootHash": "05243f29a7da9e3984775a60033a5a24cb3589c69f58eca8bb80b3122fdbbe32",
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "equalIndicator/2/additionalData": {
              "sourcePackage": "go:golang.org/x/crypto:v0.20.0",
              "vulnerabilityIds": "87b9d9b9-b672-4fbd-82a2-8a117c0dac05"
            },
            "tags": [
              "vgo"
            ]
          }
        },
        {
          "ruleId": "VulnerableLibrariesLocal",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable CVE-2023-42818 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found Results powered by Checkmarx(c)",
            "markdown": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable\n\n* [CVE-2023-42818](https://devhub.checkmarx.com/cve-details/CVE-2023-42818?utm_source=jetbrains&utm_medium=referral) 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found\n\nResults powered by [Checkmarx](https://checkmarx.com)(c)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cli/go.mod",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 2,
                  "charOffset": 4477,
                  "charLength": 39,
                  "snippet": {
                    "text": "golang.org/x/crypto v0.20.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 4396,
                  "charLength": 223,
                  "snippet": {
                    "text": "\tgo.uber.org/atomic v1.9.0 // indirect\n\tgo.uber.org/multierr v1.9.0 // indirect\n\tgolang.org/x/crypto v0.20.0 // indirect\n\tgolang.org/x/exp v0.0.0-20230905200255-921286631fa9 // indirect\n\tgolang.org/x/mod v0.12.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dfae48a40899cccd",
            "equalIndicator/v1": "d94304ba05b19cb9dabf126086dc4d481f84c395da3a5282c3a83d6c693541ce"
          },
          "relatedLocations": [],
          "baselineState": "unchanged",
          "properties": {
            "relatedProblemsRootHash": "91580bc8b28e5f4a70e9c8a4c1ab0473f3aed9b51b74150498464ccffe5ef00b",
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "equalIndicator/2/additionalData": {
              "sourcePackage": "go:golang.org/x/crypto:v0.20.0",
              "vulnerabilityIds": "87b9d9b9-b672-4fbd-82a2-8a117c0dac05"
            },
            "tags": [
              "vgo"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'fixDarwinCaches' coverage is below the threshold 50%",
            "markdown": "Method `fixDarwinCaches` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 6,
                  "charOffset": 2597,
                  "charLength": 15,
                  "snippet": {
                    "text": "fixDarwinCaches"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 97,
                  "startColumn": 1,
                  "charOffset": 2589,
                  "charLength": 121,
                  "snippet": {
                    "text": "}\n\nfunc fixDarwinCaches(options *QodanaOptions) {\n\tif //goland:noinspection GoBoolExpressions\n\truntime.GOOS == \"darwin\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d8d39cf678e908cb",
            "equalIndicator/v1": "028a76203269925c418914bef4e2dd0c68ddbd5e08edba05237293e6d29fe1e4"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'runQodanaContainer' coverage is below the threshold 50%",
            "markdown": "Method `runQodanaContainer` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 6,
                  "charOffset": 1580,
                  "charLength": 18,
                  "snippet": {
                    "text": "runQodanaContainer"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1491,
                  "charLength": 209,
                  "snippet": {
                    "text": "\n// runQodanaContainer runs the analysis in a Docker container from a Qodana image.\nfunc runQodanaContainer(ctx context.Context, options *QodanaOptions) int {\n\tresetScanStages()\n\tdocker := getContainerClient()"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "716b8f2da21836bd",
            "equalIndicator/v1": "0a99c33070e7c274c1f115bda7f602d52c45a77911edf27ad5f7296e6bc646df"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'LogOptions' coverage is below the threshold 50%",
            "markdown": "Method `LogOptions` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 25,
                  "charOffset": 2820,
                  "charLength": 10,
                  "snippet": {
                    "text": "LogOptions"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 93,
                  "startColumn": 1,
                  "charOffset": 2793,
                  "charLength": 98,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) LogOptions() {\n\tbuffer := new(bytes.Buffer)\n\tw := new(tabwriter.Writer)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2d3b1b43918dc2d0",
            "equalIndicator/v1": "0f31654358ec5353dfc5b18987b3b14145569d00533eda8c967d13c6ca133db6"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'extractLicensePlan' coverage is below the threshold 50%",
            "markdown": "Method `extractLicensePlan` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/license.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 6,
                  "charOffset": 6542,
                  "charLength": 18,
                  "snippet": {
                    "text": "extractLicensePlan"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 6534,
                  "charLength": 129,
                  "snippet": {
                    "text": "}\n\nfunc extractLicensePlan(data []byte) (string, error) {\n\tvar licenseData LicenseData\n\terr := json.Unmarshal(data, &licenseData)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "41e63b334aca87ca",
            "equalIndicator/v1": "115870efa86f0963191b233b8fc6b7ff49a559c72fc3d64463d51b79d2f501a8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'LogDirPath' coverage is below the threshold 50%",
            "markdown": "Method `LogDirPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 25,
                  "charOffset": 7388,
                  "charLength": 10,
                  "snippet": {
                    "text": "LogDirPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 296,
                  "startColumn": 1,
                  "charOffset": 7361,
                  "charLength": 99,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) LogDirPath() string {\n\treturn filepath.Join(o.resultsDirPath(), \"log\")\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9837d9a323a2d48a",
            "equalIndicator/v1": "1b29fc5893add14ff96c50b513f7bdeec99d7adc37fb3566e7ea375e3d9861ac"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'readIdeProductInfo' coverage is below the threshold 50%",
            "markdown": "Method `readIdeProductInfo` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 6,
                  "charOffset": 8268,
                  "charLength": 18,
                  "snippet": {
                    "text": "readIdeProductInfo"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 311,
                  "startColumn": 1,
                  "charOffset": 8202,
                  "charLength": 182,
                  "snippet": {
                    "text": "\n// readIdeProductInfo returns IDE info from the given path.\nfunc readIdeProductInfo(ideDir string) map[string]interface{} {\n\tif //goland:noinspection ALL\n\truntime.GOOS == \"darwin\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2e10361ef8cafb48",
            "equalIndicator/v1": "1baa5ecbd6079f12d02118cbb8bd2ce57a33ec5855de0ed1925b60900fa9aaba"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'toQodanaCode' coverage is below the threshold 50%",
            "markdown": "Method `toQodanaCode` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 6,
                  "charOffset": 7117,
                  "charLength": 12,
                  "snippet": {
                    "text": "toQodanaCode"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 251,
                  "startColumn": 1,
                  "charOffset": 7109,
                  "charLength": 83,
                  "snippet": {
                    "text": "}\n\nfunc toQodanaCode(baseProduct string) string {\n\tswitch baseProduct {\n\tcase \"IC\":"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0a87ea7cd1a2ae8f",
            "equalIndicator/v1": "1c5c756487b348f19be0d12b33f21242fe889c3fbed44223e27ab4343087ab89"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'RequiresToken' coverage is below the threshold 50%",
            "markdown": "Method `RequiresToken` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 25,
                  "charOffset": 7986,
                  "charLength": 13,
                  "snippet": {
                    "text": "RequiresToken"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 322,
                  "startColumn": 1,
                  "charOffset": 7959,
                  "charLength": 161,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) RequiresToken(isCommunityOrEap bool) bool {\n\tif os.Getenv(QodanaToken) != \"\" || o.Getenv(QodanaLicenseOnlyToken) != \"\" {\n\t\treturn true"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2cc2542b7947d24a",
            "equalIndicator/v1": "212f5c22dc29537cead5bb0dc15f46400b2c97949a69c158a4e6f2f1caf5582b"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'CoverageDirPath' coverage is below the threshold 50%",
            "markdown": "Method `CoverageDirPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 25,
                  "charOffset": 7028,
                  "charLength": 15,
                  "snippet": {
                    "text": "CoverageDirPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 281,
                  "startColumn": 1,
                  "charOffset": 7001,
                  "charLength": 100,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) CoverageDirPath() string {\n\tif o.CoverageDir == \"\" {\n\t\tif IsContainer() {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9e3e099a305496b7",
            "equalIndicator/v1": "230f3e86f700f36a5ee5a1badad31a07ab26d32b9e09aad6f11502bc24f4fa10"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetCloudTeamsPageUrl' coverage is below the threshold 50%",
            "markdown": "Method `GetCloudTeamsPageUrl` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/cloud.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 33,
                  "charOffset": 769,
                  "charLength": 20,
                  "snippet": {
                    "text": "GetCloudTeamsPageUrl"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 670,
                  "charLength": 267,
                  "snippet": {
                    "text": "\n// GetCloudTeamsPageUrl returns the team page URL on Qodana Cloud\nfunc (endpoint *QdRootEndpoint) GetCloudTeamsPageUrl(origin string, path string) string {\n\tname := filepath.Base(path)\n\treturn fmt.Sprintf(\"https://%s/?origin=%s&name=%s\", endpoint.Host, origin, name)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1a74c412aee36578",
            "equalIndicator/v1": "23fe8c8ed8245d7d8a147f82704c035f643b46f9d214774548318f23903247dd"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetQodanaSystemDir' coverage is below the threshold 50%",
            "markdown": "Method `GetQodanaSystemDir` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 25,
                  "charOffset": 5988,
                  "charLength": 18,
                  "snippet": {
                    "text": "GetQodanaSystemDir"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 228,
                  "startColumn": 1,
                  "charOffset": 5961,
                  "charLength": 127,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) GetQodanaSystemDir() string {\n\tif o.CacheDir != \"\" {\n\t\treturn filepath.Dir(filepath.Dir(o.CacheDir))"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "14c718de2870252c",
            "equalIndicator/v1": "279f9384e122508845136dbaedead926ec84f18046e226746ae6e1aadd5d9ce6"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'followLinter' coverage is below the threshold 50%",
            "markdown": "Method `followLinter` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 6,
                  "charOffset": 12116,
                  "charLength": 12,
                  "snippet": {
                    "text": "followLinter"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 426,
                  "startColumn": 1,
                  "charOffset": 12045,
                  "charLength": 275,
                  "snippet": {
                    "text": "\n// followLinter follows the linter logs and prints the progress.\nfunc followLinter(client *client.Client, containerName string, progress *pterm.SpinnerPrinter) {\n\treader, err := client.ContainerLogs(context.Background(), containerName, containerLogsOptions)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e3e16c87f45a3bca",
            "equalIndicator/v1": "28c73d0641705eb5caf53fa5a0857db0402f7461529f0737aca2ac2c4614a149"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'printQodanaLogo' coverage is below the threshold 50%",
            "markdown": "Method `printQodanaLogo` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 6,
                  "charOffset": 5154,
                  "charLength": 15,
                  "snippet": {
                    "text": "printQodanaLogo"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 166,
                  "startColumn": 1,
                  "charOffset": 5146,
                  "charLength": 202,
                  "snippet": {
                    "text": "}\n\nfunc printQodanaLogo(options *QodanaOptions, linterInfo *LinterInfo) {\n\tfmt.Println(\"\\nLog directory: \" + options.LogDirPath())\n\tfmt.Print(QodanaLogo(linterInfo.LinterName, linterInfo.LinterVersion))"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "03a9f63b9b99d6b3",
            "equalIndicator/v1": "2b111220b6e70b44a58137ad20bb27b1451dddabb582eafbc4bb0070e56dc6fb"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'PullImage' coverage is below the threshold 50%",
            "markdown": "Method `PullImage` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 6,
                  "charOffset": 5026,
                  "charLength": 9,
                  "snippet": {
                    "text": "PullImage"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 180,
                  "startColumn": 1,
                  "charOffset": 4964,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n// PullImage pulls docker image and prints the process.\nfunc PullImage(client *client.Client, image string) {\n\tplatform.PrintProcess(\n\t\tfunc(_ *pterm.SpinnerPrinter) {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8e4293699900051d",
            "equalIndicator/v1": "2c63138b883b0834c749f7e910e87971271e88eaf6363096d861347da460cf87"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in PullImage)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in PullImage)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 3,
                  "charOffset": 5101,
                  "charLength": 31,
                  "snippet": {
                    "text": "func(_ *pterm.SpinnerPrinter) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 182,
                  "startColumn": 1,
                  "charOffset": 5021,
                  "charLength": 166,
                  "snippet": {
                    "text": "func PullImage(client *client.Client, image string) {\n\tplatform.PrintProcess(\n\t\tfunc(_ *pterm.SpinnerPrinter) {\n\t\t\tpullImage(context.Background(), client, image)\n\t\t},"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5649fb4fd4cfe9fd",
            "equalIndicator/v1": "2f6323f74b1f37694e989d62ea0fe5dd9ea09f6c5c9eb9ac8b8e6bb6978f22cb"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ValidateToken' coverage is below the threshold 50%",
            "markdown": "Method `ValidateToken` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 25,
                  "charOffset": 3006,
                  "charLength": 13,
                  "snippet": {
                    "text": "ValidateToken"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 104,
                  "startColumn": 1,
                  "charOffset": 2864,
                  "charLength": 233,
                  "snippet": {
                    "text": "\n// ValidateToken checks if QODANA_TOKEN is set in CLI args, or environment or the system keyring, returns its value.\nfunc (o *QodanaOptions) ValidateToken(refresh bool) string {\n\ttoken := o.LoadToken(refresh, true)\n\tif token != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3fd47b55af25ae88",
            "equalIndicator/v1": "3043bf67e543febd6709c667412bda0c9e1b28227729f61ffc3e1e8a7c7a4167"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'isDockerUnauthorizedError' coverage is below the threshold 50%",
            "markdown": "Method `isDockerUnauthorizedError` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 6,
                  "charOffset": 5309,
                  "charLength": 25,
                  "snippet": {
                    "text": "isDockerUnauthorizedError"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 190,
                  "startColumn": 1,
                  "charOffset": 5301,
                  "charLength": 216,
                  "snippet": {
                    "text": "}\n\nfunc isDockerUnauthorizedError(errMsg string) bool {\n\terrMsg = platform.Lower(errMsg)\n\treturn strings.Contains(errMsg, \"unauthorized\") || strings.Contains(errMsg, \"denied\") || strings.Contains(errMsg, \"forbidden\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3d915f8bf15c5cc6",
            "equalIndicator/v1": "31af3b3f3125653155d533e9e5345a3982504db75deee0de613ead199d24fd21"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'FetchAnalyzerSettings' coverage is below the threshold 50%",
            "markdown": "Method `FetchAnalyzerSettings` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 25,
                  "charOffset": 3556,
                  "charLength": 21,
                  "snippet": {
                    "text": "FetchAnalyzerSettings"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 128,
                  "startColumn": 1,
                  "charOffset": 3529,
                  "charLength": 147,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) FetchAnalyzerSettings() {\n\tif o.Linter == \"\" && o.Ide == \"\" {\n\t\tqodanaYaml := LoadQodanaYaml(o.ProjectDir, o.ConfigName)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4ac38e27f8599cd4",
            "equalIndicator/v1": "34ef3fe6d539166588e0d678749df30810393732268646584792db61927f91ad"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in pullImage)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in pullImage)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 8,
                  "charOffset": 6388,
                  "charLength": 26,
                  "snippet": {
                    "text": "func(pull io.ReadCloser) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 219,
                  "startColumn": 1,
                  "charOffset": 6340,
                  "charLength": 114,
                  "snippet": {
                    "text": "\t\tlog.Fatal(\"can't pull image \", err)\n\t}\n\tdefer func(pull io.ReadCloser) {\n\t\terr := pull.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b068444282fdf0e4",
            "equalIndicator/v1": "388732f12f43d982cfa438252fe598d672031454f148ce105cc30e8c389c7599"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'IsCommunity' coverage is below the threshold 50%",
            "markdown": "Method `IsCommunity` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 25,
                  "charOffset": 8824,
                  "charLength": 11,
                  "snippet": {
                    "text": "IsCommunity"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 357,
                  "startColumn": 1,
                  "charOffset": 8797,
                  "charLength": 86,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) IsCommunity() bool {\n\treturn o.LicensePlan == \"COMMUNITY\"\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f8fff33c3634775b",
            "equalIndicator/v1": "38957bf673fcf23786f4e0312184b72ce7172831cde67f5fda8734bb9c64774f"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'runQodana' coverage is below the threshold 50%",
            "markdown": "Method `runQodana` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 409,
                  "startColumn": 6,
                  "charOffset": 11617,
                  "charLength": 9,
                  "snippet": {
                    "text": "runQodana"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 407,
                  "startColumn": 1,
                  "charOffset": 11609,
                  "charLength": 101,
                  "snippet": {
                    "text": "}\n\nfunc runQodana(ctx context.Context, options *QodanaOptions) int {\n\tvar exitCode int\n\tvar err error"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c316f203725f3d01",
            "equalIndicator/v1": "38bc31290e245d49cddcead14c57e4748ab906f5300617886c95cd7091d1a926"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'installPlugins' coverage is below the threshold 50%",
            "markdown": "Method `installPlugins` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 447,
                  "startColumn": 6,
                  "charOffset": 12177,
                  "charLength": 14,
                  "snippet": {
                    "text": "installPlugins"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 445,
                  "startColumn": 1,
                  "charOffset": 12095,
                  "charLength": 207,
                  "snippet": {
                    "text": "\n// installPlugins runs plugin installer for every plugin id in qodana.yaml.\nfunc installPlugins(plugins []platform.Plugin) {\n\tfor _, plugin := range plugins {\n\t\tlog.Printf(\"Installing plugin %s\", plugin.Id)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0404da0a031c94b8",
            "equalIndicator/v1": "3c1434d422744144c8847f5c621f234905e5d3b62c2944a1913030b00ade6917"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'writeProperties' coverage is below the threshold 50%",
            "markdown": "Method `writeProperties` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/properties.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 6,
                  "charOffset": 6534,
                  "charLength": 15,
                  "snippet": {
                    "text": "writeProperties"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 186,
                  "startColumn": 1,
                  "charOffset": 6430,
                  "charLength": 426,
                  "snippet": {
                    "text": "\n// writeProperties writes the given key=value `props` to file `f` (sets the environment variable)\nfunc writeProperties(opts *QodanaOptions) { // opts.confDirPath(Prod.Version)  opts.vmOptionsPath(Prod.Version)\n\tproperties := GetProperties(opts, platform.Config.Properties, platform.Config.DotNet, getPluginIds(platform.Config.Plugins))\n\terr := os.WriteFile(opts.vmOptionsPath(), []byte(strings.Join(properties, \"\\n\")), 0o644)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2e549d026ecf2b13",
            "equalIndicator/v1": "3d4dac3552fabc227a18383629e7d2059f2095ef215cacab4b0a330fe0183cb2"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetLicensePlan' coverage is below the threshold 50%",
            "markdown": "Method `GetLicensePlan` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/license.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 34,
                  "charOffset": 6875,
                  "charLength": 14,
                  "snippet": {
                    "text": "GetLicensePlan"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 228,
                  "startColumn": 1,
                  "charOffset": 6839,
                  "charLength": 205,
                  "snippet": {
                    "text": "}\n\nfunc (endpoints *QdApiEndpoints) GetLicensePlan() (string, error) {\n\tif Token.Token == \"\" {\n\t\treturn \"\", errors.New(\"no token provided, please provide a token via the QODANA_TOKEN environment variable\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ed01bafa92624734",
            "equalIndicator/v1": "3d6d0f16605ca81584937207881cd199fa28c15955a13a264c0a09c85953520e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'parseProjectName' coverage is below the threshold 50%",
            "markdown": "Method `parseProjectName` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/cloud.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 6,
                  "charOffset": 1348,
                  "charLength": 16,
                  "snippet": {
                    "text": "parseProjectName"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 1340,
                  "charLength": 145,
                  "snippet": {
                    "text": "}\n\nfunc parseProjectName(data []byte) (string, error) {\n\tvar answer map[string]interface{}\n\tif err := json.Unmarshal(data, &answer); err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ba1aca3635fc85c2",
            "equalIndicator/v1": "483feb830d21bff90337c12dc30b4392b539bf2f67de3f53b798bf94b8cc0e88"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'scriptToProductCode' coverage is below the threshold 50%",
            "markdown": "Method `scriptToProductCode` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 6,
                  "charOffset": 7575,
                  "charLength": 19,
                  "snippet": {
                    "text": "scriptToProductCode"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 278,
                  "startColumn": 1,
                  "charOffset": 7567,
                  "charLength": 88,
                  "snippet": {
                    "text": "}\n\nfunc scriptToProductCode(scriptName string) string {\n\tswitch scriptName {\n\tcase idea:"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ce0b891454c24c7e",
            "equalIndicator/v1": "4d6824627d84719ac6317d8bb0f1110c74c1efcd6d738379319db7796ed0860e"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'saveReport' coverage is below the threshold 50%",
            "markdown": "Method `saveReport` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 493,
                  "startColumn": 6,
                  "charOffset": 13891,
                  "charLength": 10,
                  "snippet": {
                    "text": "saveReport"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 491,
                  "startColumn": 1,
                  "charOffset": 13824,
                  "charLength": 181,
                  "snippet": {
                    "text": "\n// saveReport saves web files to expect, and generates json.\nfunc saveReport(opts *QodanaOptions) {\n\tif !(platform.IsContainer() && (opts.SaveReport || opts.ShowReport)) {\n\t\treturn"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "00507e06267bb2cd",
            "equalIndicator/v1": "4f1a99bf14838a4b8be6447e2c542d2b40436228ff0fee985f45f86e6e02c695"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'NewLintersApiClient' coverage is below the threshold 50%",
            "markdown": "Method `NewLintersApiClient` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/endpoints.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 34,
                  "charOffset": 2826,
                  "charLength": 19,
                  "snippet": {
                    "text": "NewLintersApiClient"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 114,
                  "startColumn": 1,
                  "charOffset": 2790,
                  "charLength": 128,
                  "snippet": {
                    "text": "}\n\nfunc (endpoints *QdApiEndpoints) NewLintersApiClient(token string) *QdClient {\n\treturn &QdClient{\n\t\thttpClient: &http.Client{"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9cdb4231c9e5e5f7",
            "equalIndicator/v1": "500fea44b099ef3465d91c62a363861b4e9d921f9a723c7de9ee24c5e4855601"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'PrepareContainerEnvSettings' coverage is below the threshold 50%",
            "markdown": "Method `PrepareContainerEnvSettings` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 6,
                  "charOffset": 3826,
                  "charLength": 27,
                  "snippet": {
                    "text": "PrepareContainerEnvSettings"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 143,
                  "startColumn": 1,
                  "charOffset": 3729,
                  "charLength": 236,
                  "snippet": {
                    "text": "\n// PrepareContainerEnvSettings checks if the host is ready to run Qodana container images.\nfunc PrepareContainerEnvSettings() {\n\tvar tool string\n\tif os.Getenv(platform.QodanaCliUsePodman) == \"\" && checkRequiredToolInstalled(\"docker\") {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9ffb1c79c04449b4",
            "equalIndicator/v1": "52a2f625a8e2aa42e71ed6e37c95e87813c86d9554c9809f54b8fae1e2a92bde"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'requestApiEndpoints' coverage is below the threshold 50%",
            "markdown": "Method `requestApiEndpoints` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/versions.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 33,
                  "charOffset": 2546,
                  "charLength": 19,
                  "snippet": {
                    "text": "requestApiEndpoints"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 99,
                  "startColumn": 1,
                  "charOffset": 2511,
                  "charLength": 144,
                  "snippet": {
                    "text": "}\n\nfunc (endpoint *QdRootEndpoint) requestApiEndpoints() (*QdApiEndpoints, error) {\n\thttpClient := &http.Client{\n\t\tTimeout: getRequestTimeout(),"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f5637dc2e8769047",
            "equalIndicator/v1": "5730cd46f5ce91b488d6a2fa466e9096e1ddcc6d67f7a7172844a515d078f237"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'runWithFullHistory' coverage is below the threshold 50%",
            "markdown": "Method `runWithFullHistory` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 6,
                  "charOffset": 6515,
                  "charLength": 18,
                  "snippet": {
                    "text": "runWithFullHistory"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 220,
                  "startColumn": 1,
                  "charOffset": 6507,
                  "charLength": 201,
                  "snippet": {
                    "text": "}\n\nfunc runWithFullHistory(ctx context.Context, options *QodanaOptions, startHash string) int {\n\tremoteUrl := platform.GitRemoteUrl(options.ProjectDir)\n\tbranch := platform.GitBranch(options.ProjectDir)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e022ad6f4a04bfd5",
            "equalIndicator/v1": "575cb80844d2b0011d8d2d841ee62a96caa2ee01e503edcd833b73d7cbb9bf02"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GitCurrentRevision' coverage is below the threshold 50%",
            "markdown": "Method `GitCurrentRevision` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/git.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 6,
                  "charOffset": 2947,
                  "charLength": 18,
                  "snippet": {
                    "text": "GitCurrentRevision"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 98,
                  "startColumn": 1,
                  "charOffset": 2939,
                  "charLength": 106,
                  "snippet": {
                    "text": "}\n\nfunc GitCurrentRevision(cwd string) string {\n\treturn gitOutput(cwd, []string{\"rev-parse\", \"HEAD\"})[0]\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c0f58b72c36d141f",
            "equalIndicator/v1": "5c3ae55e2e33064472e872e85324d7116f37ae8537f43c56e5db7ebde8dbc29c"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Bootstrap' coverage is below the threshold 50%",
            "markdown": "Method `Bootstrap` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/env.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 6,
                  "charOffset": 4352,
                  "charLength": 9,
                  "snippet": {
                    "text": "Bootstrap"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 121,
                  "startColumn": 1,
                  "charOffset": 4270,
                  "charLength": 167,
                  "snippet": {
                    "text": "\n// Bootstrap takes the given command (from CLI or qodana.yaml) and runs it.\nfunc Bootstrap(command string, project string) {\n\tif command != \"\" {\n\t\tvar executor string"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "624e6eec312edf6b",
            "equalIndicator/v1": "5cb269be7b8e62c903e6670b27ecd1d87930034e82cdb7d7a1bb0620874a45ab"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'allCommunityNames' coverage is below the threshold 50%",
            "markdown": "Method `allCommunityNames` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/license.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 6,
                  "charOffset": 3325,
                  "charLength": 17,
                  "snippet": {
                    "text": "allCommunityNames"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 103,
                  "startColumn": 1,
                  "charOffset": 3317,
                  "charLength": 114,
                  "snippet": {
                    "text": "}\n\nfunc allCommunityNames() string {\n\tvar nameList []string\n\tfor _, code := range platform.AllSupportedFreeCodes {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "903057d22f2eeb1c",
            "equalIndicator/v1": "61fb6b0d1e0a91ade065c1f70cd46f0338cc913508a268f58747aedddd646568"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'setupToken' coverage is below the threshold 50%",
            "markdown": "Method `setupToken` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 6,
                  "charOffset": 4017,
                  "charLength": 10,
                  "snippet": {
                    "text": "setupToken"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 141,
                  "startColumn": 1,
                  "charOffset": 4009,
                  "charLength": 151,
                  "snippet": {
                    "text": "}\n\nfunc setupToken(path string, id string) string {\n\topenCloud := AskUserConfirm(\"Do you want to open the team page to get the token?\")\n\tif openCloud {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f9997b7902afbb35",
            "equalIndicator/v1": "639c7647c452163946610343ca1e180700dfb5bc9d508392121a006560a84b8b"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'encodeAuthToBase64' coverage is below the threshold 50%",
            "markdown": "Method `encodeAuthToBase64` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 6,
                  "charOffset": 3429,
                  "charLength": 18,
                  "snippet": {
                    "text": "encodeAuthToBase64"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 129,
                  "startColumn": 1,
                  "charOffset": 3344,
                  "charLength": 205,
                  "snippet": {
                    "text": "\n// encodeAuthToBase64 serializes the auth configuration as JSON base64 payload\nfunc encodeAuthToBase64(authConfig types.AuthConfig) (string, error) {\n\tbuf, err := json.Marshal(authConfig)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "94643c7b88dbf754",
            "equalIndicator/v1": "651f304d8631e56f23e56b0822b58f75f405a3d6048f032f34d020ba046879f8"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getScriptSuffix' coverage is below the threshold 50%",
            "markdown": "Method `getScriptSuffix` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 506,
                  "startColumn": 6,
                  "charOffset": 13940,
                  "charLength": 15,
                  "snippet": {
                    "text": "getScriptSuffix"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 504,
                  "startColumn": 1,
                  "charOffset": 13932,
                  "charLength": 78,
                  "snippet": {
                    "text": "}\n\nfunc getScriptSuffix() string {\n\tif platform.IsContainer() {\n\t\treturn \".sh\""
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fe396032f9cb0cf8",
            "equalIndicator/v1": "69f864ebf5b717ab490cc89f1907f2312a210bb5a3ffdf90a9497f96a8f1516c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'cleanup' coverage is below the threshold 50%",
            "markdown": "Method `cleanup` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 6,
                  "charOffset": 2757,
                  "charLength": 7,
                  "snippet": {
                    "text": "cleanup"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 2749,
                  "charLength": 31,
                  "snippet": {
                    "text": "}\n\nfunc cleanup() {\n\tumount()\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "76414fca5a049729",
            "equalIndicator/v1": "6cd100b8ca7bf5c24730a0ffcc4e3a2038a9b0bf91d573b064bfc91e952302f2"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getDockerOptions' coverage is below the threshold 50%",
            "markdown": "Method `getDockerOptions` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 6,
                  "charOffset": 8349,
                  "charLength": 16,
                  "snippet": {
                    "text": "getDockerOptions"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 283,
                  "startColumn": 1,
                  "charOffset": 8282,
                  "charLength": 212,
                  "snippet": {
                    "text": "\n// getDockerOptions returns qodana docker container options.\nfunc getDockerOptions(opts *QodanaOptions) *types.ContainerCreateConfig {\n\tcmdOpts := GetIdeArgs(opts)\n\tplatform.ExtractQodanaEnvironment(opts.Setenv)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5b4be3211196ad78",
            "equalIndicator/v1": "6fa138f2e83ebb201d0dcfe5bd98d98996405259a4755235426606fd82658436"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'runQodanaLocal' coverage is below the threshold 50%",
            "markdown": "Method `runQodanaLocal` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 6,
                  "charOffset": 1611,
                  "charLength": 14,
                  "snippet": {
                    "text": "runQodanaLocal"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1603,
                  "charLength": 138,
                  "snippet": {
                    "text": "}\n\nfunc runQodanaLocal(opts *QodanaOptions) (int, error) {\n\targs := getIdeRunCommand(opts)\n\tideProcess, err := platform.RunCmdWithTimeout("
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "637f4779a54675d0",
            "equalIndicator/v1": "6fc4322f88dbc7bf678c481d6232bd352bf90dcfdc5dbf2bea5bb8b1bb940daf"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in runScopeScript)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in runScopeScript)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 13,
                  "charOffset": 8572,
                  "charLength": 31,
                  "snippet": {
                    "text": "func(hash string) (bool, int) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 294,
                  "startColumn": 1,
                  "charOffset": 8532,
                  "charLength": 141,
                  "snippet": {
                    "text": "\tprops := options.Property\n\n\trunFunc := func(hash string) (bool, int) {\n\t\te := platform.GitCheckout(options.ProjectDir, hash)\n\t\tif e != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "068cbcca09ee0502",
            "equalIndicator/v1": "73b4a850eb04468356e23f220fd1a9c7c87b1a1b3801defb2dd6d6918c8389ed"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'generateDebugDockerRunCommand' coverage is below the threshold 50%",
            "markdown": "Method `generateDebugDockerRunCommand` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 389,
                  "startColumn": 6,
                  "charOffset": 11090,
                  "charLength": 29,
                  "snippet": {
                    "text": "generateDebugDockerRunCommand"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 387,
                  "startColumn": 1,
                  "charOffset": 11082,
                  "charLength": 151,
                  "snippet": {
                    "text": "}\n\nfunc generateDebugDockerRunCommand(cfg *types.ContainerCreateConfig) string {\n\tvar cmdBuilder strings.Builder\n\tcmdBuilder.WriteString(\"docker run \")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "93280bb7c0f53ecf",
            "equalIndicator/v1": "7607dd488ee5e0b8ec33197636b3f0e02f5e13565ca0e749e4e22beac119fb49"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetSarifPath' coverage is below the threshold 50%",
            "markdown": "Method `GetSarifPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 25,
                  "charOffset": 9003,
                  "charLength": 12,
                  "snippet": {
                    "text": "GetSarifPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 365,
                  "startColumn": 1,
                  "charOffset": 8976,
                  "charLength": 105,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) GetSarifPath() string {\n\treturn path.Join(o.ResultsDir, \"qodana.sarif.json\")\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "766ee7dab9a0a3af",
            "equalIndicator/v1": "77362945ab608bf3434a18d45da9b1862d19110dac1e5f345b8368752d259b63"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'checkRequiredToolInstalled' coverage is below the threshold 50%",
            "markdown": "Method `checkRequiredToolInstalled` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 6,
                  "charOffset": 3630,
                  "charLength": 26,
                  "snippet": {
                    "text": "checkRequiredToolInstalled"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 137,
                  "startColumn": 1,
                  "charOffset": 3622,
                  "charLength": 104,
                  "snippet": {
                    "text": "}\n\nfunc checkRequiredToolInstalled(tool string) bool {\n\t_, err := exec.LookPath(tool)\n\treturn err == nil"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7be1388fa7e9af62",
            "equalIndicator/v1": "7c1350917735599c2c51946f3c18ee595a0632588b4aee2867603b4a422127e5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetTmpResultsDir' coverage is below the threshold 50%",
            "markdown": "Method `GetTmpResultsDir` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 25,
                  "charOffset": 8909,
                  "charLength": 16,
                  "snippet": {
                    "text": "GetTmpResultsDir"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 361,
                  "startColumn": 1,
                  "charOffset": 8882,
                  "charLength": 95,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) GetTmpResultsDir() string {\n\treturn path.Join(o.ResultsDir, \"tmp\")\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "09899d1bf51636c7",
            "equalIndicator/v1": "7e06a96b29194a06eedb2dd401b36b610e1e8cb93701adc35522cb59d78a1abf"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getTokenFromUserInput' coverage is below the threshold 50%",
            "markdown": "Method `getTokenFromUserInput` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 25,
                  "charOffset": 2515,
                  "charLength": 21,
                  "snippet": {
                    "text": "getTokenFromUserInput"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 86,
                  "startColumn": 1,
                  "charOffset": 2488,
                  "charLength": 202,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) getTokenFromUserInput(requiresToken bool) string {\n\tif IsInteractive() && requiresToken {\n\t\tWarningMessage(cloud.EmptyTokenMessage, cloud.GetCloudRootEndpoint().GetCloudUrl())"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "75adfee200b3ff53",
            "equalIndicator/v1": "8954df84afeb72afceaca093196b19c2b52f71cc1139344850b311d4f56dba8a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Id' coverage is below the threshold 50%",
            "markdown": "Method `Id` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 25,
                  "charOffset": 5429,
                  "charLength": 2,
                  "snippet": {
                    "text": "Id"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 201,
                  "startColumn": 1,
                  "charOffset": 5402,
                  "charLength": 80,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) Id() string {\n\tif o._id == \"\" {\n\t\tvar analyzer string"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "abee27befc6103db",
            "equalIndicator/v1": "8fc7a77ec29b73412e34d9aa337515ecf579212c5433e01441a0f3085b7326a9"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'CheckContainerEngineMemory' coverage is below the threshold 50%",
            "markdown": "Method `CheckContainerEngineMemory` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 6,
                  "charOffset": 7451,
                  "charLength": 26,
                  "snippet": {
                    "text": "CheckContainerEngineMemory"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 252,
                  "startColumn": 1,
                  "charOffset": 7285,
                  "charLength": 250,
                  "snippet": {
                    "text": "// CheckContainerEngineMemory applicable only for Docker Desktop,\n// (has the default limit of 2GB which can be not enough when Gradle runs inside a container).\nfunc CheckContainerEngineMemory() {\n\tdocker := getContainerClient()\n\tgoos := runtime.GOOS"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7512140ae373c008",
            "equalIndicator/v1": "924b1ca6fcf2682bc077d16a3db32b5ca1f7e9b1ef6ef2d4a10db3a00a047892"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Error' coverage is below the threshold 50%",
            "markdown": "Method `Error` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/versions.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 35,
                  "charOffset": 1035,
                  "charLength": 5,
                  "snippet": {
                    "text": "Error"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 43,
                  "startColumn": 1,
                  "charOffset": 998,
                  "charLength": 194,
                  "snippet": {
                    "text": "}\n\nfunc (e *ApiVersionMismatchError) Error() string {\n\treturn fmt.Sprintf(\n\t\t\"failed to find supported API. Available %s API: %v. Required major version: %d. Minimum required minor version: %d\","
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1a02066fee61e88d",
            "equalIndicator/v1": "9a1d62edc8ad7233cfbc8658ea36193027171c4b997fa08ff33be6c1a71e2903"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'cacheDirPath' coverage is below the threshold 50%",
            "markdown": "Method `cacheDirPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 261,
                  "startColumn": 25,
                  "charOffset": 6573,
                  "charLength": 12,
                  "snippet": {
                    "text": "cacheDirPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 259,
                  "startColumn": 1,
                  "charOffset": 6546,
                  "charLength": 94,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) cacheDirPath() string {\n\tif o.CacheDir == \"\" {\n\t\tif IsContainer() {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2fc9ac3542d8a088",
            "equalIndicator/v1": "9ce60452c7417b68d8e64ca527d5895c5b88e8fbb27d7f938fb380d9ebf97f6c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'requestLicenseData' coverage is below the threshold 50%",
            "markdown": "Method `requestLicenseData` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/license.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "charOffset": 772,
                  "charLength": 18,
                  "snippet": {
                    "text": "requestLicenseData"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 764,
                  "charLength": 159,
                  "snippet": {
                    "text": ")\n\nfunc requestLicenseData(endpoints *cloud.QdApiEndpoints, token string) cloud.LicenseData {\n\n\tlicenseDataResponse, err := endpoints.RequestLicenseData(token)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "03263c55d3369406",
            "equalIndicator/v1": "a114905ef7ae6fc25fbfce4235a83164b73e33b22a045b49e08b42da650f4e1f"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'validateBranch' coverage is below the threshold 50%",
            "markdown": "Method `validateBranch` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/env.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 6,
                  "charOffset": 3555,
                  "charLength": 14,
                  "snippet": {
                    "text": "validateBranch"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 92,
                  "startColumn": 1,
                  "charOffset": 3547,
                  "charLength": 108,
                  "snippet": {
                    "text": "}\n\nfunc validateBranch(branch string, env string) string {\n\tif branch == \"\" {\n\t\tif env == \"github-actions\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a8c5b69400f3416a",
            "equalIndicator/v1": "a2350d69d4f2c3bcd16e9bb3a1ec11a9e4cbc1540f670fb07676da2382fc3aef"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ContainerCleanup' coverage is below the threshold 50%",
            "markdown": "Method `ContainerCleanup` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 6,
                  "charOffset": 6679,
                  "charLength": 16,
                  "snippet": {
                    "text": "ContainerCleanup"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 231,
                  "startColumn": 1,
                  "charOffset": 6624,
                  "charLength": 221,
                  "snippet": {
                    "text": "\n// ContainerCleanup cleans up Qodana containers.\nfunc ContainerCleanup() {\n\tif containerName != \"qodana-cli\" { // if containerName is not set, it means that the container was not created!\n\t\tdocker := getContainerClient()"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b14ca4d913f5c91d",
            "equalIndicator/v1": "a9fc619daa279e58a970d13239bba147780b6ca6e99c8fde9514f59246803fa6"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getCloudToken' coverage is below the threshold 50%",
            "markdown": "Method `getCloudToken` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 6,
                  "charOffset": 3797,
                  "charLength": 13,
                  "snippet": {
                    "text": "getCloudToken"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 132,
                  "startColumn": 1,
                  "charOffset": 3736,
                  "charLength": 168,
                  "snippet": {
                    "text": "\n// getCloudToken returns token from the system keyring\nfunc getCloudToken(id string) (string, error) {\n\tsecret, err := keyring.Get(defaultService, id)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dd7f14303f8eaff3",
            "equalIndicator/v1": "abcdb56a303dc1293cbb54c651098e16323c0c1625151049f1c673f88731edd5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'saveCloudToken' coverage is below the threshold 50%",
            "markdown": "Method `saveCloudToken` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/token.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 6,
                  "charOffset": 3530,
                  "charLength": 14,
                  "snippet": {
                    "text": "saveCloudToken"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 122,
                  "startColumn": 1,
                  "charOffset": 3472,
                  "charLength": 169,
                  "snippet": {
                    "text": "\n// saveCloudToken saves token to the system keyring\nfunc saveCloudToken(id string, token string) error {\n\terr := keyring.Set(defaultService, id, token)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b3345208395e6067",
            "equalIndicator/v1": "af9628afa2cc6022815f72589f4a2173c736d9e72d3bcc7377330bb6892316c5"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'runLocalChanges' coverage is below the threshold 50%",
            "markdown": "Method `runLocalChanges` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 6,
                  "charOffset": 5717,
                  "charLength": 15,
                  "snippet": {
                    "text": "runLocalChanges"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 197,
                  "startColumn": 1,
                  "charOffset": 5709,
                  "charLength": 136,
                  "snippet": {
                    "text": "}\n\nfunc runLocalChanges(ctx context.Context, options *QodanaOptions, startHash string) int {\n\tvar exitCode int\n\toptions.GitReset = false"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "78b3c787b81f23f6",
            "equalIndicator/v1": "b1023013806555642227e70caef33f284fccc94d9c27eb3acc97cda3e11e2ed7"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'resultsDirPath' coverage is below the threshold 50%",
            "markdown": "Method `resultsDirPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 25,
                  "charOffset": 6340,
                  "charLength": 14,
                  "snippet": {
                    "text": "resultsDirPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 248,
                  "startColumn": 1,
                  "charOffset": 6313,
                  "charLength": 98,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) resultsDirPath() string {\n\tif o.ResultsDir == \"\" {\n\t\tif IsContainer() {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b4e233ba3e716099",
            "equalIndicator/v1": "b58aba2ad29570c7eed3249bc2a44452e8f7490f2bab439b76c859cdecdf21f6"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in followLinter)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in followLinter)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 433,
                  "startColumn": 8,
                  "charOffset": 12356,
                  "charLength": 28,
                  "snippet": {
                    "text": "func(reader io.ReadCloser) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 431,
                  "startColumn": 1,
                  "charOffset": 12321,
                  "charLength": 105,
                  "snippet": {
                    "text": "\t\tlog.Fatal(err.Error())\n\t}\n\tdefer func(reader io.ReadCloser) {\n\t\terr := reader.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f744cbf833848e4a",
            "equalIndicator/v1": "b6b24973326ca24b0ba1056cc9ad98bb5b63b9e49312b3a2f9d7ee4366624ece"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'reportDirPath' coverage is below the threshold 50%",
            "markdown": "Method `reportDirPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 25,
                  "charOffset": 6792,
                  "charLength": 13,
                  "snippet": {
                    "text": "reportDirPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 270,
                  "startColumn": 1,
                  "charOffset": 6765,
                  "charLength": 96,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) reportDirPath() string {\n\tif o.ReportDir == \"\" {\n\t\tif IsContainer() {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5d29fb6323dfb510",
            "equalIndicator/v1": "b81a2520f82511a82eda75df7be9c8fa62450c87bb0563858b7119ebc927f509"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'prepareDirectories' coverage is below the threshold 50%",
            "markdown": "Method `prepareDirectories` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 6,
                  "charOffset": 9930,
                  "charLength": 18,
                  "snippet": {
                    "text": "prepareDirectories"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 369,
                  "startColumn": 1,
                  "charOffset": 9922,
                  "charLength": 127,
                  "snippet": {
                    "text": "}\n\nfunc prepareDirectories(cacheDir string, logDir string, confDir string) {\n\thomeDir, err := os.UserHomeDir()\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a9fefc2888121bd5",
            "equalIndicator/v1": "bb32d3e54b9f27abfd543d5c89e592d8d52d215fa58596892cddf5d5b6a3cc6d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'pullImage' coverage is below the threshold 50%",
            "markdown": "Method `pullImage` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 6,
                  "charOffset": 5559,
                  "charLength": 9,
                  "snippet": {
                    "text": "pullImage"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 196,
                  "startColumn": 1,
                  "charOffset": 5520,
                  "charLength": 238,
                  "snippet": {
                    "text": "\n// PullImage pulls docker image.\nfunc pullImage(ctx context.Context, client *client.Client, image string) {\n\treader, err := client.ImagePull(ctx, image, types.ImagePullOptions{})\n\tif err != nil && isDockerUnauthorizedError(err.Error()) {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "822ff48e6462de89",
            "equalIndicator/v1": "bd4bb1971e4e7d8d1309e94d6f4c17e352bd4b20a7d288bfa39e0a1ae9d85da2"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in writeChangesFile)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in writeChangesFile)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 8,
                  "charOffset": 11340,
                  "charLength": 8,
                  "snippet": {
                    "text": "func() {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 392,
                  "startColumn": 1,
                  "charOffset": 11313,
                  "charLength": 75,
                  "snippet": {
                    "text": "\t\treturn \"\", err\n\t}\n\tdefer func() {\n\t\terr := file.Close()\n\t\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "11555f16ddf9e05c",
            "equalIndicator/v1": "c55d6fcb1aa34254b975b6a47488d9bcdc46ff55ac4badbfcccdfaf1298e154b"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'SetupLicenseAndProjectHash' coverage is below the threshold 50%",
            "markdown": "Method `SetupLicenseAndProjectHash` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/license.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 6,
                  "charOffset": 1295,
                  "charLength": 26,
                  "snippet": {
                    "text": "SetupLicenseAndProjectHash"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1287,
                  "charLength": 136,
                  "snippet": {
                    "text": "}\n\nfunc SetupLicenseAndProjectHash(endpoints *cloud.QdApiEndpoints, token string) {\n\tvar licenseData cloud.LicenseData\n\tif token != \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f3ce00908eb9aa88",
            "equalIndicator/v1": "c5b4948037ceae14305c9f9a6187f7a7e2c9070ed1d356910e6749ac374a28cf"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'StartHash' coverage is below the threshold 50%",
            "markdown": "Method `StartHash` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 25,
                  "charOffset": 5094,
                  "charLength": 9,
                  "snippet": {
                    "text": "StartHash"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 188,
                  "startColumn": 1,
                  "charOffset": 5067,
                  "charLength": 97,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) StartHash() (string, error) {\n\tswitch {\n\tcase o.Commit == o.DiffStart:"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "86cd7552c88c4acb",
            "equalIndicator/v1": "c6fd6318ef1dc3c16b633c6ab231371d228822228db81bea0dc42c9718282510"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'Properties' coverage is below the threshold 50%",
            "markdown": "Method `Properties` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 25,
                  "charOffset": 7673,
                  "charLength": 10,
                  "snippet": {
                    "text": "Properties"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 308,
                  "startColumn": 1,
                  "charOffset": 7646,
                  "charLength": 124,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) Properties() (map[string]string, []string) {\n\tvar flagsArr []string\n\tprops := map[string]string{}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8ad4147bbb27021f",
            "equalIndicator/v1": "c845a9344f302799ccc52a27300d4354ba80c49abd610a38028afd046516fa78"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in newSendCommand)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in newSendCommand)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/send.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 8,
                  "charOffset": 1445,
                  "charLength": 41,
                  "snippet": {
                    "text": "func(cmd *cobra.Command, args []string) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1260,
                  "charLength": 289,
                  "snippet": {
                    "text": "\nIf you are using other Qodana Cloud instance than https://qodana.cloud/, override it by declaring the %s environment variable.`, platform.PrimaryBold(cloud.QodanaEndpointEnv)),\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\toptions.FetchAnalyzerSettings()\n\t\t\tvar publisherPath string"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "90f28d5e27109b60",
            "equalIndicator/v1": "ca4ffc16242cd8aae96e1c01a5c984069e02fb86e25ec600dec6f13f3ad10105"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetCloudUrl' coverage is below the threshold 50%",
            "markdown": "Method `GetCloudUrl` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/cloud.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 33,
                  "charOffset": 973,
                  "charLength": 11,
                  "snippet": {
                    "text": "GetCloudUrl"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 938,
                  "charLength": 108,
                  "snippet": {
                    "text": "}\n\nfunc (endpoint *QdRootEndpoint) GetCloudUrl() string {\n\treturn fmt.Sprintf(\"https://%s\", endpoint.Host)\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "43e9b0a3c3b5ee8e",
            "equalIndicator/v1": "cb32ab7f28eced926f62d879a4af517a4bc3c52386111b2446d5dfe1d1fee3cc"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'postAnalysis' coverage is below the threshold 50%",
            "markdown": "Method `postAnalysis` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 6,
                  "charOffset": 6538,
                  "charLength": 12,
                  "snippet": {
                    "text": "postAnalysis"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 217,
                  "startColumn": 1,
                  "charOffset": 6466,
                  "charLength": 190,
                  "snippet": {
                    "text": "\n// postAnalysis post-analysis stage: wait for FUS stats to upload\nfunc postAnalysis(opts *QodanaOptions) {\n\tsyncIdeaCache(opts.ProjectDir, opts.CacheDir, true)\n\tsyncConfigCache(opts, false)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e43a69b10f323b7f",
            "equalIndicator/v1": "cd2075e0aaff34b7f607c7f2e97980e5005aef8a3bc92e54d8f4d8ecdae0af4d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'resetScanStages' coverage is below the threshold 50%",
            "markdown": "Method `resetScanStages` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 475,
                  "startColumn": 6,
                  "charOffset": 13478,
                  "charLength": 15,
                  "snippet": {
                    "text": "resetScanStages"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 473,
                  "startColumn": 1,
                  "charOffset": 13470,
                  "charLength": 87,
                  "snippet": {
                    "text": "}\n\nfunc resetScanStages() {\n\tscanStages = []string{\n\t\t\"Preparing Qodana Docker images\","
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ef6673b9e46f2a18",
            "equalIndicator/v1": "cf15b8f2441917b564ef961aa27311e586a86a3366f6903aca21730b4ed23060"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'removePortSocket' coverage is below the threshold 50%",
            "markdown": "Method `removePortSocket` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 6,
                  "charOffset": 2936,
                  "charLength": 16,
                  "snippet": {
                    "text": "removePortSocket"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 108,
                  "startColumn": 1,
                  "charOffset": 2856,
                  "charLength": 202,
                  "snippet": {
                    "text": "\n// removePortSocket removes .port from the system dir to resolve QD-7383.\nfunc removePortSocket(systemDir string) error {\n\tideaDir := filepath.Join(systemDir, \"idea\")\n\tfiles, err := os.ReadDir(ideaDir)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "80cfc895b362fa34",
            "equalIndicator/v1": "d4fb9d12721bd0b58ff2de196ec40346bbce1e8e62965971a0022c7cfdef19a3"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetLinterDir' coverage is below the threshold 50%",
            "markdown": "Method `GetLinterDir` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 25,
                  "charOffset": 6227,
                  "charLength": 12,
                  "snippet": {
                    "text": "GetLinterDir"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 241,
                  "startColumn": 1,
                  "charOffset": 6200,
                  "charLength": 99,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) GetLinterDir() string {\n\treturn filepath.Join(\n\t\to.GetQodanaSystemDir(),"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d2342d3871721dea",
            "equalIndicator/v1": "d76d5a6706c25f705763f543927e3690b642b9e11887531b51756470c98d0d92"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getContainerExitCode' coverage is below the threshold 50%",
            "markdown": "Method `getContainerExitCode` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 6,
                  "charOffset": 12525,
                  "charLength": 20,
                  "snippet": {
                    "text": "getContainerExitCode"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 430,
                  "startColumn": 1,
                  "charOffset": 12448,
                  "charLength": 253,
                  "snippet": {
                    "text": "\n// getContainerExitCode returns the exit code of the docker container.\nfunc getContainerExitCode(ctx context.Context, client *client.Client, id string) int64 {\n\tstatusCh, errCh := client.ContainerWait(ctx, id, container.WaitConditionNextExit)\n\tselect {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "52c7527184a80a27",
            "equalIndicator/v1": "d9b7c7239e3b0303b1a3ce7a49f6054838384c8fcfb5ca827ff43cf6ba5c9453"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'findIde' coverage is below the threshold 50%",
            "markdown": "Method `findIde` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 6,
                  "charOffset": 7988,
                  "charLength": 7,
                  "snippet": {
                    "text": "findIde"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 301,
                  "startColumn": 1,
                  "charOffset": 7980,
                  "charLength": 183,
                  "snippet": {
                    "text": "}\n\nfunc findIde(dir string) string {\n\tfor _, element := range supportedIdes {\n\t\tif _, err := os.Stat(filepath.Join(dir, fmt.Sprintf(\"%s%s\", element, getScriptSuffix()))); err == nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a433bec613e473b6",
            "equalIndicator/v1": "e2293e7a4b88e2981061bb6a7b844d05c4a52bbdc04139dcfce407ba89b98b1a"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'validateRemoteUrl' coverage is below the threshold 50%",
            "markdown": "Method `validateRemoteUrl` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/env.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 6,
                  "charOffset": 3190,
                  "charLength": 17,
                  "snippet": {
                    "text": "validateRemoteUrl"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 80,
                  "startColumn": 1,
                  "charOffset": 3182,
                  "charLength": 130,
                  "snippet": {
                    "text": "}\n\nfunc validateRemoteUrl(remote string, qEnv string) string {\n\tif strings.HasPrefix(qEnv, \"space\") {\n\t\treturn getSpaceRemoteUrl()"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c08fb1d6e66a0528",
            "equalIndicator/v1": "e25befccdd4582d403ba510664388b9878dfbc4878b8b2f82e3a7b59abf4f517"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "File 'cloud.go' coverage is below the threshold 50%",
            "markdown": "File `cloud.go` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/cloud.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 2,
                  "snippet": {
                    "text": "/*"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "/*\n * Copyright 2021-2024 JetBrains s.r.o.\n *"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6abdbede9dbdcdb7",
            "equalIndicator/v1": "e27462d4025be8c88a58c6b360f50309c3759e93bb86afedad09f079e91d426e"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'RunAnalysis' coverage is below the threshold 50%",
            "markdown": "Method `RunAnalysis` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/run.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 6,
                  "charOffset": 2787,
                  "charLength": 11,
                  "snippet": {
                    "text": "RunAnalysis"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 96,
                  "startColumn": 1,
                  "charOffset": 2779,
                  "charLength": 129,
                  "snippet": {
                    "text": "}\n\nfunc RunAnalysis(options *QodanaOptions) int {\n\tlinterOptions := options.GetLinterSpecificOptions()\n\tif linterOptions == nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "656a1c8d0d3466e3",
            "equalIndicator/v1": "e396227ce2e7a6fc244c39544b1c78821d5b9bb878226a90c183d52b5c22df3c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'runContainer' coverage is below the threshold 50%",
            "markdown": "Method `runContainer` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 6,
                  "charOffset": 12906,
                  "charLength": 12,
                  "snippet": {
                    "text": "runContainer"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 444,
                  "startColumn": 1,
                  "charOffset": 12864,
                  "charLength": 186,
                  "snippet": {
                    "text": "\n// runContainer runs the container.\nfunc runContainer(ctx context.Context, client *client.Client, opts *types.ContainerCreateConfig) {\n\tcreateResp, err := client.ContainerCreate(\n\t\tctx,"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "38fc6c63b27aef71",
            "equalIndicator/v1": "e4dc57bc282ec791d7910051a69af9faf0d0369c52fb9d62cee8b83633a86112"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'runScopeScript' coverage is below the threshold 50%",
            "markdown": "Method `runScopeScript` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 6,
                  "charOffset": 7815,
                  "charLength": 14,
                  "snippet": {
                    "text": "runScopeScript"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 268,
                  "startColumn": 1,
                  "charOffset": 7807,
                  "charLength": 203,
                  "snippet": {
                    "text": "}\n\nfunc runScopeScript(ctx context.Context, options *QodanaOptions, startHash string) int {\n\t// don't run this logic when we're about to launch a container - it's just double work\n\tif options.Ide == \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "69984fbe35771753",
            "equalIndicator/v1": "e4f51b83ea1750af0d1620de4a50304f969342da81eed21995959a6714b8b2b1"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in runScopeScript)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in runScopeScript)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 8,
                  "charOffset": 8283,
                  "charLength": 8,
                  "snippet": {
                    "text": "func() {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 282,
                  "startColumn": 1,
                  "charOffset": 8225,
                  "charLength": 98,
                  "snippet": {
                    "text": "\t\tlog.Fatal(\"Failed to prepare diff run \", err)\n\t}\n\tdefer func() {\n\t\t_ = os.Remove(scopeFile)\n\t}()"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "771a0adfa551107f",
            "equalIndicator/v1": "e58cd95f2a518d5781cfa4cd348537f094534ce3a5d292c2c375389b90422bb8"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method '(anonymous function in newInitCommand)' coverage is below the threshold 50%",
            "markdown": "Method `(anonymous function in newInitCommand)` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cmd/init.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 8,
                  "charOffset": 1224,
                  "charLength": 41,
                  "snippet": {
                    "text": "func(cmd *cobra.Command, args []string) {"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1004,
                  "charLength": 363,
                  "snippet": {
                    "text": "\t\tShort: \"Configure a project for Qodana\",\n\t\tLong:  `Configure a project for Qodana: prepare Qodana configuration file by analyzing the project structure and generating a default configuration qodana.yaml file.`,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tif options.ConfigName == \"\" {\n\t\t\t\toptions.ConfigName = platform.FindQodanaYaml(options.ProjectDir)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b91b757a301bf375",
            "equalIndicator/v1": "e5cbbfa66202b3ee020ab0d604d7adc93e18487307e70cfb6fbe7ed2ba008a63"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'prepareLocalIdeSettings' coverage is below the threshold 50%",
            "markdown": "Method `prepareLocalIdeSettings` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 6,
                  "charOffset": 9179,
                  "charLength": 23,
                  "snippet": {
                    "text": "prepareLocalIdeSettings"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 344,
                  "startColumn": 1,
                  "charOffset": 9171,
                  "charLength": 106,
                  "snippet": {
                    "text": "}\n\nfunc prepareLocalIdeSettings(opts *QodanaOptions) {\n\tguessProduct(opts)\n\tif Prod.BaseScriptName == \"\" {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f21d999b421d39bf",
            "equalIndicator/v1": "e9223b4875dc8c8fb4b5ccba2208caac4f24112270b240d506758879adc6b31d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetShortSarifPath' coverage is below the threshold 50%",
            "markdown": "Method `GetShortSarifPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 25,
                  "charOffset": 9107,
                  "charLength": 17,
                  "snippet": {
                    "text": "GetShortSarifPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 369,
                  "startColumn": 1,
                  "charOffset": 9080,
                  "charLength": 116,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) GetShortSarifPath() string {\n\treturn path.Join(o.ResultsDir, \"qodana-short.sarif.json\")\n}"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "986a212f2a4740a2",
            "equalIndicator/v1": "ef093092d046783a1fdc8c166137855acf7f8239694485a651a05d09eca2e50d"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'syncConfigCache' coverage is below the threshold 50%",
            "markdown": "Method `syncConfigCache` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/ide.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 6,
                  "charOffset": 12467,
                  "charLength": 15,
                  "snippet": {
                    "text": "syncConfigCache"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 454,
                  "startColumn": 1,
                  "charOffset": 12459,
                  "charLength": 176,
                  "snippet": {
                    "text": "}\n\nfunc syncConfigCache(opts *QodanaOptions, fromCache bool) {\n\tif Prod.BaseScriptName == idea {\n\t\tjdkTableFile := filepath.Join(opts.ConfDirPath(), \"options\", \"jdk.table.xml\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "174d9210c0a419aa",
            "equalIndicator/v1": "f14940962bd543d29e021218e6e86576da2f51893b38efb1d3dd5bd0bcfb8fba"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getContainerClient' coverage is below the threshold 50%",
            "markdown": "Method `getContainerClient` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 6,
                  "charOffset": 13395,
                  "charLength": 18,
                  "snippet": {
                    "text": "getContainerClient"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 462,
                  "startColumn": 1,
                  "charOffset": 13342,
                  "charLength": 164,
                  "snippet": {
                    "text": "\n// getContainerClient returns a docker client.\nfunc getContainerClient() *client.Client {\n\tdocker, err := client.NewClientWithOpts(client.FromEnv)\n\tif err != nil {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "46211716d4d5ce26",
            "equalIndicator/v1": "f3df29d09657ce10e9a0486a5aa4ee0747e207574ba11b55d31a3afb3023da8c"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetCloudApiEndpoints' coverage is below the threshold 50%",
            "markdown": "Method `GetCloudApiEndpoints` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cloud/endpoints.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 6,
                  "charOffset": 1489,
                  "charLength": 20,
                  "snippet": {
                    "text": "GetCloudApiEndpoints"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 61,
                  "startColumn": 1,
                  "charOffset": 1450,
                  "charLength": 165,
                  "snippet": {
                    "text": "var endpointApis *QdApiEndpoints\n\nfunc GetCloudApiEndpoints() *QdApiEndpoints {\n\tif endpointApis == nil {\n\t\tapis, err := GetCloudRootEndpoint().requestApiEndpoints()"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e806c3437c256caa",
            "equalIndicator/v1": "f6bd5949fcc6f5910e0b39e2001eebadb125d9814c6c947aaa96323c9ea65db3"
          },
          "baselineState": "new",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'extractDockerVolumes' coverage is below the threshold 50%",
            "markdown": "Method `extractDockerVolumes` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/container.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 6,
                  "charOffset": 13666,
                  "charLength": 20,
                  "snippet": {
                    "text": "extractDockerVolumes"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 471,
                  "startColumn": 1,
                  "charOffset": 13581,
                  "charLength": 198,
                  "snippet": {
                    "text": "\n// extractDockerVolumes extracts the source and target of the volume to mount.\nfunc extractDockerVolumes(volume string) (string, string) {\n\tsplit := strings.Split(volume, \":\")\n\tif len(split) == 2 {"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "efe3af43007b9648",
            "equalIndicator/v1": "f7279b71a6fde8f4acff461d08eb1d3ac659dee7f98b62eb35797c6b8a544083"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'writeChangesFile' coverage is below the threshold 50%",
            "markdown": "Method `writeChangesFile` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/system.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 375,
                  "startColumn": 6,
                  "charOffset": 10802,
                  "charLength": 16,
                  "snippet": {
                    "text": "writeChangesFile"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 373,
                  "startColumn": 1,
                  "charOffset": 10703,
                  "charLength": 258,
                  "snippet": {
                    "text": "\n// writeChangesFile creates a temp file containing the changes between diffStart and diffEnd\nfunc writeChangesFile(options *QodanaOptions, start string, end string) (string, error) {\n\tif start == \"\" || end == \"\" {\n\t\treturn \"\", fmt.Errorf(\"no commits given\")"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8a1b113d7c8bff8f",
            "equalIndicator/v1": "f78457d1544f8ecbe8f341afca998330fa4f6f666492745cdf8418b92bf9ebf6"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'ConfDirPath' coverage is below the threshold 50%",
            "markdown": "Method `ConfDirPath` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 25,
                  "charOffset": 7486,
                  "charLength": 11,
                  "snippet": {
                    "text": "ConfDirPath"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 300,
                  "startColumn": 1,
                  "charOffset": 7459,
                  "charLength": 113,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) ConfDirPath() string {\n\tif conf, ok := os.LookupEnv(QodanaConfEnv); ok {\n\t\treturn conf"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b20731124941e18f",
            "equalIndicator/v1": "fd1967d638f9c297c56ff26803638fe5ec16d8e7b5e161709dbcc4f2e0e99d11"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "GoCoverageInspection",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'GetAnalysisTimeout' coverage is below the threshold 50%",
            "markdown": "Method `GetAnalysisTimeout` coverage is below the threshold 50%"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "platform/options.go",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 25,
                  "charOffset": 8626,
                  "charLength": 18,
                  "snippet": {
                    "text": "GetAnalysisTimeout"
                  },
                  "sourceLanguage": "go"
                },
                "contextRegion": {
                  "startLine": 350,
                  "startColumn": 1,
                  "charOffset": 8599,
                  "charLength": 132,
                  "snippet": {
                    "text": "}\n\nfunc (o *QodanaOptions) GetAnalysisTimeout() time.Duration {\n\tif o.AnalysisTimeoutMs <= 0 {\n\t\treturn time.Duration(math.MaxInt64)"
                  },
                  "sourceLanguage": "go"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b469a168385445d3",
            "equalIndicator/v1": "ff9d5b62f06af8a1eea1a0ceae28a866d0da5bccb50d150ed769aecf17a65c22"
          },
          "baselineState": "unchanged",
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "go"
            ]
          }
        },
        {
          "ruleId": "VulnerableLibrariesLocal",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable , safe version v0.21.0 CVE-2023-42818 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found Results powered by Checkmarx(c)",
            "markdown": "Dependency go:golang.org/x/crypto:v0.20.0 is vulnerable , safe version v0.21.0\n\n* [CVE-2023-42818](https://devhub.checkmarx.com/cve-details/CVE-2023-42818?utm_source=jetbrains&utm_medium=referral) 9.8 Improper Restriction of Excessive Authentication Attempts vulnerability with High severity found\n\nResults powered by [Checkmarx](https://checkmarx.com)(c)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "core/go.mod",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 2,
                  "charOffset": 3530,
                  "charLength": 39,
                  "snippet": {
                    "text": "golang.org/x/crypto v0.20.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                },
                "contextRegion": {
                  "startLine": 77,
                  "startColumn": 1,
                  "charOffset": 3431,
                  "charLength": 214,
                  "snippet": {
                    "text": "\tgithub.com/yusufpapurcu/wmi v1.2.4 // indirect\n\tgithub.com/zalando/go-keyring v0.2.3 // indirect\n\tgolang.org/x/crypto v0.20.0 // indirect\n\tgolang.org/x/mod v0.12.0 // indirect\n\tgolang.org/x/sync v0.5.0 // indirect"
                  },
                  "sourceLanguage": "vgo"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "project",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "864b35d85fe0017a",
            "equalIndicator/v1": "c341dc31bb10453a164a771e57a3bdbdc917c3cdb162d82b5f108f733f95acf1"
          },
          "relatedLocations": [],
          "baselineState": "new",
          "properties": {
            "relatedProblemsRootHash": "54a5d153c61daff72d615f691657a1c19916a64fc053b84f3daa2041e4b759c6",
            "ideaSeverity": "ERROR",
            "qodanaSeverity": "Critical",
            "equalIndicator/2/additionalData": {
              "sourcePackage": "go:golang.org/x/crypto:v0.20.0",
              "vulnerabilityIds": "87b9d9b9-b672-4fbd-82a2-8a117c0dac05"
            },
            "tags": [
              "vgo"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "project/qodana/2024-03-18",
        "guid": "aa36226e-cc4f-47fe-af17-47f1af7cf820",
        "properties": {
          "jobUrl": "https://github.com/JetBrains/qodana-cli/actions/runs/8325629171"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "coverage": {
          "totalCoverage": 28,
          "totalLines": 5693,
          "totalCoveredLines": 1647
        },
        "configProfile": "absent",
        "deviceId": "200820300000000-8b1c-684f-77ad-cec10db81165",
        "qodanaNewResultSummary": {
          "high": 15,
          "critical": 1,
          "total": 16
        }
      }
    }
  ]
}